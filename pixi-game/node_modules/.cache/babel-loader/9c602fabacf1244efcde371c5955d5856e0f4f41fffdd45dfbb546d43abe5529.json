{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _utils = require('../utils');\nvar _math = require('../math');\nvar _const = require('../const');\nvar _settings = require('../settings');\nvar _settings2 = _interopRequireDefault(_settings);\nvar _Container = require('../display/Container');\nvar _Container2 = _interopRequireDefault(_Container);\nvar _RenderTexture = require('../textures/RenderTexture');\nvar _RenderTexture2 = _interopRequireDefault(_RenderTexture);\nvar _eventemitter = require('eventemitter3');\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar tempMatrix = new _math.Matrix();\n\n/**\n * The SystemRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}\n * and {@link PIXI.WebGLRenderer} which can be used for rendering a PixiJS scene.\n *\n * @abstract\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\n\nvar SystemRenderer = function (_EventEmitter) {\n  _inherits(SystemRenderer, _EventEmitter);\n\n  // eslint-disable-next-line valid-jsdoc\n  /**\n   * @param {string} system - The name of the system this renderer is for.\n   * @param {object} [options] - The optional renderer parameters\n   * @param {number} [options.width=800] - the width of the screen\n   * @param {number} [options.height=600] - the height of the screen\n   * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n   * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n   * @param {boolean} [options.autoResize=false] - If the render view is automatically resized, default false\n   * @param {boolean} [options.antialias=false] - sets antialias (only applicable in chrome at the moment)\n   * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The\n   *  resolution of the renderer retina would be 2.\n   * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,\n   *  enable this if you need to call toDataUrl on the webgl context.\n   * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n   *      not before the new render pass.\n   * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n   *  (shown if not transparent).\n   * @param {boolean} [options.roundPixels=false] - If true PixiJS will Math.floor() x/y values when rendering,\n   *  stopping pixel interpolation.\n   */\n  function SystemRenderer(system, options, arg2, arg3) {\n    _classCallCheck(this, SystemRenderer);\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n    (0, _utils.sayHello)(system);\n\n    // Support for constructor(system, screenWidth, screenHeight, options)\n    if (typeof options === 'number') {\n      options = Object.assign({\n        width: options,\n        height: arg2 || _settings2.default.RENDER_OPTIONS.height\n      }, arg3);\n    }\n\n    // Add the default render options\n    options = Object.assign({}, _settings2.default.RENDER_OPTIONS, options);\n\n    /**\n     * The supplied constructor options.\n     *\n     * @member {Object}\n     * @readOnly\n     */\n    _this.options = options;\n\n    /**\n     * The type of the renderer.\n     *\n     * @member {number}\n     * @default PIXI.RENDERER_TYPE.UNKNOWN\n     * @see PIXI.RENDERER_TYPE\n     */\n    _this.type = _const.RENDERER_TYPE.UNKNOWN;\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight)\n     *\n     * Its safe to use as filterArea or hitArea for whole stage\n     *\n     * @member {PIXI.Rectangle}\n     */\n    _this.screen = new _math.Rectangle(0, 0, options.width, options.height);\n\n    /**\n     * The canvas element that everything is drawn to\n     *\n     * @member {HTMLCanvasElement}\n     */\n    _this.view = options.view || document.createElement('canvas');\n\n    /**\n     * The resolution / device pixel ratio of the renderer\n     *\n     * @member {number}\n     * @default 1\n     */\n    _this.resolution = options.resolution || _settings2.default.RESOLUTION;\n\n    /**\n     * Whether the render view is transparent\n     *\n     * @member {boolean}\n     */\n    _this.transparent = options.transparent;\n\n    /**\n     * Whether css dimensions of canvas view should be resized to screen dimensions automatically\n     *\n     * @member {boolean}\n     */\n    _this.autoResize = options.autoResize || false;\n\n    /**\n     * Tracks the blend modes useful for this renderer.\n     *\n     * @member {object<string, mixed>}\n     */\n    _this.blendModes = null;\n\n    /**\n     * The value of the preserveDrawingBuffer flag affects whether or not the contents of\n     * the stencil buffer is retained after rendering.\n     *\n     * @member {boolean}\n     */\n    _this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example if\n     * your game has a canvas filling background image you often don't need this set.\n     *\n     * @member {boolean}\n     * @default\n     */\n    _this.clearBeforeRender = options.clearBeforeRender;\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Handy for crisp pixel art and speed on legacy devices.\n     *\n     * @member {boolean}\n     */\n    _this.roundPixels = options.roundPixels;\n\n    /**\n     * The background color as a number.\n     *\n     * @member {number}\n     * @private\n     */\n    _this._backgroundColor = 0x000000;\n\n    /**\n     * The background color as an [R, G, B] array.\n     *\n     * @member {number[]}\n     * @private\n     */\n    _this._backgroundColorRgba = [0, 0, 0, 0];\n\n    /**\n     * The background color as a string.\n     *\n     * @member {string}\n     * @private\n     */\n    _this._backgroundColorString = '#000000';\n    _this.backgroundColor = options.backgroundColor || _this._backgroundColor; // run bg color setter\n\n    /**\n     * This temporary display object used as the parent of the currently being rendered item\n     *\n     * @member {PIXI.DisplayObject}\n     * @private\n     */\n    _this._tempDisplayObjectParent = new _Container2.default();\n\n    /**\n     * The last root object that the renderer tried to render.\n     *\n     * @member {PIXI.DisplayObject}\n     * @private\n     */\n    _this._lastObjectRendered = _this._tempDisplayObjectParent;\n    return _this;\n  }\n\n  /**\n   * Same as view.width, actual number of pixels in the canvas by horizontal\n   *\n   * @member {number}\n   * @readonly\n   * @default 800\n   */\n\n  /**\n   * Resizes the screen and canvas to the specified width and height\n   * Canvas dimensions are multiplied by resolution\n   *\n   * @param {number} screenWidth - the new width of the screen\n   * @param {number} screenHeight - the new height of the screen\n   */\n  SystemRenderer.prototype.resize = function resize(screenWidth, screenHeight) {\n    this.screen.width = screenWidth;\n    this.screen.height = screenHeight;\n    this.view.width = screenWidth * this.resolution;\n    this.view.height = screenHeight * this.resolution;\n    if (this.autoResize) {\n      this.view.style.width = screenWidth + 'px';\n      this.view.style.height = screenHeight + 'px';\n    }\n  };\n\n  /**\n   * Useful function that returns a texture of the display object that can then be used to create sprites\n   * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n   *\n   * @param {PIXI.DisplayObject} displayObject - The displayObject the object will be generated from\n   * @param {number} scaleMode - Should be one of the scaleMode consts\n   * @param {number} resolution - The resolution / device pixel ratio of the texture being generated\n   * @param {PIXI.Rectangle} [region] - The region of the displayObject, that shall be rendered,\n   *        if no region is specified, defaults to the local bounds of the displayObject.\n   * @return {PIXI.Texture} a texture of the graphics object\n   */\n\n  SystemRenderer.prototype.generateTexture = function generateTexture(displayObject, scaleMode, resolution, region) {\n    region = region || displayObject.getLocalBounds();\n    var renderTexture = _RenderTexture2.default.create(region.width | 0, region.height | 0, scaleMode, resolution);\n    tempMatrix.tx = -region.x;\n    tempMatrix.ty = -region.y;\n    this.render(displayObject, renderTexture, false, tempMatrix, !!displayObject.parent);\n    return renderTexture;\n  };\n\n  /**\n   * Removes everything from the renderer and optionally removes the Canvas DOM element.\n   *\n   * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n   */\n\n  SystemRenderer.prototype.destroy = function destroy(removeView) {\n    if (removeView && this.view.parentNode) {\n      this.view.parentNode.removeChild(this.view);\n    }\n    this.type = _const.RENDERER_TYPE.UNKNOWN;\n    this.view = null;\n    this.screen = null;\n    this.resolution = 0;\n    this.transparent = false;\n    this.autoResize = false;\n    this.blendModes = null;\n    this.options = null;\n    this.preserveDrawingBuffer = false;\n    this.clearBeforeRender = false;\n    this.roundPixels = false;\n    this._backgroundColor = 0;\n    this._backgroundColorRgba = null;\n    this._backgroundColorString = null;\n    this._tempDisplayObjectParent = null;\n    this._lastObjectRendered = null;\n  };\n\n  /**\n   * The background color to fill if not transparent\n   *\n   * @member {number}\n   */\n\n  _createClass(SystemRenderer, [{\n    key: 'width',\n    get: function get() {\n      return this.view.width;\n    }\n\n    /**\n     * Same as view.height, actual number of pixels in the canvas by vertical\n     *\n     * @member {number}\n     * @readonly\n     * @default 600\n     */\n  }, {\n    key: 'height',\n    get: function get() {\n      return this.view.height;\n    }\n  }, {\n    key: 'backgroundColor',\n    get: function get() {\n      return this._backgroundColor;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      this._backgroundColor = value;\n      this._backgroundColorString = (0, _utils.hex2string)(value);\n      (0, _utils.hex2rgb)(value, this._backgroundColorRgba);\n    }\n  }]);\n  return SystemRenderer;\n}(_eventemitter2.default);\nexports.default = SystemRenderer;","map":{"version":3,"names":["_utils","require","_math","_const","_settings","_Container","_RenderTexture","_eventemitter","tempMatrix","Matrix","SystemRenderer","system","options","arg2","arg3","_classCallCheck","_this","_possibleConstructorReturn","_EventEmitter","call","sayHello","Object","assign","width","height","_settings2","default","RENDER_OPTIONS","type","RENDERER_TYPE","UNKNOWN","screen","Rectangle","view","document","createElement","resolution","RESOLUTION","transparent","autoResize","blendModes","preserveDrawingBuffer","clearBeforeRender","roundPixels","_backgroundColor","_backgroundColorRgba","_backgroundColorString","backgroundColor","_tempDisplayObjectParent","_Container2","_lastObjectRendered","resize","screenWidth","screenHeight","style","generateTexture","displayObject","scaleMode","region","getLocalBounds","renderTexture","_RenderTexture2","create","tx","x","ty","y","render","parent","destroy","removeView","parentNode","removeChild","value","hex2string","hex2rgb"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/renderers/SystemRenderer.js"],"sourcesContent":["import { sayHello, hex2string, hex2rgb } from '../utils';\nimport { Matrix, Rectangle } from '../math';\nimport { RENDERER_TYPE } from '../const';\nimport settings from '../settings';\nimport Container from '../display/Container';\nimport RenderTexture from '../textures/RenderTexture';\nimport EventEmitter from 'eventemitter3';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The SystemRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}\n * and {@link PIXI.WebGLRenderer} which can be used for rendering a PixiJS scene.\n *\n * @abstract\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nexport default class SystemRenderer extends EventEmitter\n{\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * @param {string} system - The name of the system this renderer is for.\n     * @param {object} [options] - The optional renderer parameters\n     * @param {number} [options.width=800] - the width of the screen\n     * @param {number} [options.height=600] - the height of the screen\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.autoResize=false] - If the render view is automatically resized, default false\n     * @param {boolean} [options.antialias=false] - sets antialias (only applicable in chrome at the moment)\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The\n     *  resolution of the renderer retina would be 2.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the webgl context.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *      not before the new render pass.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {boolean} [options.roundPixels=false] - If true PixiJS will Math.floor() x/y values when rendering,\n     *  stopping pixel interpolation.\n     */\n    constructor(system, options, arg2, arg3)\n    {\n        super();\n\n        sayHello(system);\n\n        // Support for constructor(system, screenWidth, screenHeight, options)\n        if (typeof options === 'number')\n        {\n            options = Object.assign({\n                width: options,\n                height: arg2 || settings.RENDER_OPTIONS.height,\n            }, arg3);\n        }\n\n        // Add the default render options\n        options = Object.assign({}, settings.RENDER_OPTIONS, options);\n\n        /**\n         * The supplied constructor options.\n         *\n         * @member {Object}\n         * @readOnly\n         */\n        this.options = options;\n\n        /**\n         * The type of the renderer.\n         *\n         * @member {number}\n         * @default PIXI.RENDERER_TYPE.UNKNOWN\n         * @see PIXI.RENDERER_TYPE\n         */\n        this.type = RENDERER_TYPE.UNKNOWN;\n\n        /**\n         * Measurements of the screen. (0, 0, screenWidth, screenHeight)\n         *\n         * Its safe to use as filterArea or hitArea for whole stage\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n\n        /**\n         * The canvas element that everything is drawn to\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.view = options.view || document.createElement('canvas');\n\n        /**\n         * The resolution / device pixel ratio of the renderer\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = options.resolution || settings.RESOLUTION;\n\n        /**\n         * Whether the render view is transparent\n         *\n         * @member {boolean}\n         */\n        this.transparent = options.transparent;\n\n        /**\n         * Whether css dimensions of canvas view should be resized to screen dimensions automatically\n         *\n         * @member {boolean}\n         */\n        this.autoResize = options.autoResize || false;\n\n        /**\n         * Tracks the blend modes useful for this renderer.\n         *\n         * @member {object<string, mixed>}\n         */\n        this.blendModes = null;\n\n        /**\n         * The value of the preserveDrawingBuffer flag affects whether or not the contents of\n         * the stencil buffer is retained after rendering.\n         *\n         * @member {boolean}\n         */\n        this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n        /**\n         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n         * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n         * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n         * to clear the canvas every frame. Disable this by setting this to false. For example if\n         * your game has a canvas filling background image you often don't need this set.\n         *\n         * @member {boolean}\n         * @default\n         */\n        this.clearBeforeRender = options.clearBeforeRender;\n\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Handy for crisp pixel art and speed on legacy devices.\n         *\n         * @member {boolean}\n         */\n        this.roundPixels = options.roundPixels;\n\n        /**\n         * The background color as a number.\n         *\n         * @member {number}\n         * @private\n         */\n        this._backgroundColor = 0x000000;\n\n        /**\n         * The background color as an [R, G, B] array.\n         *\n         * @member {number[]}\n         * @private\n         */\n        this._backgroundColorRgba = [0, 0, 0, 0];\n\n        /**\n         * The background color as a string.\n         *\n         * @member {string}\n         * @private\n         */\n        this._backgroundColorString = '#000000';\n\n        this.backgroundColor = options.backgroundColor || this._backgroundColor; // run bg color setter\n\n        /**\n         * This temporary display object used as the parent of the currently being rendered item\n         *\n         * @member {PIXI.DisplayObject}\n         * @private\n         */\n        this._tempDisplayObjectParent = new Container();\n\n        /**\n         * The last root object that the renderer tried to render.\n         *\n         * @member {PIXI.DisplayObject}\n         * @private\n         */\n        this._lastObjectRendered = this._tempDisplayObjectParent;\n    }\n\n    /**\n     * Same as view.width, actual number of pixels in the canvas by horizontal\n     *\n     * @member {number}\n     * @readonly\n     * @default 800\n     */\n    get width()\n    {\n        return this.view.width;\n    }\n\n    /**\n     * Same as view.height, actual number of pixels in the canvas by vertical\n     *\n     * @member {number}\n     * @readonly\n     * @default 600\n     */\n    get height()\n    {\n        return this.view.height;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified width and height\n     * Canvas dimensions are multiplied by resolution\n     *\n     * @param {number} screenWidth - the new width of the screen\n     * @param {number} screenHeight - the new height of the screen\n     */\n    resize(screenWidth, screenHeight)\n    {\n        this.screen.width = screenWidth;\n        this.screen.height = screenHeight;\n\n        this.view.width = screenWidth * this.resolution;\n        this.view.height = screenHeight * this.resolution;\n\n        if (this.autoResize)\n        {\n            this.view.style.width = `${screenWidth}px`;\n            this.view.style.height = `${screenHeight}px`;\n        }\n    }\n\n    /**\n     * Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n     *\n     * @param {PIXI.DisplayObject} displayObject - The displayObject the object will be generated from\n     * @param {number} scaleMode - Should be one of the scaleMode consts\n     * @param {number} resolution - The resolution / device pixel ratio of the texture being generated\n     * @param {PIXI.Rectangle} [region] - The region of the displayObject, that shall be rendered,\n     *        if no region is specified, defaults to the local bounds of the displayObject.\n     * @return {PIXI.Texture} a texture of the graphics object\n     */\n    generateTexture(displayObject, scaleMode, resolution, region)\n    {\n        region = region || displayObject.getLocalBounds();\n\n        const renderTexture = RenderTexture.create(region.width | 0, region.height | 0, scaleMode, resolution);\n\n        tempMatrix.tx = -region.x;\n        tempMatrix.ty = -region.y;\n\n        this.render(displayObject, renderTexture, false, tempMatrix, !!displayObject.parent);\n\n        return renderTexture;\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    destroy(removeView)\n    {\n        if (removeView && this.view.parentNode)\n        {\n            this.view.parentNode.removeChild(this.view);\n        }\n\n        this.type = RENDERER_TYPE.UNKNOWN;\n\n        this.view = null;\n\n        this.screen = null;\n\n        this.resolution = 0;\n\n        this.transparent = false;\n\n        this.autoResize = false;\n\n        this.blendModes = null;\n\n        this.options = null;\n\n        this.preserveDrawingBuffer = false;\n        this.clearBeforeRender = false;\n\n        this.roundPixels = false;\n\n        this._backgroundColor = 0;\n        this._backgroundColorRgba = null;\n        this._backgroundColorString = null;\n\n        this._tempDisplayObjectParent = null;\n        this._lastObjectRendered = null;\n    }\n\n    /**\n     * The background color to fill if not transparent\n     *\n     * @member {number}\n     */\n    get backgroundColor()\n    {\n        return this._backgroundColor;\n    }\n\n    set backgroundColor(value) // eslint-disable-line require-jsdoc\n    {\n        this._backgroundColor = value;\n        this._backgroundColorString = hex2string(value);\n        hex2rgb(value, this._backgroundColorRgba);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}