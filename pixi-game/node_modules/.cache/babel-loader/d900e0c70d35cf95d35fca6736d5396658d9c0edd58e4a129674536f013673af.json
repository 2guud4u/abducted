{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar generateFillStyle = require('./generateFillStyle.js');\nfunction drawGlyph(canvas, context, metrics, x, y, resolution, style) {\n  const char = metrics.text;\n  const fontProperties = metrics.fontProperties;\n  context.translate(x, y);\n  context.scale(resolution, resolution);\n  const tx = style.strokeThickness / 2;\n  const ty = -(style.strokeThickness / 2);\n  context.font = style.toFontString();\n  context.lineWidth = style.strokeThickness;\n  context.textBaseline = style.textBaseline;\n  context.lineJoin = style.lineJoin;\n  context.miterLimit = style.miterLimit;\n  context.fillStyle = generateFillStyle.generateFillStyle(canvas, context, style, resolution, [char], metrics);\n  context.strokeStyle = style.stroke;\n  if (style.dropShadow) {\n    const dropShadowColor = style.dropShadowColor;\n    const dropShadowBlur = style.dropShadowBlur * resolution;\n    const dropShadowDistance = style.dropShadowDistance * resolution;\n    context.shadowColor = core.Color.shared.setValue(dropShadowColor).setAlpha(style.dropShadowAlpha).toRgbaString();\n    context.shadowBlur = dropShadowBlur;\n    context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n    context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance;\n  } else {\n    context.shadowColor = \"black\";\n    context.shadowBlur = 0;\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n  }\n  if (style.stroke && style.strokeThickness) {\n    context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n  if (style.fill) {\n    context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n  context.setTransform(1, 0, 0, 1, 0, 0);\n  context.fillStyle = \"rgba(0, 0, 0, 0)\";\n}\nexports.drawGlyph = drawGlyph;","map":{"version":3,"names":["drawGlyph","canvas","context","metrics","x","y","resolution","style","char","text","fontProperties","translate","scale","tx","strokeThickness","ty","font","toFontString","lineWidth","textBaseline","lineJoin","miterLimit","fillStyle","generateFillStyle","strokeStyle","stroke","dropShadow","dropShadowColor","dropShadowBlur","dropShadowDistance","shadowColor","core","Color","shared","setValue","setAlpha","dropShadowAlpha","toRgbaString","shadowBlur","shadowOffsetX","Math","cos","dropShadowAngle","shadowOffsetY","sin","strokeText","lineHeight","descent","fill","fillText","setTransform"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/text-bitmap/src/utils/drawGlyph.ts"],"sourcesContent":["import { Color } from '@pixi/core';\nimport { generateFillStyle } from './generateFillStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/core';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {PIXI.ICanvas} canvas\n * @param {PIXI.ICanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nexport function drawGlyph(\n    canvas: ICanvas,\n    context: ICanvasRenderingContext2D,\n    metrics: TextMetrics,\n    x: number,\n    y: number,\n    resolution: number,\n    style: TextStyle\n): void\n{\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n\n    context.translate(x, y);\n    context.scale(resolution, resolution);\n\n    const tx = style.strokeThickness / 2;\n    const ty = -(style.strokeThickness / 2);\n\n    context.font = style.toFontString();\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n\n    // set canvas text styles\n    context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n    context.strokeStyle = style.stroke as string;\n\n    if (style.dropShadow)\n    {\n        const dropShadowColor = style.dropShadowColor;\n        const dropShadowBlur = style.dropShadowBlur * resolution;\n        const dropShadowDistance = style.dropShadowDistance * resolution;\n\n        context.shadowColor = Color.shared\n            .setValue(dropShadowColor)\n            .setAlpha(style.dropShadowAlpha)\n            .toRgbaString();\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance;\n    }\n    else\n    {\n        context.shadowColor = 'black';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n    }\n\n    if (style.stroke && style.strokeThickness)\n    {\n        context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n    if (style.fill)\n    {\n        context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n\n    context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n"],"mappings":";;;;;;;AAqBO,SAAAA,UACHC,MAAA,EACAC,OACA,EAAAC,OAAA,EACAC,CACA,EAAAC,CAAA,EACAC,UAAA,EACAC,KAEJ;EACI,MAAMC,IAAA,GAAOL,OAAQ,CAAAM,IAAA;EACrB,MAAMC,cAAA,GAAiBP,OAAQ,CAAAO,cAAA;EAEvBR,OAAA,CAAAS,SAAA,CAAUP,CAAA,EAAGC,CAAC;EACdH,OAAA,CAAAU,KAAA,CAAMN,UAAA,EAAYA,UAAU;EAE9B,MAAAO,EAAA,GAAKN,KAAA,CAAMO,eAAkB;EAC7B,MAAAC,EAAA,GAAK,EAAER,KAAA,CAAMO,eAAkB;EAE7BZ,OAAA,CAAAc,IAAA,GAAOT,KAAA,CAAMU,YAAa;EAClCf,OAAA,CAAQgB,SAAA,GAAYX,KAAM,CAAAO,eAAA;EAC1BZ,OAAA,CAAQiB,YAAA,GAAeZ,KAAM,CAAAY,YAAA;EAC7BjB,OAAA,CAAQkB,QAAA,GAAWb,KAAM,CAAAa,QAAA;EACzBlB,OAAA,CAAQmB,UAAA,GAAad,KAAM,CAAAc,UAAA;EAGnBnB,OAAA,CAAAoB,SAAA,GAAYC,iBAAA,CAAAA,iBAAA,CAAkBtB,MAAQ,EAAAC,OAAA,EAASK,KAAA,EAAOD,UAAY,GAACE,IAAI,GAAGL,OAAO;EACzFD,OAAA,CAAQsB,WAAA,GAAcjB,KAAM,CAAAkB,MAAA;EAE5B,IAAIlB,KAAA,CAAMmB,UACV;IACI,MAAMC,eAAA,GAAkBpB,KAAM,CAAAoB,eAAA;IACxB,MAAAC,cAAA,GAAiBrB,KAAA,CAAMqB,cAAiB,GAAAtB,UAAA;IACxC,MAAAuB,kBAAA,GAAqBtB,KAAA,CAAMsB,kBAAqB,GAAAvB,UAAA;IAE9CJ,OAAA,CAAA4B,WAAA,GAAcC,IAAA,CAAAC,KAAM,CAAAC,MAAA,CACvBC,QAAS,CAAAP,eAAe,EACxBQ,QAAS,CAAA5B,KAAA,CAAM6B,eAAe,EAC9BC,YAAa;IAClBnC,OAAA,CAAQoC,UAAa,GAAAV,cAAA;IACrB1B,OAAA,CAAQqC,aAAgB,GAAAC,IAAA,CAAKC,GAAI,CAAAlC,KAAA,CAAMmC,eAAe,CAAI,GAAAb,kBAAA;IAC1D3B,OAAA,CAAQyC,aAAgB,GAAAH,IAAA,CAAKI,GAAI,CAAArC,KAAA,CAAMmC,eAAe,CAAI,GAAAb,kBAAA;EAAA,CAG9D;IACI3B,OAAA,CAAQ4B,WAAc;IACtB5B,OAAA,CAAQoC,UAAa;IACrBpC,OAAA,CAAQqC,aAAgB;IACxBrC,OAAA,CAAQyC,aAAgB;EAAA;EAGxB,IAAApC,KAAA,CAAMkB,MAAU,IAAAlB,KAAA,CAAMO,eAC1B;IACIZ,OAAA,CAAQ2C,UAAA,CAAWrC,IAAM,EAAAK,EAAA,EAAIE,EAAA,GAAKZ,OAAQ,CAAA2C,UAAA,GAAapC,cAAA,CAAeqC,OAAO;EAAA;EAEjF,IAAIxC,KAAA,CAAMyC,IACV;IACI9C,OAAA,CAAQ+C,QAAA,CAASzC,IAAM,EAAAK,EAAA,EAAIE,EAAA,GAAKZ,OAAQ,CAAA2C,UAAA,GAAapC,cAAA,CAAeqC,OAAO;EAAA;EAG/E7C,OAAA,CAAQgD,YAAA,CAAa,CAAG,KAAG,CAAG,KAAG,GAAG,CAAC;EAErChD,OAAA,CAAQoB,SAAY;AACxB"},"metadata":{},"sourceType":"script","externalDependencies":[]}