{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _pixiGlCore = require('pixi-gl-core');\nvar _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);\nvar _createIndicesForQuads = require('../../core/utils/createIndicesForQuads');\nvar _createIndicesForQuads2 = _interopRequireDefault(_createIndicesForQuads);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nvar ParticleBuffer = function () {\n  /**\n   * @param {WebGLRenderingContext} gl - The rendering context.\n   * @param {object} properties - The properties to upload.\n   * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n   * @param {number} size - The size of the batch.\n   */\n  function ParticleBuffer(gl, properties, dynamicPropertyFlags, size) {\n    _classCallCheck(this, ParticleBuffer);\n\n    /**\n     * The current WebGL drawing context.\n     *\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    /**\n     * The number of particles the buffer can hold\n     *\n     * @member {number}\n     */\n    this.size = size;\n\n    /**\n     * A list of the properties that are dynamic.\n     *\n     * @member {object[]}\n     */\n    this.dynamicProperties = [];\n\n    /**\n     * A list of the properties that are static.\n     *\n     * @member {object[]}\n     */\n    this.staticProperties = [];\n    for (var i = 0; i < properties.length; ++i) {\n      var property = properties[i];\n\n      // Make copy of properties object so that when we edit the offset it doesn't\n      // change all other instances of the object literal\n      property = {\n        attribute: property.attribute,\n        size: property.size,\n        uploadFunction: property.uploadFunction,\n        unsignedByte: property.unsignedByte,\n        offset: property.offset\n      };\n      if (dynamicPropertyFlags[i]) {\n        this.dynamicProperties.push(property);\n      } else {\n        this.staticProperties.push(property);\n      }\n    }\n    this.staticStride = 0;\n    this.staticBuffer = null;\n    this.staticData = null;\n    this.staticDataUint32 = null;\n    this.dynamicStride = 0;\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n    this.dynamicDataUint32 = null;\n    this._updateID = 0;\n    this.initBuffers();\n  }\n\n  /**\n   * Sets up the renderer context and necessary buffers.\n   *\n   * @private\n   */\n\n  ParticleBuffer.prototype.initBuffers = function initBuffers() {\n    var gl = this.gl;\n    var dynamicOffset = 0;\n\n    /**\n     * Holds the indices of the geometry (quads) to draw\n     *\n     * @member {Uint16Array}\n     */\n    this.indices = (0, _createIndicesForQuads2.default)(this.size);\n    this.indexBuffer = _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n    this.dynamicStride = 0;\n    for (var i = 0; i < this.dynamicProperties.length; ++i) {\n      var property = this.dynamicProperties[i];\n      property.offset = dynamicOffset;\n      dynamicOffset += property.size;\n      this.dynamicStride += property.size;\n    }\n    var dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n    this.dynamicData = new Float32Array(dynBuffer);\n    this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n    this.dynamicBuffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, dynBuffer, gl.STREAM_DRAW);\n\n    // static //\n    var staticOffset = 0;\n    this.staticStride = 0;\n    for (var _i = 0; _i < this.staticProperties.length; ++_i) {\n      var _property = this.staticProperties[_i];\n      _property.offset = staticOffset;\n      staticOffset += _property.size;\n      this.staticStride += _property.size;\n    }\n    var statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n    this.staticData = new Float32Array(statBuffer);\n    this.staticDataUint32 = new Uint32Array(statBuffer);\n    this.staticBuffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, statBuffer, gl.STATIC_DRAW);\n    this.vao = new _pixiGlCore2.default.VertexArrayObject(gl).addIndex(this.indexBuffer);\n    for (var _i2 = 0; _i2 < this.dynamicProperties.length; ++_i2) {\n      var _property2 = this.dynamicProperties[_i2];\n      if (_property2.unsignedByte) {\n        this.vao.addAttribute(this.dynamicBuffer, _property2.attribute, gl.UNSIGNED_BYTE, true, this.dynamicStride * 4, _property2.offset * 4);\n      } else {\n        this.vao.addAttribute(this.dynamicBuffer, _property2.attribute, gl.FLOAT, false, this.dynamicStride * 4, _property2.offset * 4);\n      }\n    }\n    for (var _i3 = 0; _i3 < this.staticProperties.length; ++_i3) {\n      var _property3 = this.staticProperties[_i3];\n      if (_property3.unsignedByte) {\n        this.vao.addAttribute(this.staticBuffer, _property3.attribute, gl.UNSIGNED_BYTE, true, this.staticStride * 4, _property3.offset * 4);\n      } else {\n        this.vao.addAttribute(this.staticBuffer, _property3.attribute, gl.FLOAT, false, this.staticStride * 4, _property3.offset * 4);\n      }\n    }\n  };\n\n  /**\n   * Uploads the dynamic properties.\n   *\n   * @param {PIXI.DisplayObject[]} children - The children to upload.\n   * @param {number} startIndex - The index to start at.\n   * @param {number} amount - The number to upload.\n   */\n\n  ParticleBuffer.prototype.uploadDynamic = function uploadDynamic(children, startIndex, amount) {\n    for (var i = 0; i < this.dynamicProperties.length; i++) {\n      var property = this.dynamicProperties[i];\n      property.uploadFunction(children, startIndex, amount, property.unsignedByte ? this.dynamicDataUint32 : this.dynamicData, this.dynamicStride, property.offset);\n    }\n    this.dynamicBuffer.upload();\n  };\n\n  /**\n   * Uploads the static properties.\n   *\n   * @param {PIXI.DisplayObject[]} children - The children to upload.\n   * @param {number} startIndex - The index to start at.\n   * @param {number} amount - The number to upload.\n   */\n\n  ParticleBuffer.prototype.uploadStatic = function uploadStatic(children, startIndex, amount) {\n    for (var i = 0; i < this.staticProperties.length; i++) {\n      var property = this.staticProperties[i];\n      property.uploadFunction(children, startIndex, amount, property.unsignedByte ? this.staticDataUint32 : this.staticData, this.staticStride, property.offset);\n    }\n    this.staticBuffer.upload();\n  };\n\n  /**\n   * Destroys the ParticleBuffer.\n   *\n   */\n\n  ParticleBuffer.prototype.destroy = function destroy() {\n    this.dynamicProperties = null;\n    this.dynamicBuffer.destroy();\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n    this.dynamicDataUint32 = null;\n    this.staticProperties = null;\n    this.staticBuffer.destroy();\n    this.staticBuffer = null;\n    this.staticData = null;\n    this.staticDataUint32 = null;\n  };\n  return ParticleBuffer;\n}();\nexports.default = ParticleBuffer;","map":{"version":3,"names":["_pixiGlCore","require","_createIndicesForQuads","ParticleBuffer","gl","properties","dynamicPropertyFlags","size","_classCallCheck","dynamicProperties","staticProperties","i","length","property","attribute","uploadFunction","unsignedByte","offset","push","staticStride","staticBuffer","staticData","staticDataUint32","dynamicStride","dynamicBuffer","dynamicData","dynamicDataUint32","_updateID","initBuffers","dynamicOffset","indices","_createIndicesForQuads2","default","indexBuffer","_pixiGlCore2","GLBuffer","createIndexBuffer","STATIC_DRAW","dynBuffer","ArrayBuffer","Float32Array","Uint32Array","createVertexBuffer","STREAM_DRAW","staticOffset","_i","_property","statBuffer","vao","VertexArrayObject","addIndex","_i2","_property2","addAttribute","UNSIGNED_BYTE","FLOAT","_i3","_property3","uploadDynamic","children","startIndex","amount","upload","uploadStatic","destroy"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/particles/webgl/ParticleBuffer.js"],"sourcesContent":["import glCore from 'pixi-gl-core';\nimport createIndicesForQuads from '../../core/utils/createIndicesForQuads';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class ParticleBuffer\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The rendering context.\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    constructor(gl, properties, dynamicPropertyFlags, size)\n    {\n        /**\n         * The current WebGL drawing context.\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        /**\n         * The number of particles the buffer can hold\n         *\n         * @member {number}\n         */\n        this.size = size;\n\n        /**\n         * A list of the properties that are dynamic.\n         *\n         * @member {object[]}\n         */\n        this.dynamicProperties = [];\n\n        /**\n         * A list of the properties that are static.\n         *\n         * @member {object[]}\n         */\n        this.staticProperties = [];\n\n        for (let i = 0; i < properties.length; ++i)\n        {\n            let property = properties[i];\n\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attribute: property.attribute,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                unsignedByte: property.unsignedByte,\n                offset: property.offset,\n            };\n\n            if (dynamicPropertyFlags[i])\n            {\n                this.dynamicProperties.push(property);\n            }\n            else\n            {\n                this.staticProperties.push(property);\n            }\n        }\n\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this._updateID = 0;\n\n        this.initBuffers();\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    initBuffers()\n    {\n        const gl = this.gl;\n        let dynamicOffset = 0;\n\n        /**\n         * Holds the indices of the geometry (quads) to draw\n         *\n         * @member {Uint16Array}\n         */\n        this.indices = createIndicesForQuads(this.size);\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n        this.dynamicStride = 0;\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n\n        const dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n\n        this.dynamicData = new Float32Array(dynBuffer);\n        this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n        this.dynamicBuffer = glCore.GLBuffer.createVertexBuffer(gl, dynBuffer, gl.STREAM_DRAW);\n\n        // static //\n        let staticOffset = 0;\n\n        this.staticStride = 0;\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n\n        const statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n\n        this.staticData = new Float32Array(statBuffer);\n        this.staticDataUint32 = new Uint32Array(statBuffer);\n        this.staticBuffer = glCore.GLBuffer.createVertexBuffer(gl, statBuffer, gl.STATIC_DRAW);\n\n        this.vao = new glCore.VertexArrayObject(gl)\n        .addIndex(this.indexBuffer);\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            if (property.unsignedByte)\n            {\n                this.vao.addAttribute(\n                    this.dynamicBuffer,\n                    property.attribute,\n                    gl.UNSIGNED_BYTE,\n                    true,\n                    this.dynamicStride * 4,\n                    property.offset * 4\n                );\n            }\n            else\n            {\n                this.vao.addAttribute(\n                    this.dynamicBuffer,\n                    property.attribute,\n                    gl.FLOAT,\n                    false,\n                    this.dynamicStride * 4,\n                    property.offset * 4\n                );\n            }\n        }\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            if (property.unsignedByte)\n            {\n                this.vao.addAttribute(\n                    this.staticBuffer,\n                    property.attribute,\n                    gl.UNSIGNED_BYTE,\n                    true,\n                    this.staticStride * 4,\n                    property.offset * 4\n                );\n            }\n            else\n            {\n                this.vao.addAttribute(\n                    this.staticBuffer,\n                    property.attribute,\n                    gl.FLOAT,\n                    false,\n                    this.staticStride * 4,\n                    property.offset * 4\n                );\n            }\n        }\n    }\n\n    /**\n     * Uploads the dynamic properties.\n     *\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadDynamic(children, startIndex, amount)\n    {\n        for (let i = 0; i < this.dynamicProperties.length; i++)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.unsignedByte ? this.dynamicDataUint32 : this.dynamicData,\n                this.dynamicStride, property.offset);\n        }\n\n        this.dynamicBuffer.upload();\n    }\n\n    /**\n     * Uploads the static properties.\n     *\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    uploadStatic(children, startIndex, amount)\n    {\n        for (let i = 0; i < this.staticProperties.length; i++)\n        {\n            const property = this.staticProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.unsignedByte ? this.staticDataUint32 : this.staticData,\n                this.staticStride, property.offset);\n        }\n\n        this.staticBuffer.upload();\n    }\n\n    /**\n     * Destroys the ParticleBuffer.\n     *\n     */\n    destroy()\n    {\n        this.dynamicProperties = null;\n        this.dynamicBuffer.destroy();\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this.staticProperties = null;\n        this.staticBuffer.destroy();\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}