{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = buildCircle;\nvar _buildLine = require('./buildLine');\nvar _buildLine2 = _interopRequireDefault(_buildLine);\nvar _const = require('../../../const');\nvar _utils = require('../../../utils');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nfunction buildCircle(graphicsData, webGLData, webGLDataNativeLines) {\n  // need to convert points to a nice regular data\n  var circleData = graphicsData.shape;\n  var x = circleData.x;\n  var y = circleData.y;\n  var width = void 0;\n  var height = void 0;\n\n  // TODO - bit hacky??\n  if (graphicsData.type === _const.SHAPES.CIRC) {\n    width = circleData.radius;\n    height = circleData.radius;\n  } else {\n    width = circleData.width;\n    height = circleData.height;\n  }\n  if (width === 0 || height === 0) {\n    return;\n  }\n  var totalSegs = Math.floor(30 * Math.sqrt(circleData.radius)) || Math.floor(15 * Math.sqrt(circleData.width + circleData.height));\n  var seg = Math.PI * 2 / totalSegs;\n  if (graphicsData.fill) {\n    var color = (0, _utils.hex2rgb)(graphicsData.fillColor);\n    var alpha = graphicsData.fillAlpha;\n    var r = color[0] * alpha;\n    var g = color[1] * alpha;\n    var b = color[2] * alpha;\n    var verts = webGLData.points;\n    var indices = webGLData.indices;\n    var vecPos = verts.length / 6;\n    indices.push(vecPos);\n    for (var i = 0; i < totalSegs + 1; i++) {\n      verts.push(x, y, r, g, b, alpha);\n      verts.push(x + Math.sin(seg * i) * width, y + Math.cos(seg * i) * height, r, g, b, alpha);\n      indices.push(vecPos++, vecPos++);\n    }\n    indices.push(vecPos - 1);\n  }\n  if (graphicsData.lineWidth) {\n    var tempPoints = graphicsData.points;\n    graphicsData.points = [];\n    for (var _i = 0; _i < totalSegs; _i++) {\n      graphicsData.points.push(x + Math.sin(seg * -_i) * width, y + Math.cos(seg * -_i) * height);\n    }\n    graphicsData.points.push(graphicsData.points[0], graphicsData.points[1]);\n    (0, _buildLine2.default)(graphicsData, webGLData, webGLDataNativeLines);\n    graphicsData.points = tempPoints;\n  }\n}","map":{"version":3,"names":["buildCircle","_buildLine","require","_const","_utils","graphicsData","webGLData","webGLDataNativeLines","circleData","shape","x","y","width","height","type","SHAPES","CIRC","radius","totalSegs","Math","floor","sqrt","seg","PI","fill","color","hex2rgb","fillColor","alpha","fillAlpha","r","g","b","verts","points","indices","vecPos","length","push","i","sin","cos","lineWidth","tempPoints","_i","_buildLine2","default"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/graphics/webgl/utils/buildCircle.js"],"sourcesContent":["import buildLine from './buildLine';\nimport { SHAPES } from '../../../const';\nimport { hex2rgb } from '../../../utils';\n\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nexport default function buildCircle(graphicsData, webGLData, webGLDataNativeLines)\n{\n    // need to convert points to a nice regular data\n    const circleData = graphicsData.shape;\n    const x = circleData.x;\n    const y = circleData.y;\n    let width;\n    let height;\n\n    // TODO - bit hacky??\n    if (graphicsData.type === SHAPES.CIRC)\n    {\n        width = circleData.radius;\n        height = circleData.radius;\n    }\n    else\n    {\n        width = circleData.width;\n        height = circleData.height;\n    }\n\n    if (width === 0 || height === 0)\n    {\n        return;\n    }\n\n    const totalSegs = Math.floor(30 * Math.sqrt(circleData.radius))\n        || Math.floor(15 * Math.sqrt(circleData.width + circleData.height));\n\n    const seg = (Math.PI * 2) / totalSegs;\n\n    if (graphicsData.fill)\n    {\n        const color = hex2rgb(graphicsData.fillColor);\n        const alpha = graphicsData.fillAlpha;\n\n        const r = color[0] * alpha;\n        const g = color[1] * alpha;\n        const b = color[2] * alpha;\n\n        const verts = webGLData.points;\n        const indices = webGLData.indices;\n\n        let vecPos = verts.length / 6;\n\n        indices.push(vecPos);\n\n        for (let i = 0; i < totalSegs + 1; i++)\n        {\n            verts.push(x, y, r, g, b, alpha);\n\n            verts.push(\n                x + (Math.sin(seg * i) * width),\n                y + (Math.cos(seg * i) * height),\n                r, g, b, alpha\n            );\n\n            indices.push(vecPos++, vecPos++);\n        }\n\n        indices.push(vecPos - 1);\n    }\n\n    if (graphicsData.lineWidth)\n    {\n        const tempPoints = graphicsData.points;\n\n        graphicsData.points = [];\n\n        for (let i = 0; i < totalSegs; i++)\n        {\n            graphicsData.points.push(\n                x + (Math.sin(seg * -i) * width),\n                y + (Math.cos(seg * -i) * height)\n            );\n        }\n\n        graphicsData.points.push(\n            graphicsData.points[0],\n            graphicsData.points[1]\n        );\n\n        buildLine(graphicsData, webGLData, webGLDataNativeLines);\n\n        graphicsData.points = tempPoints;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}