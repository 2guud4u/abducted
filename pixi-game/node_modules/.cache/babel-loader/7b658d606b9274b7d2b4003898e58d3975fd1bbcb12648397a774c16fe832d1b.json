{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _BaseRenderTexture = require('./BaseRenderTexture');\nvar _BaseRenderTexture2 = _interopRequireDefault(_BaseRenderTexture);\nvar _Texture2 = require('./Texture');\nvar _Texture3 = _interopRequireDefault(_Texture2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer(1024, 1024);\n * let renderTexture = PIXI.RenderTexture.create(800, 600);\n * let sprite = PIXI.Sprite.fromImage(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, renderTexture);\n * ```\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let renderTexture = new PIXI.RenderTexture.create(100, 100);\n *\n * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture\n * ```\n *\n * @class\n * @extends PIXI.Texture\n * @memberof PIXI\n */\nvar RenderTexture = function (_Texture) {\n  _inherits(RenderTexture, _Texture);\n\n  /**\n   * @param {PIXI.BaseRenderTexture} baseRenderTexture - The renderer used for this RenderTexture\n   * @param {PIXI.Rectangle} [frame] - The rectangle frame of the texture to show\n   */\n  function RenderTexture(baseRenderTexture, frame) {\n    _classCallCheck(this, RenderTexture);\n\n    // support for legacy..\n    var _legacyRenderer = null;\n    if (!(baseRenderTexture instanceof _BaseRenderTexture2.default)) {\n      /* eslint-disable prefer-rest-params, no-console */\n      var width = arguments[1];\n      var height = arguments[2];\n      var scaleMode = arguments[3];\n      var resolution = arguments[4];\n\n      // we have an old render texture..\n      console.warn('Please use RenderTexture.create(' + width + ', ' + height + ') instead of the ctor directly.');\n      _legacyRenderer = arguments[0];\n      /* eslint-enable prefer-rest-params, no-console */\n\n      frame = null;\n      baseRenderTexture = new _BaseRenderTexture2.default(width, height, scaleMode, resolution);\n    }\n\n    /**\n     * The base texture object that this texture uses\n     *\n     * @member {BaseTexture}\n     */\n\n    var _this = _possibleConstructorReturn(this, _Texture.call(this, baseRenderTexture, frame));\n    _this.legacyRenderer = _legacyRenderer;\n\n    /**\n     * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.\n     *\n     * @member {boolean}\n     */\n    _this.valid = true;\n    _this._updateUvs();\n    return _this;\n  }\n\n  /**\n   * Resizes the RenderTexture.\n   *\n   * @param {number} width - The width to resize to.\n   * @param {number} height - The height to resize to.\n   * @param {boolean} doNotResizeBaseTexture - Should the baseTexture.width and height values be resized as well?\n   */\n\n  RenderTexture.prototype.resize = function resize(width, height, doNotResizeBaseTexture) {\n    width = Math.ceil(width);\n    height = Math.ceil(height);\n\n    // TODO - could be not required..\n    this.valid = width > 0 && height > 0;\n    this._frame.width = this.orig.width = width;\n    this._frame.height = this.orig.height = height;\n    if (!doNotResizeBaseTexture) {\n      this.baseTexture.resize(width, height);\n    }\n    this._updateUvs();\n  };\n\n  /**\n   * A short hand way of creating a render texture.\n   *\n   * @param {number} [width=100] - The width of the render texture\n   * @param {number} [height=100] - The height of the render texture\n   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n   * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture being generated\n   * @return {PIXI.RenderTexture} The new render texture\n   */\n\n  RenderTexture.create = function create(width, height, scaleMode, resolution) {\n    return new RenderTexture(new _BaseRenderTexture2.default(width, height, scaleMode, resolution));\n  };\n  return RenderTexture;\n}(_Texture3.default);\nexports.default = RenderTexture;","map":{"version":3,"names":["_BaseRenderTexture","require","_Texture2","RenderTexture","baseRenderTexture","frame","_classCallCheck","_legacyRenderer","_BaseRenderTexture2","default","width","arguments","height","scaleMode","resolution","console","warn","_this","_possibleConstructorReturn","_Texture","call","legacyRenderer","valid","_updateUvs","resize","doNotResizeBaseTexture","Math","ceil","_frame","orig","baseTexture","create"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/textures/RenderTexture.js"],"sourcesContent":["import BaseRenderTexture from './BaseRenderTexture';\nimport Texture from './Texture';\n\n/**\n * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer(1024, 1024);\n * let renderTexture = PIXI.RenderTexture.create(800, 600);\n * let sprite = PIXI.Sprite.fromImage(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, renderTexture);\n * ```\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let renderTexture = new PIXI.RenderTexture.create(100, 100);\n *\n * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture\n * ```\n *\n * @class\n * @extends PIXI.Texture\n * @memberof PIXI\n */\nexport default class RenderTexture extends Texture\n{\n    /**\n     * @param {PIXI.BaseRenderTexture} baseRenderTexture - The renderer used for this RenderTexture\n     * @param {PIXI.Rectangle} [frame] - The rectangle frame of the texture to show\n     */\n    constructor(baseRenderTexture, frame)\n    {\n        // support for legacy..\n        let _legacyRenderer = null;\n\n        if (!(baseRenderTexture instanceof BaseRenderTexture))\n        {\n            /* eslint-disable prefer-rest-params, no-console */\n            const width = arguments[1];\n            const height = arguments[2];\n            const scaleMode = arguments[3];\n            const resolution = arguments[4];\n\n            // we have an old render texture..\n            console.warn(`Please use RenderTexture.create(${width}, ${height}) instead of the ctor directly.`);\n            _legacyRenderer = arguments[0];\n            /* eslint-enable prefer-rest-params, no-console */\n\n            frame = null;\n            baseRenderTexture = new BaseRenderTexture(width, height, scaleMode, resolution);\n        }\n\n        /**\n         * The base texture object that this texture uses\n         *\n         * @member {BaseTexture}\n         */\n        super(\n            baseRenderTexture,\n            frame\n        );\n\n        this.legacyRenderer = _legacyRenderer;\n\n        /**\n         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.\n         *\n         * @member {boolean}\n         */\n        this.valid = true;\n\n        this._updateUvs();\n    }\n\n    /**\n     * Resizes the RenderTexture.\n     *\n     * @param {number} width - The width to resize to.\n     * @param {number} height - The height to resize to.\n     * @param {boolean} doNotResizeBaseTexture - Should the baseTexture.width and height values be resized as well?\n     */\n    resize(width, height, doNotResizeBaseTexture)\n    {\n        width = Math.ceil(width);\n        height = Math.ceil(height);\n\n        // TODO - could be not required..\n        this.valid = (width > 0 && height > 0);\n\n        this._frame.width = this.orig.width = width;\n        this._frame.height = this.orig.height = height;\n\n        if (!doNotResizeBaseTexture)\n        {\n            this.baseTexture.resize(width, height);\n        }\n\n        this._updateUvs();\n    }\n\n    /**\n     * A short hand way of creating a render texture.\n     *\n     * @param {number} [width=100] - The width of the render texture\n     * @param {number} [height=100] - The height of the render texture\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture being generated\n     * @return {PIXI.RenderTexture} The new render texture\n     */\n    static create(width, height, scaleMode, resolution)\n    {\n        return new RenderTexture(new BaseRenderTexture(width, height, scaleMode, resolution));\n    }\n}\n"],"mappings":";;;AAAA,IAAAA,kBAAA,GAAAC,OAAA;;AACA,IAAAC,SAAA,GAAAD,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqCqBE,a;;;EAEjB;;;;EAIA,SAAAA,cAAYC,iBAAZ,EAA+BC,KAA/B,EACA;IAAAC,eAAA,OAAAH,aAAA;;IACI;IACA,IAAII,eAAA,GAAkB,IAAtB;IAEA,IAAI,EAAEH,iBAAA,YAAAI,mBAAA,CAAAC,OAAF,CAAJ,EACA;MACI;MACA,IAAMC,KAAA,GAAQC,SAAA,CAAU,CAAV,CAAd;MACA,IAAMC,MAAA,GAASD,SAAA,CAAU,CAAV,CAAf;MACA,IAAME,SAAA,GAAYF,SAAA,CAAU,CAAV,CAAlB;MACA,IAAMG,UAAA,GAAaH,SAAA,CAAU,CAAV,CAAnB;;MAEA;MACAI,OAAA,CAAQC,IAAR,sCAAgDN,KAAhD,UAA0DE,MAA1D;MACAL,eAAA,GAAkBI,SAAA,CAAU,CAAV,CAAlB;MACA;;MAEAN,KAAA,GAAQ,IAAR;MACAD,iBAAA,GAAoB,IAAAI,mBAAA,CAAAC,OAAA,CAAsBC,KAAtB,EAA6BE,MAA7B,EAAqCC,SAArC,EAAgDC,UAAhD,CAApB;IACH;;IAED;;;;;;IArBJ,IAAAG,KAAA,GAAAC,0BAAA,OA0BIC,QAAA,CAAAC,IAAA,OACIhB,iBADJ,EAEIC,KAFJ,CA1BJ;IA+BIY,KAAA,CAAKI,cAAL,GAAsBd,eAAtB;;IAEA;;;;;IAKAU,KAAA,CAAKK,KAAL,GAAa,IAAb;IAEAL,KAAA,CAAKM,UAAL;IAxCJ,OAAAN,KAAA;EAyCC;;EAED;;;;;;;;0BAOAO,M,mBAAOd,K,EAAOE,M,EAAQa,sB,EACtB;IACIf,KAAA,GAAQgB,IAAA,CAAKC,IAAL,CAAUjB,KAAV,CAAR;IACAE,MAAA,GAASc,IAAA,CAAKC,IAAL,CAAUf,MAAV,CAAT;;IAEA;IACA,KAAKU,KAAL,GAAcZ,KAAA,GAAQ,CAAR,IAAaE,MAAA,GAAS,CAApC;IAEA,KAAKgB,MAAL,CAAYlB,KAAZ,GAAoB,KAAKmB,IAAL,CAAUnB,KAAV,GAAkBA,KAAtC;IACA,KAAKkB,MAAL,CAAYhB,MAAZ,GAAqB,KAAKiB,IAAL,CAAUjB,MAAV,GAAmBA,MAAxC;IAEA,IAAI,CAACa,sBAAL,EACA;MACI,KAAKK,WAAL,CAAiBN,MAAjB,CAAwBd,KAAxB,EAA+BE,MAA/B;IACH;IAED,KAAKW,UAAL;EACH,C;;EAED;;;;;;;;;;gBASOQ,M,mBAAOrB,K,EAAOE,M,EAAQC,S,EAAWC,U,EACxC;IACI,OAAO,IAAIX,aAAJ,CAAkB,IAAAK,mBAAA,CAAAC,OAAA,CAAsBC,KAAtB,EAA6BE,MAA7B,EAAqCC,SAArC,EAAgDC,UAAhD,CAAlB,CAAP;EACH,C;;;kBAxFgBX,a"},"metadata":{},"sourceType":"script","externalDependencies":[]}