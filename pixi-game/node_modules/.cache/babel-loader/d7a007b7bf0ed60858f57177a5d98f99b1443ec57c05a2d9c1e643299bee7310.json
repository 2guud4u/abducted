{"ast":null,"code":"var EMPTY_ARRAY_BUFFER = new ArrayBuffer(0);\n\n/**\n * Helper class to create a webGL buffer\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param type {gl.ARRAY_BUFFER | gl.ELEMENT_ARRAY_BUFFER} @mat\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n * @param drawType {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}\n */\nvar Buffer = function (gl, type, data, drawType) {\n  /**\n      * The current WebGL rendering context\n      *\n      * @member {WebGLRenderingContext}\n      */\n  this.gl = gl;\n\n  /**\n      * The WebGL buffer, created upon instantiation\n      *\n      * @member {WebGLBuffer}\n      */\n  this.buffer = gl.createBuffer();\n\n  /**\n      * The type of the buffer\n      *\n      * @member {gl.ARRAY_BUFFER|gl.ELEMENT_ARRAY_BUFFER}\n      */\n  this.type = type || gl.ARRAY_BUFFER;\n\n  /**\n      * The draw type of the buffer\n      *\n      * @member {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}\n      */\n  this.drawType = drawType || gl.STATIC_DRAW;\n\n  /**\n      * The data in the buffer, as a typed array\n      *\n      * @member {ArrayBuffer| SharedArrayBuffer|ArrayBufferView}\n      */\n  this.data = EMPTY_ARRAY_BUFFER;\n  if (data) {\n    this.upload(data);\n  }\n  this._updateID = 0;\n};\n\n/**\n * Uploads the buffer to the GPU\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data to upload\n * @param offset {Number} if only a subset of the data should be uploaded, this is the amount of data to subtract\n * @param dontBind {Boolean} whether to bind the buffer before uploading it\n */\nBuffer.prototype.upload = function (data, offset, dontBind) {\n  // todo - needed?\n  if (!dontBind) this.bind();\n  var gl = this.gl;\n  data = data || this.data;\n  offset = offset || 0;\n  if (this.data.byteLength >= data.byteLength) {\n    gl.bufferSubData(this.type, offset, data);\n  } else {\n    gl.bufferData(this.type, data, this.drawType);\n  }\n  this.data = data;\n};\n/**\n * Binds the buffer\n *\n */\nBuffer.prototype.bind = function () {\n  var gl = this.gl;\n  gl.bindBuffer(this.type, this.buffer);\n};\nBuffer.createVertexBuffer = function (gl, data, drawType) {\n  return new Buffer(gl, gl.ARRAY_BUFFER, data, drawType);\n};\nBuffer.createIndexBuffer = function (gl, data, drawType) {\n  return new Buffer(gl, gl.ELEMENT_ARRAY_BUFFER, data, drawType);\n};\nBuffer.create = function (gl, type, data, drawType) {\n  return new Buffer(gl, type, data, drawType);\n};\n\n/**\n * Destroys the buffer\n *\n */\nBuffer.prototype.destroy = function () {\n  this.gl.deleteBuffer(this.buffer);\n};\nmodule.exports = Buffer;","map":{"version":3,"names":["EMPTY_ARRAY_BUFFER","ArrayBuffer","Buffer","gl","type","data","drawType","buffer","createBuffer","ARRAY_BUFFER","STATIC_DRAW","upload","_updateID","prototype","offset","dontBind","bind","byteLength","bufferSubData","bufferData","bindBuffer","createVertexBuffer","createIndexBuffer","ELEMENT_ARRAY_BUFFER","create","destroy","deleteBuffer","module","exports"],"sources":["/Users/jiahuajiang/node_modules/pixi-gl-core/src/GLBuffer.js"],"sourcesContent":["var EMPTY_ARRAY_BUFFER = new ArrayBuffer(0);\n\n/**\n * Helper class to create a webGL buffer\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param type {gl.ARRAY_BUFFER | gl.ELEMENT_ARRAY_BUFFER} @mat\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n * @param drawType {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}\n */\nvar Buffer = function(gl, type, data, drawType)\n{\n\n\t/**\n     * The current WebGL rendering context\n     *\n     * @member {WebGLRenderingContext}\n     */\n\tthis.gl = gl;\n\n\t/**\n     * The WebGL buffer, created upon instantiation\n     *\n     * @member {WebGLBuffer}\n     */\n\tthis.buffer = gl.createBuffer();\n\n\t/**\n     * The type of the buffer\n     *\n     * @member {gl.ARRAY_BUFFER|gl.ELEMENT_ARRAY_BUFFER}\n     */\n\tthis.type = type || gl.ARRAY_BUFFER;\n\n\t/**\n     * The draw type of the buffer\n     *\n     * @member {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}\n     */\n\tthis.drawType = drawType || gl.STATIC_DRAW;\n\n\t/**\n     * The data in the buffer, as a typed array\n     *\n     * @member {ArrayBuffer| SharedArrayBuffer|ArrayBufferView}\n     */\n\tthis.data = EMPTY_ARRAY_BUFFER;\n\n\tif(data)\n\t{\n\t\tthis.upload(data);\n\t}\n\n\tthis._updateID = 0;\n};\n\n/**\n * Uploads the buffer to the GPU\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data to upload\n * @param offset {Number} if only a subset of the data should be uploaded, this is the amount of data to subtract\n * @param dontBind {Boolean} whether to bind the buffer before uploading it\n */\nBuffer.prototype.upload = function(data, offset, dontBind)\n{\n\t// todo - needed?\n\tif(!dontBind) this.bind();\n\n\tvar gl = this.gl;\n\n\tdata = data || this.data;\n\toffset = offset || 0;\n\n\tif(this.data.byteLength >= data.byteLength)\n\t{\n\t\tgl.bufferSubData(this.type, offset, data);\n\t}\n\telse\n\t{\n\t\tgl.bufferData(this.type, data, this.drawType);\n\t}\n\n\tthis.data = data;\n};\n/**\n * Binds the buffer\n *\n */\nBuffer.prototype.bind = function()\n{\n\tvar gl = this.gl;\n\tgl.bindBuffer(this.type, this.buffer);\n};\n\nBuffer.createVertexBuffer = function(gl, data, drawType)\n{\n\treturn new Buffer(gl, gl.ARRAY_BUFFER, data, drawType);\n};\n\nBuffer.createIndexBuffer = function(gl, data, drawType)\n{\n\treturn new Buffer(gl, gl.ELEMENT_ARRAY_BUFFER, data, drawType);\n};\n\nBuffer.create = function(gl, type, data, drawType)\n{\n\treturn new Buffer(gl, type, data, drawType);\n};\n\n/**\n * Destroys the buffer\n *\n */\nBuffer.prototype.destroy = function(){\n\tthis.gl.deleteBuffer(this.buffer);\n};\n\nmodule.exports = Buffer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}