{"ast":null,"code":"/**\n * Helper class to create a WebGL Texture\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param width {number} the width of the texture\n * @param height {number} the height of the texture\n * @param format {number} the pixel format of the texture. defaults to gl.RGBA\n * @param type {number} the gl type of the texture. defaults to gl.UNSIGNED_BYTE\n */\nvar Texture = function (gl, width, height, format, type) {\n  /**\n   * The current WebGL rendering context\n   *\n   * @member {WebGLRenderingContext}\n   */\n  this.gl = gl;\n\n  /**\n   * The WebGL texture\n   *\n   * @member {WebGLTexture}\n   */\n  this.texture = gl.createTexture();\n\n  /**\n   * If mipmapping was used for this texture, enable and disable with enableMipmap()\n   *\n   * @member {Boolean}\n   */\n  // some settings..\n  this.mipmap = false;\n\n  /**\n   * Set to true to enable pre-multiplied alpha\n   *\n   * @member {Boolean}\n   */\n  this.premultiplyAlpha = false;\n\n  /**\n   * The width of texture\n   *\n   * @member {Number}\n   */\n  this.width = width || -1;\n  /**\n   * The height of texture\n   *\n   * @member {Number}\n   */\n  this.height = height || -1;\n\n  /**\n   * The pixel format of the texture. defaults to gl.RGBA\n   *\n   * @member {Number}\n   */\n  this.format = format || gl.RGBA;\n\n  /**\n   * The gl type of the texture. defaults to gl.UNSIGNED_BYTE\n   *\n   * @member {Number}\n   */\n  this.type = type || gl.UNSIGNED_BYTE;\n};\n\n/**\n * Uploads this texture to the GPU\n * @param source {HTMLImageElement|ImageData|HTMLVideoElement} the source image of the texture\n */\nTexture.prototype.upload = function (source) {\n  this.bind();\n  var gl = this.gl;\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n  var newWidth = source.videoWidth || source.width;\n  var newHeight = source.videoHeight || source.height;\n  if (newHeight !== this.height || newWidth !== this.width) {\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, source);\n  } else {\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.format, this.type, source);\n  }\n\n  // if the source is a video, we need to use the videoWidth / videoHeight properties as width / height will be incorrect.\n  this.width = newWidth;\n  this.height = newHeight;\n};\nvar FLOATING_POINT_AVAILABLE = false;\n\n/**\n * Use a data source and uploads this texture to the GPU\n * @param data {TypedArray} the data to upload to the texture\n * @param width {number} the new width of the texture\n * @param height {number} the new height of the texture\n */\nTexture.prototype.uploadData = function (data, width, height) {\n  this.bind();\n  var gl = this.gl;\n  if (data instanceof Float32Array) {\n    if (!FLOATING_POINT_AVAILABLE) {\n      var ext = gl.getExtension(\"OES_texture_float\");\n      if (ext) {\n        FLOATING_POINT_AVAILABLE = true;\n      } else {\n        throw new Error('floating point textures not available');\n      }\n    }\n    this.type = gl.FLOAT;\n  } else {\n    // TODO support for other types\n    this.type = this.type || gl.UNSIGNED_BYTE;\n  }\n\n  // what type of data?\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n  if (width !== this.width || height !== this.height) {\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.format, width, height, 0, this.format, this.type, data || null);\n  } else {\n    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, this.format, this.type, data || null);\n  }\n  this.width = width;\n  this.height = height;\n\n  //\ttexSubImage2D\n};\n\n/**\n * Binds the texture\n * @param  location\n */\nTexture.prototype.bind = function (location) {\n  var gl = this.gl;\n  if (location !== undefined) {\n    gl.activeTexture(gl.TEXTURE0 + location);\n  }\n  gl.bindTexture(gl.TEXTURE_2D, this.texture);\n};\n\n/**\n * Unbinds the texture\n */\nTexture.prototype.unbind = function () {\n  var gl = this.gl;\n  gl.bindTexture(gl.TEXTURE_2D, null);\n};\n\n/**\n * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation\n */\nTexture.prototype.minFilter = function (linear) {\n  var gl = this.gl;\n  this.bind();\n  if (this.mipmap) {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n  } else {\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR : gl.NEAREST);\n  }\n};\n\n/**\n * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation\n */\nTexture.prototype.magFilter = function (linear) {\n  var gl = this.gl;\n  this.bind();\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linear ? gl.LINEAR : gl.NEAREST);\n};\n\n/**\n * Enables mipmapping\n */\nTexture.prototype.enableMipmap = function () {\n  var gl = this.gl;\n  this.bind();\n  this.mipmap = true;\n  gl.generateMipmap(gl.TEXTURE_2D);\n};\n\n/**\n * Enables linear filtering\n */\nTexture.prototype.enableLinearScaling = function () {\n  this.minFilter(true);\n  this.magFilter(true);\n};\n\n/**\n * Enables nearest neighbour interpolation\n */\nTexture.prototype.enableNearestScaling = function () {\n  this.minFilter(false);\n  this.magFilter(false);\n};\n\n/**\n * Enables clamping on the texture so WebGL will not repeat it\n */\nTexture.prototype.enableWrapClamp = function () {\n  var gl = this.gl;\n  this.bind();\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n};\n\n/**\n * Enable tiling on the texture\n */\nTexture.prototype.enableWrapRepeat = function () {\n  var gl = this.gl;\n  this.bind();\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n};\nTexture.prototype.enableWrapMirrorRepeat = function () {\n  var gl = this.gl;\n  this.bind();\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);\n};\n\n/**\n * Destroys this texture\n */\nTexture.prototype.destroy = function () {\n  var gl = this.gl;\n  //TODO\n  gl.deleteTexture(this.texture);\n};\n\n/**\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param source {HTMLImageElement|ImageData} the source image of the texture\n * @param premultiplyAlpha {Boolean} If we want to use pre-multiplied alpha\n */\nTexture.fromSource = function (gl, source, premultiplyAlpha) {\n  var texture = new Texture(gl);\n  texture.premultiplyAlpha = premultiplyAlpha || false;\n  texture.upload(source);\n  return texture;\n};\n\n/**\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param data {TypedArray} the data to upload to the texture\n * @param width {number} the new width of the texture\n * @param height {number} the new height of the texture\n */\nTexture.fromData = function (gl, data, width, height) {\n  //console.log(data, width, height);\n  var texture = new Texture(gl);\n  texture.uploadData(data, width, height);\n  return texture;\n};\nmodule.exports = Texture;","map":{"version":3,"names":["Texture","gl","width","height","format","type","texture","createTexture","mipmap","premultiplyAlpha","RGBA","UNSIGNED_BYTE","prototype","upload","source","bind","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","newWidth","videoWidth","newHeight","videoHeight","texImage2D","TEXTURE_2D","texSubImage2D","FLOATING_POINT_AVAILABLE","uploadData","data","Float32Array","ext","getExtension","Error","FLOAT","location","undefined","activeTexture","TEXTURE0","bindTexture","unbind","minFilter","linear","texParameteri","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR","NEAREST","magFilter","TEXTURE_MAG_FILTER","enableMipmap","generateMipmap","enableLinearScaling","enableNearestScaling","enableWrapClamp","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","enableWrapRepeat","REPEAT","enableWrapMirrorRepeat","MIRRORED_REPEAT","destroy","deleteTexture","fromSource","fromData","module","exports"],"sources":["/Users/jiahuajiang/node_modules/pixi-gl-core/src/GLTexture.js"],"sourcesContent":["\n/**\n * Helper class to create a WebGL Texture\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param width {number} the width of the texture\n * @param height {number} the height of the texture\n * @param format {number} the pixel format of the texture. defaults to gl.RGBA\n * @param type {number} the gl type of the texture. defaults to gl.UNSIGNED_BYTE\n */\nvar Texture = function(gl, width, height, format, type)\n{\n\t/**\n\t * The current WebGL rendering context\n\t *\n\t * @member {WebGLRenderingContext}\n\t */\n\tthis.gl = gl;\n\n\n\t/**\n\t * The WebGL texture\n\t *\n\t * @member {WebGLTexture}\n\t */\n\tthis.texture = gl.createTexture();\n\n\t/**\n\t * If mipmapping was used for this texture, enable and disable with enableMipmap()\n\t *\n\t * @member {Boolean}\n\t */\n\t// some settings..\n\tthis.mipmap = false;\n\n\n\t/**\n\t * Set to true to enable pre-multiplied alpha\n\t *\n\t * @member {Boolean}\n\t */\n\tthis.premultiplyAlpha = false;\n\n\t/**\n\t * The width of texture\n\t *\n\t * @member {Number}\n\t */\n\tthis.width = width || -1;\n\t/**\n\t * The height of texture\n\t *\n\t * @member {Number}\n\t */\n\tthis.height = height || -1;\n\n\t/**\n\t * The pixel format of the texture. defaults to gl.RGBA\n\t *\n\t * @member {Number}\n\t */\n\tthis.format = format || gl.RGBA;\n\n\t/**\n\t * The gl type of the texture. defaults to gl.UNSIGNED_BYTE\n\t *\n\t * @member {Number}\n\t */\n\tthis.type = type || gl.UNSIGNED_BYTE;\n\n\n};\n\n/**\n * Uploads this texture to the GPU\n * @param source {HTMLImageElement|ImageData|HTMLVideoElement} the source image of the texture\n */\nTexture.prototype.upload = function(source)\n{\n\tthis.bind();\n\n\tvar gl = this.gl;\n\n\n\tgl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n\n\tvar newWidth = source.videoWidth || source.width;\n\tvar newHeight = source.videoHeight || source.height;\n\n\tif(newHeight !== this.height || newWidth !== this.width)\n\t{\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, source);\n\t}\n\telse\n\t{\n    \tgl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.format, this.type, source);\n\t}\n\n\t// if the source is a video, we need to use the videoWidth / videoHeight properties as width / height will be incorrect.\n\tthis.width = newWidth;\n\tthis.height = newHeight;\n\n};\n\nvar FLOATING_POINT_AVAILABLE = false;\n\n/**\n * Use a data source and uploads this texture to the GPU\n * @param data {TypedArray} the data to upload to the texture\n * @param width {number} the new width of the texture\n * @param height {number} the new height of the texture\n */\nTexture.prototype.uploadData = function(data, width, height)\n{\n\tthis.bind();\n\n\tvar gl = this.gl;\n\n\n\tif(data instanceof Float32Array)\n\t{\n\t\tif(!FLOATING_POINT_AVAILABLE)\n\t\t{\n\t\t\tvar ext = gl.getExtension(\"OES_texture_float\");\n\n\t\t\tif(ext)\n\t\t\t{\n\t\t\t\tFLOATING_POINT_AVAILABLE = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new Error('floating point textures not available');\n\t\t\t}\n\t\t}\n\n\t\tthis.type = gl.FLOAT;\n\t}\n\telse\n\t{\n\t\t// TODO support for other types\n\t\tthis.type = this.type || gl.UNSIGNED_BYTE;\n\t}\n\n\t// what type of data?\n\tgl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n\n\n\tif(width !== this.width || height !== this.height)\n\t{\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, this.format,  width, height, 0, this.format, this.type, data || null);\n\t}\n\telse\n\t{\n\t\tgl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, this.format, this.type, data || null);\n\t}\n\n\tthis.width = width;\n\tthis.height = height;\n\n\n//\ttexSubImage2D\n};\n\n/**\n * Binds the texture\n * @param  location\n */\nTexture.prototype.bind = function(location)\n{\n\tvar gl = this.gl;\n\n\tif(location !== undefined)\n\t{\n\t\tgl.activeTexture(gl.TEXTURE0 + location);\n\t}\n\n\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n};\n\n/**\n * Unbinds the texture\n */\nTexture.prototype.unbind = function()\n{\n\tvar gl = this.gl;\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n};\n\n/**\n * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation\n */\nTexture.prototype.minFilter = function( linear )\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tif(this.mipmap)\n\t{\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n\t}\n\telse\n\t{\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR : gl.NEAREST);\n\t}\n};\n\n/**\n * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation\n */\nTexture.prototype.magFilter = function( linear )\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linear ? gl.LINEAR : gl.NEAREST);\n};\n\n/**\n * Enables mipmapping\n */\nTexture.prototype.enableMipmap = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tthis.mipmap = true;\n\n\tgl.generateMipmap(gl.TEXTURE_2D);\n};\n\n/**\n * Enables linear filtering\n */\nTexture.prototype.enableLinearScaling = function()\n{\n\tthis.minFilter(true);\n\tthis.magFilter(true);\n};\n\n/**\n * Enables nearest neighbour interpolation\n */\nTexture.prototype.enableNearestScaling = function()\n{\n\tthis.minFilter(false);\n\tthis.magFilter(false);\n};\n\n/**\n * Enables clamping on the texture so WebGL will not repeat it\n */\nTexture.prototype.enableWrapClamp = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n};\n\n/**\n * Enable tiling on the texture\n */\nTexture.prototype.enableWrapRepeat = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n};\n\nTexture.prototype.enableWrapMirrorRepeat = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);\n};\n\n\n/**\n * Destroys this texture\n */\nTexture.prototype.destroy = function()\n{\n\tvar gl = this.gl;\n\t//TODO\n\tgl.deleteTexture(this.texture);\n};\n\n/**\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param source {HTMLImageElement|ImageData} the source image of the texture\n * @param premultiplyAlpha {Boolean} If we want to use pre-multiplied alpha\n */\nTexture.fromSource = function(gl, source, premultiplyAlpha)\n{\n\tvar texture = new Texture(gl);\n\ttexture.premultiplyAlpha = premultiplyAlpha || false;\n\ttexture.upload(source);\n\n\treturn texture;\n};\n\n/**\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param data {TypedArray} the data to upload to the texture\n * @param width {number} the new width of the texture\n * @param height {number} the new height of the texture\n */\nTexture.fromData = function(gl, data, width, height)\n{\n\t//console.log(data, width, height);\n\tvar texture = new Texture(gl);\n\ttexture.uploadData(data, width, height);\n\n\treturn texture;\n};\n\n\nmodule.exports = Texture;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}