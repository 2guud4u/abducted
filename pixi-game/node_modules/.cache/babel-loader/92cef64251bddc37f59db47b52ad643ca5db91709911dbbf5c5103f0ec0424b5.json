{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _core = require('../../core');\nvar core = _interopRequireWildcard(_core);\nvar _BasePrepare2 = require('../BasePrepare');\nvar _BasePrepare3 = _interopRequireDefault(_BasePrepare2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.prepare\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\nvar WebGLPrepare = function (_BasePrepare) {\n  _inherits(WebGLPrepare, _BasePrepare);\n\n  /**\n   * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer\n   */\n  function WebGLPrepare(renderer) {\n    _classCallCheck(this, WebGLPrepare);\n    var _this = _possibleConstructorReturn(this, _BasePrepare.call(this, renderer));\n    _this.uploadHookHelper = _this.renderer;\n\n    // Add textures and graphics to upload\n    _this.registerFindHook(findGraphics);\n    _this.registerUploadHook(uploadBaseTextures);\n    _this.registerUploadHook(uploadGraphics);\n    return _this;\n  }\n  return WebGLPrepare;\n}(_BasePrepare3.default);\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\n\nexports.default = WebGLPrepare;\nfunction uploadBaseTextures(renderer, item) {\n  if (item instanceof core.BaseTexture) {\n    // if the texture already has a GL texture, then the texture has been prepared or rendered\n    // before now. If the texture changed, then the changer should be calling texture.update() which\n    // reuploads the texture without need for preparing it again\n    if (!item._glTextures[renderer.CONTEXT_UID]) {\n      renderer.textureManager.updateTexture(item);\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n *\n * @private\n * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadGraphics(renderer, item) {\n  if (item instanceof core.Graphics) {\n    // if the item is not dirty and already has webgl data, then it got prepared or rendered\n    // before now and we shouldn't waste time updating it again\n    if (item.dirty || item.clearDirty || !item._webGL[renderer.plugins.graphics.CONTEXT_UID]) {\n      renderer.plugins.graphics.updateGraphics(item);\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\n * Built-in hook to find graphics.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item, queue) {\n  if (item instanceof core.Graphics) {\n    queue.push(item);\n    return true;\n  }\n  return false;\n}\ncore.WebGLRenderer.registerPlugin('prepare', WebGLPrepare);","map":{"version":3,"names":["_core","require","core","_BasePrepare2","WebGLPrepare","renderer","_classCallCheck","_this","_possibleConstructorReturn","_BasePrepare","call","uploadHookHelper","registerFindHook","findGraphics","registerUploadHook","uploadBaseTextures","uploadGraphics","item","BaseTexture","_glTextures","CONTEXT_UID","textureManager","updateTexture","Graphics","dirty","clearDirty","_webGL","plugins","graphics","updateGraphics","queue","push","WebGLRenderer","registerPlugin"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/prepare/webgl/WebGLPrepare.js"],"sourcesContent":["import * as core from '../../core';\nimport BasePrepare from '../BasePrepare';\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.prepare\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\nexport default class WebGLPrepare extends BasePrepare\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this.renderer;\n\n        // Add textures and graphics to upload\n        this.registerFindHook(findGraphics);\n        this.registerUploadHook(uploadBaseTextures);\n        this.registerUploadHook(uploadGraphics);\n    }\n}\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadBaseTextures(renderer, item)\n{\n    if (item instanceof core.BaseTexture)\n    {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[renderer.CONTEXT_UID])\n        {\n            renderer.textureManager.updateTexture(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n *\n * @private\n * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadGraphics(renderer, item)\n{\n    if (item instanceof core.Graphics)\n    {\n        // if the item is not dirty and already has webgl data, then it got prepared or rendered\n        // before now and we shouldn't waste time updating it again\n        if (item.dirty || item.clearDirty || !item._webGL[renderer.plugins.graphics.CONTEXT_UID])\n        {\n            renderer.plugins.graphics.updateGraphics(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find graphics.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item, queue)\n{\n    if (item instanceof core.Graphics)\n    {\n        queue.push(item);\n\n        return true;\n    }\n\n    return false;\n}\n\ncore.WebGLRenderer.registerPlugin('prepare', WebGLPrepare);\n"],"mappings":";;;AAAA,IAAAA,KAAA,GAAAC,OAAA;IAAYC,I;AACZ,IAAAC,aAAA,GAAAF,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;IASqBG,Y;;;EAEjB;;;EAGA,SAAAA,aAAYC,QAAZ,EACA;IAAAC,eAAA,OAAAF,YAAA;IAAA,IAAAG,KAAA,GAAAC,0BAAA,OACIC,YAAA,CAAAC,IAAA,OAAML,QAAN,CADJ;IAGIE,KAAA,CAAKI,gBAAL,GAAwBJ,KAAA,CAAKF,QAA7B;;IAEA;IACAE,KAAA,CAAKK,gBAAL,CAAsBC,YAAtB;IACAN,KAAA,CAAKO,kBAAL,CAAwBC,kBAAxB;IACAR,KAAA,CAAKO,kBAAL,CAAwBE,cAAxB;IARJ,OAAAT,KAAA;EASC;;;AAEL;;;;;;;;;kBAjBqBH,Y;AAyBrB,SAASW,kBAATA,CAA4BV,QAA5B,EAAsCY,IAAtC,EACA;EACI,IAAIA,IAAA,YAAgBf,IAAA,CAAKgB,WAAzB,EACA;IACI;IACA;IACA;IACA,IAAI,CAACD,IAAA,CAAKE,WAAL,CAAiBd,QAAA,CAASe,WAA1B,CAAL,EACA;MACIf,QAAA,CAASgB,cAAT,CAAwBC,aAAxB,CAAsCL,IAAtC;IACH;IAED,OAAO,IAAP;EACH;EAED,OAAO,KAAP;AACH;;AAED;;;;;;;;AAQA,SAASD,cAATA,CAAwBX,QAAxB,EAAkCY,IAAlC,EACA;EACI,IAAIA,IAAA,YAAgBf,IAAA,CAAKqB,QAAzB,EACA;IACI;IACA;IACA,IAAIN,IAAA,CAAKO,KAAL,IAAcP,IAAA,CAAKQ,UAAnB,IAAiC,CAACR,IAAA,CAAKS,MAAL,CAAYrB,QAAA,CAASsB,OAAT,CAAiBC,QAAjB,CAA0BR,WAAtC,CAAtC,EACA;MACIf,QAAA,CAASsB,OAAT,CAAiBC,QAAjB,CAA0BC,cAA1B,CAAyCZ,IAAzC;IACH;IAED,OAAO,IAAP;EACH;EAED,OAAO,KAAP;AACH;;AAED;;;;;;;;AAQA,SAASJ,YAATA,CAAsBI,IAAtB,EAA4Ba,KAA5B,EACA;EACI,IAAIb,IAAA,YAAgBf,IAAA,CAAKqB,QAAzB,EACA;IACIO,KAAA,CAAMC,IAAN,CAAWd,IAAX;IAEA,OAAO,IAAP;EACH;EAED,OAAO,KAAP;AACH;AAEDf,IAAA,CAAK8B,aAAL,CAAmBC,cAAnB,CAAkC,SAAlC,EAA6C7B,YAA7C"},"metadata":{},"sourceType":"script","externalDependencies":[]}