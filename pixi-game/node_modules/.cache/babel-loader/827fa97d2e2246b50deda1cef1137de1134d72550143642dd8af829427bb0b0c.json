{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _core = require('../../core');\nvar core = _interopRequireWildcard(_core);\nvar _path = require('path');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @author Vico @vicocotea\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n */\n\n/**\n * A Noise effect filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nvar NoiseFilter = function (_core$Filter) {\n  _inherits(NoiseFilter, _core$Filter);\n\n  /**\n   * @param {number} noise - The noise intensity, should be a normalized value in the range [0, 1].\n   * @param {number} seed - A random seed for the noise generation. Default is `Math.random()`.\n   */\n  function NoiseFilter() {\n    var noise = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n    var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.random();\n    _classCallCheck(this, NoiseFilter);\n    var _this = _possibleConstructorReturn(this, _core$Filter.call(this,\n    // vertex shader\n    'attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}',\n    // fragment shader\n    'precision highp float;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform float uNoise;\\nuniform float uSeed;\\nuniform sampler2D uSampler;\\n\\nfloat rand(vec2 co)\\n{\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main()\\n{\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n    float randomValue = rand(gl_FragCoord.xy * uSeed);\\n    float diff = (randomValue - 0.5) * uNoise;\\n\\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\\n    if (color.a > 0.0) {\\n        color.rgb /= color.a;\\n    }\\n\\n    color.r += diff;\\n    color.g += diff;\\n    color.b += diff;\\n\\n    // Premultiply alpha again.\\n    color.rgb *= color.a;\\n\\n    gl_FragColor = color;\\n}\\n'));\n    _this.noise = noise;\n    _this.seed = seed;\n    return _this;\n  }\n\n  /**\n   * The amount of noise to apply, this value should be in the range (0, 1].\n   *\n   * @member {number}\n   * @default 0.5\n   */\n\n  _createClass(NoiseFilter, [{\n    key: 'noise',\n    get: function get() {\n      return this.uniforms.uNoise;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      this.uniforms.uNoise = value;\n    }\n\n    /**\n     * A seed value to apply to the random noise generation. `Math.random()` is a good value to use.\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'seed',\n    get: function get() {\n      return this.uniforms.uSeed;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      this.uniforms.uSeed = value;\n    }\n  }]);\n  return NoiseFilter;\n}(core.Filter);\nexports.default = NoiseFilter;","map":{"version":3,"names":["_core","require","core","_path","NoiseFilter","noise","arguments","length","undefined","seed","Math","random","_classCallCheck","_this","_possibleConstructorReturn","_core$Filter","call","uniforms","uNoise","value","uSeed","Filter"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/filters/noise/NoiseFilter.js"],"sourcesContent":["import * as core from '../../core';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\n/**\n * @author Vico @vicocotea\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n */\n\n/**\n * A Noise effect filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class NoiseFilter extends core.Filter\n{\n    /**\n     * @param {number} noise - The noise intensity, should be a normalized value in the range [0, 1].\n     * @param {number} seed - A random seed for the noise generation. Default is `Math.random()`.\n     */\n    constructor(noise = 0.5, seed = Math.random())\n    {\n        super(\n            // vertex shader\n            readFileSync(join(__dirname, '../fragments/default.vert'), 'utf8'),\n            // fragment shader\n            readFileSync(join(__dirname, './noise.frag'), 'utf8')\n        );\n\n        this.noise = noise;\n        this.seed = seed;\n    }\n\n    /**\n     * The amount of noise to apply, this value should be in the range (0, 1].\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    get noise()\n    {\n        return this.uniforms.uNoise;\n    }\n\n    set noise(value) // eslint-disable-line require-jsdoc\n    {\n        this.uniforms.uNoise = value;\n    }\n\n    /**\n     * A seed value to apply to the random noise generation. `Math.random()` is a good value to use.\n     *\n     * @member {number}\n     */\n    get seed()\n    {\n        return this.uniforms.uSeed;\n    }\n\n    set seed(value) // eslint-disable-line require-jsdoc\n    {\n        this.uniforms.uSeed = value;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;IAAYC,I;AAEZ,IAAAC,KAAA,GAAAF,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;AAKA;;;;;;;IAOqBG,W;;;EAEjB;;;;EAIA,SAAAA,YAAA,EACA;IAAA,IADYC,KACZ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADoB,GACpB;IAAA,IADyBG,IACzB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADgCI,IAAA,CAAKC,MAAL,EAChC;IAAAC,eAAA,OAAAR,WAAA;IAAA,IAAAS,KAAA,GAAAC,0BAAA,OACIC,YAAA,CAAAC,IAAA;IACI;IADJ;IAGI;IAHJ,quBADJ;IAQIH,KAAA,CAAKR,KAAL,GAAaA,KAAb;IACAQ,KAAA,CAAKJ,IAAL,GAAYA,IAAZ;IATJ,OAAAI,KAAA;EAUC;;EAED;;;;;;;;;wBAOA;MACI,OAAO,KAAKI,QAAL,CAAcC,MAArB;IACH,C;sBAESC,K;IAAO;IACjB;MACI,KAAKF,QAAL,CAAcC,MAAd,GAAuBC,KAAvB;IACH;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKF,QAAL,CAAcG,KAArB;IACH,C;sBAEQD,K;IAAO;IAChB;MACI,KAAKF,QAAL,CAAcG,KAAd,GAAsBD,KAAtB;IACH;;;EAhDoCjB,IAAA,CAAKmB,M;kBAAzBjB,W"},"metadata":{},"sourceType":"script","externalDependencies":[]}