{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.blobMiddlewareFactory = blobMiddlewareFactory;\nvar _Resource = require('../../Resource');\nvar _b = require('../../b64');\nvar Url = window.URL || window.webkitURL;\n\n// a middleware for transforming XHR loaded Blobs into more useful objects\nfunction blobMiddlewareFactory() {\n  return function blobMiddleware(resource, next) {\n    if (!resource.data) {\n      next();\n      return;\n    }\n\n    // if this was an XHR load of a blob\n    if (resource.xhr && resource.xhrType === _Resource.Resource.XHR_RESPONSE_TYPE.BLOB) {\n      // if there is no blob support we probably got a binary string back\n      if (!window.Blob || typeof resource.data === 'string') {\n        var type = resource.xhr.getResponseHeader('content-type');\n\n        // this is an image, convert the binary string into a data url\n        if (type && type.indexOf('image') === 0) {\n          resource.data = new Image();\n          resource.data.src = 'data:' + type + ';base64,' + (0, _b.encodeBinary)(resource.xhr.responseText);\n          resource.type = _Resource.Resource.TYPE.IMAGE;\n\n          // wait until the image loads and then callback\n          resource.data.onload = function () {\n            resource.data.onload = null;\n            next();\n          };\n\n          // next will be called on load\n          return;\n        }\n      }\n      // if content type says this is an image, then we should transform the blob into an Image object\n      else if (resource.data.type.indexOf('image') === 0) {\n        var src = Url.createObjectURL(resource.data);\n        resource.blob = resource.data;\n        resource.data = new Image();\n        resource.data.src = src;\n        resource.type = _Resource.Resource.TYPE.IMAGE;\n\n        // cleanup the no longer used blob after the image loads\n        // TODO: Is this correct? Will the image be invalid after revoking?\n        resource.data.onload = function () {\n          Url.revokeObjectURL(src);\n          resource.data.onload = null;\n          next();\n        };\n\n        // next will be called on load.\n        return;\n      }\n    }\n    next();\n  };\n}","map":{"version":3,"names":["blobMiddlewareFactory","_Resource","require","_b","Url","window","URL","webkitURL","blobMiddleware","resource","next","data","xhr","xhrType","Resource","XHR_RESPONSE_TYPE","BLOB","Blob","type","getResponseHeader","indexOf","Image","src","encodeBinary","responseText","TYPE","IMAGE","onload","createObjectURL","blob","revokeObjectURL"],"sources":["/Users/jiahuajiang/node_modules/resource-loader/src/middlewares/parsing/blob.js"],"sourcesContent":["import { Resource } from '../../Resource';\nimport { encodeBinary } from '../../b64';\n\nconst Url = window.URL || window.webkitURL;\n\n// a middleware for transforming XHR loaded Blobs into more useful objects\nexport function blobMiddlewareFactory() {\n    return function blobMiddleware(resource, next) {\n        if (!resource.data) {\n            next();\n\n            return;\n        }\n\n        // if this was an XHR load of a blob\n        if (resource.xhr && resource.xhrType === Resource.XHR_RESPONSE_TYPE.BLOB) {\n            // if there is no blob support we probably got a binary string back\n            if (!window.Blob || typeof resource.data === 'string') {\n                const type = resource.xhr.getResponseHeader('content-type');\n\n                // this is an image, convert the binary string into a data url\n                if (type && type.indexOf('image') === 0) {\n                    resource.data = new Image();\n                    resource.data.src = `data:${type};base64,${encodeBinary(resource.xhr.responseText)}`;\n\n                    resource.type = Resource.TYPE.IMAGE;\n\n                    // wait until the image loads and then callback\n                    resource.data.onload = () => {\n                        resource.data.onload = null;\n\n                        next();\n                    };\n\n                    // next will be called on load\n                    return;\n                }\n            }\n            // if content type says this is an image, then we should transform the blob into an Image object\n            else if (resource.data.type.indexOf('image') === 0) {\n                const src = Url.createObjectURL(resource.data);\n\n                resource.blob = resource.data;\n                resource.data = new Image();\n                resource.data.src = src;\n\n                resource.type = Resource.TYPE.IMAGE;\n\n                // cleanup the no longer used blob after the image loads\n                // TODO: Is this correct? Will the image be invalid after revoking?\n                resource.data.onload = () => {\n                    Url.revokeObjectURL(src);\n                    resource.data.onload = null;\n\n                    next();\n                };\n\n                // next will be called on load.\n                return;\n            }\n        }\n\n        next();\n    };\n}\n"],"mappings":";;;QAMgBA,qB,GAAAA,qB;AANhB,IAAAC,SAAA,GAAAC,OAAA;AACA,IAAAC,EAAA,GAAAD,OAAA;AAEA,IAAME,GAAA,GAAMC,MAAA,CAAOC,GAAP,IAAcD,MAAA,CAAOE,SAAjC;;AAEA;AACO,SAASP,qBAATA,CAAA,EAAiC;EACpC,OAAO,SAASQ,cAATA,CAAwBC,QAAxB,EAAkCC,IAAlC,EAAwC;IAC3C,IAAI,CAACD,QAAA,CAASE,IAAd,EAAoB;MAChBD,IAAA;MAEA;IACH;;IAED;IACA,IAAID,QAAA,CAASG,GAAT,IAAgBH,QAAA,CAASI,OAAT,KAAqBZ,SAAA,CAAAa,QAAA,CAASC,iBAAT,CAA2BC,IAApE,EAA0E;MACtE;MACA,IAAI,CAACX,MAAA,CAAOY,IAAR,IAAgB,OAAOR,QAAA,CAASE,IAAhB,KAAyB,QAA7C,EAAuD;QACnD,IAAMO,IAAA,GAAOT,QAAA,CAASG,GAAT,CAAaO,iBAAb,CAA+B,cAA/B,CAAb;;QAEA;QACA,IAAID,IAAA,IAAQA,IAAA,CAAKE,OAAL,CAAa,OAAb,MAA0B,CAAtC,EAAyC;UACrCX,QAAA,CAASE,IAAT,GAAgB,IAAIU,KAAJ,EAAhB;UACAZ,QAAA,CAASE,IAAT,CAAcW,GAAd,aAA4BJ,IAA5B,gBAA2C,IAAAf,EAAA,CAAAoB,YAAA,EAAad,QAAA,CAASG,GAAT,CAAaY,YAA1B,CAA3C;UAEAf,QAAA,CAASS,IAAT,GAAgBjB,SAAA,CAAAa,QAAA,CAASW,IAAT,CAAcC,KAA9B;;UAEA;UACAjB,QAAA,CAASE,IAAT,CAAcgB,MAAd,GAAuB,YAAM;YACzBlB,QAAA,CAASE,IAAT,CAAcgB,MAAd,GAAuB,IAAvB;YAEAjB,IAAA;UACH,CAJD;;UAMA;UACA;QACH;MACJ;MACD;MAAA,KACK,IAAID,QAAA,CAASE,IAAT,CAAcO,IAAd,CAAmBE,OAAnB,CAA2B,OAA3B,MAAwC,CAA5C,EAA+C;QAChD,IAAME,GAAA,GAAMlB,GAAA,CAAIwB,eAAJ,CAAoBnB,QAAA,CAASE,IAA7B,CAAZ;QAEAF,QAAA,CAASoB,IAAT,GAAgBpB,QAAA,CAASE,IAAzB;QACAF,QAAA,CAASE,IAAT,GAAgB,IAAIU,KAAJ,EAAhB;QACAZ,QAAA,CAASE,IAAT,CAAcW,GAAd,GAAoBA,GAApB;QAEAb,QAAA,CAASS,IAAT,GAAgBjB,SAAA,CAAAa,QAAA,CAASW,IAAT,CAAcC,KAA9B;;QAEA;QACA;QACAjB,QAAA,CAASE,IAAT,CAAcgB,MAAd,GAAuB,YAAM;UACzBvB,GAAA,CAAI0B,eAAJ,CAAoBR,GAApB;UACAb,QAAA,CAASE,IAAT,CAAcgB,MAAd,GAAuB,IAAvB;UAEAjB,IAAA;QACH,CALD;;QAOA;QACA;MACH;IACJ;IAEDA,IAAA;EACH,CAxDD;AAyDH"},"metadata":{},"sourceType":"script","externalDependencies":[]}