{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar display = require('@pixi/display');\nconst _Application = class {\n  constructor(options) {\n    this.stage = new display.Container();\n    options = Object.assign({\n      forceCanvas: false\n    }, options);\n    this.renderer = core.autoDetectRenderer(options);\n    _Application._plugins.forEach(plugin => {\n      plugin.init.call(this, options);\n    });\n  }\n  render() {\n    this.renderer.render(this.stage);\n  }\n  get view() {\n    return this.renderer.view;\n  }\n  get screen() {\n    return this.renderer.screen;\n  }\n  destroy(removeView, stageOptions) {\n    const plugins = _Application._plugins.slice(0);\n    plugins.reverse();\n    plugins.forEach(plugin => {\n      plugin.destroy.call(this);\n    });\n    this.stage.destroy(stageOptions);\n    this.stage = null;\n    this.renderer.destroy(removeView);\n    this.renderer = null;\n  }\n};\nlet Application = _Application;\nApplication._plugins = [];\ncore.extensions.handleByList(core.ExtensionType.Application, Application._plugins);\nexports.Application = Application;","map":{"version":3,"names":["_Application","constructor","options","stage","display","Container","Object","assign","forceCanvas","renderer","core","autoDetectRenderer","_plugins","forEach","plugin","init","call","render","view","screen","destroy","removeView","stageOptions","plugins","slice","reverse","Application","extensions","handleByList","ExtensionType"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/app/src/Application.ts"],"sourcesContent":["import { autoDetectRenderer, extensions, ExtensionType } from '@pixi/core';\nimport { Container } from '@pixi/display';\n\nimport type { ICanvas, IRenderer, IRendererOptionsAuto, Rectangle } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * Any plugin that's usable for Application should contain these methods.\n * @memberof PIXI\n */\nexport interface IApplicationPlugin\n{\n    /**\n     * Called when Application is constructed, scoped to Application instance.\n     * Passes in `options` as the only argument, which are Application constructor options.\n     * @param {object} options - Application options.\n     */\n    init(options: Partial<IApplicationOptions>): void;\n    /** Called when destroying Application, scoped to Application instance. */\n    destroy(): void;\n}\n\n/**\n * Application options supplied to constructor.\n * @memberof PIXI\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IApplicationOptions extends IRendererOptionsAuto, GlobalMixins.IApplicationOptions {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Application extends GlobalMixins.Application {}\n\n/**\n * Convenience class to create a new PixiJS application.\n *\n * This class automatically creates the renderer, ticker and root container.\n * @example\n * import { Application, Sprite } from 'pixi.js';\n *\n * // Create the application\n * const app = new Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(Sprite.from('something.png'));\n * @class\n * @memberof PIXI\n */\nexport class Application<VIEW extends ICanvas = ICanvas>\n{\n    /** Collection of installed plugins. */\n    static _plugins: IApplicationPlugin[] = [];\n\n    /**\n     * The root display container that's rendered.\n     * @member {PIXI.Container}\n     */\n    public stage: Container = new Container();\n\n    /**\n     * WebGL renderer if available, otherwise CanvasRenderer.\n     * @member {PIXI.Renderer|PIXI.CanvasRenderer}\n     */\n    public renderer: IRenderer<VIEW>;\n\n    /**\n     * @param options - The optional application and renderer parameters.\n     */\n    constructor(options?: Partial<IApplicationOptions>)\n    {\n        // The default options\n        options = Object.assign({\n            forceCanvas: false,\n        }, options);\n\n        this.renderer = autoDetectRenderer<VIEW>(options);\n\n        // install plugins here\n        Application._plugins.forEach((plugin) =>\n        {\n            plugin.init.call(this, options);\n        });\n    }\n\n    /** Render the current stage. */\n    public render(): void\n    {\n        this.renderer.render(this.stage);\n    }\n\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {PIXI.ICanvas}\n     * @readonly\n     */\n    get view(): VIEW\n    {\n        return this.renderer.view;\n    }\n\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get screen(): Rectangle\n    {\n        return this.renderer.screen;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param {boolean} [removeView=false] - Automatically remove canvas from DOM.\n     * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'stageOptions' will be passed on to those calls.\n     * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the texture of the child sprite\n     * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the base texture of the child sprite\n     */\n    public destroy(removeView?: boolean, stageOptions?: IDestroyOptions | boolean): void\n    {\n        // Destroy plugins in the opposite order\n        // which they were constructed\n        const plugins = Application._plugins.slice(0);\n\n        plugins.reverse();\n        plugins.forEach((plugin) =>\n        {\n            plugin.destroy.call(this);\n        });\n\n        this.stage.destroy(stageOptions);\n        this.stage = null;\n\n        this.renderer.destroy(removeView);\n        this.renderer = null;\n    }\n}\n\nextensions.handleByList(ExtensionType.Application, Application._plugins);\n"],"mappings":";;;;;;;AAkDO,MAAMA,YAAA,GAAN,MACP;EAmBIC,YAAYC,OACZ;IAZO,KAAAC,KAAA,GAAmB,IAAIC,OAAA,CAAAC,SAAU;IAcpCH,OAAA,GAAUI,MAAA,CAAOC,MAAO;MACpBC,WAAa;IAAA,GACdN,OAAO;IAEL,KAAAO,QAAA,GAAWC,IAAA,CAAAC,kBAAA,CAAyBT,OAAO;IAGpCF,YAAA,CAAAY,QAAA,CAASC,OAAQ,CAACC,MAC9B;MACWA,MAAA,CAAAC,IAAA,CAAKC,IAAK,OAAMd,OAAO;IAAA,CACjC;EAAA;EAILe,MACAA,CAAA;IACS,KAAAR,QAAA,CAASQ,MAAO,MAAKd,KAAK;EAAA;EAQnC,IAAIe,IACJA,CAAA;IACI,OAAO,KAAKT,QAAS,CAAAS,IAAA;EAAA;EAQzB,IAAIC,MACJA,CAAA;IACI,OAAO,KAAKV,QAAS,CAAAU,MAAA;EAAA;EAelBC,OAAQA,CAAAC,UAAA,EAAsBC,YACrC;IAGI,MAAMC,OAAU,GAAAvB,YAAA,CAAYY,QAAS,CAAAY,KAAA,CAAM,CAAC;IAE5CD,OAAA,CAAQE,OAAQ;IACRF,OAAA,CAAAV,OAAA,CAASC,MACjB;MACWA,MAAA,CAAAM,OAAA,CAAQJ,IAAA,CAAK,IAAI;IAAA,CAC3B;IAEI,KAAAb,KAAA,CAAMiB,OAAA,CAAQE,YAAY;IAC/B,KAAKnB,KAAQ;IAER,KAAAM,QAAA,CAASW,OAAA,CAAQC,UAAU;IAChC,KAAKZ,QAAW;EAAA;AAExB;AA5FO,IAAMiB,WAAN,GAAA1B,YAAA;AAGH0B,WAHS,CAGFd,QAAA,GAAiC,EAAC;AA2F7CF,IAAA,CAAAiB,UAAA,CAAWC,YAAa,CAAAlB,IAAA,CAAAmB,aAAA,CAAcH,WAAa,EAAAA,WAAA,CAAYd,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}