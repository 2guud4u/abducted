{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar assets = require('@pixi/assets');\nvar core = require('@pixi/core');\nvar Spritesheet = require('./Spritesheet.js');\nconst validImages = [\"jpg\", \"png\", \"jpeg\", \"avif\", \"webp\"];\nfunction getCacheableAssets(keys, asset, ignoreMultiPack) {\n  const out = {};\n  keys.forEach(key => {\n    out[key] = asset;\n  });\n  Object.keys(asset.textures).forEach(key => {\n    out[key] = asset.textures[key];\n  });\n  if (!ignoreMultiPack) {\n    const basePath = core.utils.path.dirname(keys[0]);\n    asset.linkedSheets.forEach((item, i) => {\n      const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n      Object.assign(out, out2);\n    });\n  }\n  return out;\n}\nconst spritesheetAsset = {\n  extension: core.ExtensionType.Asset,\n  cache: {\n    test: asset => asset instanceof Spritesheet.Spritesheet,\n    getCacheableAssets: (keys, asset) => getCacheableAssets(keys, asset, false)\n  },\n  resolver: {\n    test: value => {\n      const tempURL = value.split(\"?\")[0];\n      const split = tempURL.split(\".\");\n      const extension = split.pop();\n      const format = split.pop();\n      return extension === \"json\" && validImages.includes(format);\n    },\n    parse: value => {\n      const split = value.split(\".\");\n      return {\n        resolution: parseFloat(core.settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n        format: split[split.length - 2],\n        src: value\n      };\n    }\n  },\n  loader: {\n    name: \"spritesheetLoader\",\n    extension: {\n      type: core.ExtensionType.LoadParser,\n      priority: assets.LoaderParserPriority.Normal\n    },\n    async testParse(asset, options) {\n      return core.utils.path.extname(options.src).toLowerCase() === \".json\" && !!asset.frames;\n    },\n    async parse(asset, options, loader) {\n      let basePath = core.utils.path.dirname(options.src);\n      if (basePath && basePath.lastIndexOf(\"/\") !== basePath.length - 1) {\n        basePath += \"/\";\n      }\n      let imagePath = basePath + asset.meta.image;\n      imagePath = assets.copySearchParams(imagePath, options.src);\n      const assets$1 = await loader.load([imagePath]);\n      const texture = assets$1[imagePath];\n      const spritesheet = new Spritesheet.Spritesheet(texture.baseTexture, asset, options.src);\n      await spritesheet.parse();\n      const multiPacks = asset?.meta?.related_multi_packs;\n      if (Array.isArray(multiPacks)) {\n        const promises = [];\n        for (const item of multiPacks) {\n          if (typeof item !== \"string\") {\n            continue;\n          }\n          let itemUrl = basePath + item;\n          if (options.data?.ignoreMultiPack) {\n            continue;\n          }\n          itemUrl = assets.copySearchParams(itemUrl, options.src);\n          promises.push(loader.load({\n            src: itemUrl,\n            data: {\n              ignoreMultiPack: true\n            }\n          }));\n        }\n        const res = await Promise.all(promises);\n        spritesheet.linkedSheets = res;\n        res.forEach(item => {\n          item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter(sp => sp !== item));\n        });\n      }\n      return spritesheet;\n    },\n    unload(spritesheet) {\n      spritesheet.destroy(true);\n    }\n  }\n};\ncore.extensions.add(spritesheetAsset);\nexports.spritesheetAsset = spritesheetAsset;","map":{"version":3,"names":["validImages","getCacheableAssets","keys","asset","ignoreMultiPack","out","forEach","key","Object","textures","basePath","core","utils","path","dirname","linkedSheets","item","i","out2","data","meta","related_multi_packs","assign","spritesheetAsset","extension","ExtensionType","Asset","cache","test","Spritesheet","resolver","value","tempURL","split","pop","format","includes","parse","resolution","parseFloat","settings","RETINA_PREFIX","exec","length","src","loader","name","type","LoadParser","priority","assets","LoaderParserPriority","Normal","testParse","options","extname","toLowerCase","frames","lastIndexOf","imagePath","image","copySearchParams","assets$1","load","texture","spritesheet","baseTexture","multiPacks","Array","isArray","promises","itemUrl","push","res","Promise","all","concat","filter","sp","unload","destroy","extensions","add"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/spritesheet/src/spritesheetAsset.ts"],"sourcesContent":["import { copySearchParams, LoaderParserPriority } from '@pixi/assets';\nimport { extensions, ExtensionType, settings, utils } from '@pixi/core';\nimport { Spritesheet } from './Spritesheet';\n\nimport type { AssetExtension, LoadAsset, Loader, ResolveAsset } from '@pixi/assets';\nimport type { Texture } from '@pixi/core';\nimport type { ISpritesheetData } from './Spritesheet';\n\nexport interface SpriteSheetJson extends ISpritesheetData\n{\n    meta: {\n        image: string;\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\nconst validImages = ['jpg', 'png', 'jpeg', 'avif', 'webp'];\n\nfunction getCacheableAssets(keys: string[], asset: Spritesheet, ignoreMultiPack: boolean)\n{\n    const out: Record<string, any> = {};\n\n    keys.forEach((key: string) =>\n    {\n        out[key] = asset;\n    });\n\n    Object.keys(asset.textures).forEach((key) =>\n    {\n        out[key] = asset.textures[key];\n    });\n\n    if (!ignoreMultiPack)\n    {\n        const basePath = utils.path.dirname(keys[0]);\n\n        asset.linkedSheets.forEach((item: Spritesheet, i) =>\n        {\n            const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n\n            Object.assign(out, out2);\n        });\n    }\n\n    return out;\n}\n\n/**\n * Asset extension for loading spritesheets.\n * @memberof PIXI\n * @type {PIXI.AssetExtension}\n */\nexport const spritesheetAsset = {\n    extension: ExtensionType.Asset,\n    /** Handle the caching of the related Spritesheet Textures */\n    cache: {\n        test: (asset: Spritesheet) => asset instanceof Spritesheet,\n        getCacheableAssets: (keys: string[], asset: Spritesheet) => getCacheableAssets(keys, asset, false),\n    },\n    /** Resolve the the resolution of the asset. */\n    resolver: {\n        test: (value: string): boolean =>\n        {\n            const tempURL = value.split('?')[0];\n            const split = tempURL.split('.');\n            const extension = split.pop();\n            const format = split.pop();\n\n            return extension === 'json' && validImages.includes(format);\n        },\n        parse: (value: string): ResolveAsset =>\n        {\n            const split = value.split('.');\n\n            return {\n                resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                format: split[split.length - 2],\n                src: value,\n            };\n        },\n    },\n    /**\n     * Loader plugin that parses sprite sheets!\n     * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n     * If it is, we load the spritesheets image and parse the data into PIXI.Spritesheet\n     * All textures in the sprite sheet are then added to the cache\n     * @ignore\n     */\n    loader: {\n        name: 'spritesheetLoader',\n\n        extension: {\n            type: ExtensionType.LoadParser,\n            priority: LoaderParserPriority.Normal,\n        },\n\n        async testParse(asset: SpriteSheetJson, options: LoadAsset): Promise<boolean>\n        {\n            return (utils.path.extname(options.src).toLowerCase() === '.json' && !!asset.frames);\n        },\n\n        async parse(asset: SpriteSheetJson, options: LoadAsset, loader: Loader): Promise<Spritesheet>\n        {\n            let basePath = utils.path.dirname(options.src);\n\n            if (basePath && basePath.lastIndexOf('/') !== (basePath.length - 1))\n            {\n                basePath += '/';\n            }\n\n            let imagePath = basePath + asset.meta.image;\n\n            imagePath = copySearchParams(imagePath, options.src);\n\n            const assets = await loader.load<Texture>([imagePath]);\n            const texture = assets[imagePath];\n            const spritesheet = new Spritesheet(\n                texture.baseTexture,\n                asset,\n                options.src,\n            );\n\n            await spritesheet.parse();\n\n            // Check and add the multi atlas\n            // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n            // eslint-disable-next-line camelcase\n            const multiPacks = asset?.meta?.related_multi_packs;\n\n            if (Array.isArray(multiPacks))\n            {\n                const promises: Promise<Spritesheet>[] = [];\n\n                for (const item of multiPacks)\n                {\n                    if (typeof item !== 'string')\n                    {\n                        continue;\n                    }\n\n                    let itemUrl = basePath + item;\n\n                    // Check if the file wasn't already added as multipack\n                    if (options.data?.ignoreMultiPack)\n                    {\n                        continue;\n                    }\n\n                    itemUrl = copySearchParams(itemUrl, options.src);\n\n                    promises.push(loader.load<Spritesheet>({\n                        src: itemUrl,\n                        data: {\n                            ignoreMultiPack: true,\n                        }\n                    }));\n                }\n\n                const res = await Promise.all(promises);\n\n                spritesheet.linkedSheets = res;\n                res.forEach((item) =>\n                {\n                    item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => (sp !== item)));\n                });\n            }\n\n            return spritesheet;\n        },\n\n        unload(spritesheet: Spritesheet)\n        {\n            spritesheet.destroy(true);\n        },\n    },\n} as AssetExtension<Spritesheet | SpriteSheetJson>;\n\nextensions.add(spritesheetAsset);\n"],"mappings":";;;;;;;;AAkBA,MAAMA,WAAA,GAAc,CAAC,OAAO,KAAO,UAAQ,QAAQ,MAAM;AAEzD,SAA4BC,mBAAAC,IAAA,EAAgBC,KAAA,EAAoBC,eAChE;EACI,MAAMC,GAAA,GAA2B,EAAC;EAE7BH,IAAA,CAAAI,OAAA,CAASC,GACd;IACIF,GAAA,CAAIE,GAAO,IAAAJ,KAAA;EAAA,CACd;EAEDK,MAAA,CAAON,IAAA,CAAKC,KAAM,CAAAM,QAAQ,CAAE,CAAAH,OAAA,CAASC,GACrC;IACQF,GAAA,CAAAE,GAAA,IAAOJ,KAAA,CAAMM,QAAS,CAAAF,GAAA;EAAA,CAC7B;EAED,IAAI,CAACH,eACL;IACI,MAAMM,QAAW,GAAAC,IAAA,CAAAC,KAAA,CAAMC,IAAK,CAAAC,OAAA,CAAQZ,IAAA,CAAK,CAAE;IAE3CC,KAAA,CAAMY,YAAa,CAAAT,OAAA,CAAQ,CAACU,IAAA,EAAmBC,CAC/C;MACI,MAAMC,IAAO,GAAAjB,kBAAA,CAAmB,CAAC,GAAGS,QAAY,IAAAP,KAAA,CAAMgB,IAAK,CAAAC,IAAA,CAAKC,mBAAoB,CAAAJ,CAAA,GAAI,CAAG,EAAAD,IAAA,EAAM,IAAI;MAE9FR,MAAA,CAAAc,MAAA,CAAOjB,GAAA,EAAKa,IAAI;IAAA,CAC1B;EAAA;EAGE,OAAAb,GAAA;AACX;AAOO,MAAMkB,gBAAmB;EAC5BC,SAAA,EAAWb,IAAA,CAAAc,aAAc,CAAAC,KAAA;EAEzBC,KAAO;IACHC,IAAA,EAAOzB,KAAA,IAAuBA,KAAiB,YAAA0B,WAAA,CAAAA,WAAA;IAC/C5B,kBAAA,EAAoBA,CAACC,IAAA,EAAgBC,KAAA,KAAuBF,kBAAmB,CAAAC,IAAA,EAAMC,KAAA,EAAO,KAAK;EAAA,CACrG;EAEA2B,QAAU;IACNF,IAAA,EAAOG,KACP;MACI,MAAMC,OAAU,GAAAD,KAAA,CAAME,KAAM,IAAG,CAAE;MAC3B,MAAAA,KAAA,GAAQD,OAAQ,CAAAC,KAAA,CAAM,GAAG;MACzB,MAAAT,SAAA,GAAYS,KAAA,CAAMC,GAAI;MACtB,MAAAC,MAAA,GAASF,KAAA,CAAMC,GAAI;MAEzB,OAAOV,SAAc,eAAUxB,WAAY,CAAAoC,QAAA,CAASD,MAAM;IAAA,CAC9D;IACAE,KAAA,EAAQN,KACR;MACU,MAAAE,KAAA,GAAQF,KAAM,CAAAE,KAAA,CAAM,GAAG;MAEtB;QACHK,UAAA,EAAYC,UAAA,CAAW5B,IAAA,CAAA6B,QAAS,CAAAC,aAAA,CAAcC,IAAA,CAAKX,KAAK,IAAI,MAAM,GAAG;QACrEI,MAAA,EAAQF,KAAM,CAAAA,KAAA,CAAMU,MAAS;QAC7BC,GAAK,EAAAb;MAAA,CACT;IAAA;EACJ,CACJ;EAQAc,MAAQ;IACJC,IAAM;IAENtB,SAAW;MACPuB,IAAA,EAAMpC,IAAA,CAAAc,aAAc,CAAAuB,UAAA;MACpBC,QAAA,EAAUC,MAAA,CAAAC,oBAAqB,CAAAC;IAAA,CACnC;IAEA,MAAMC,SAAUA,CAAAlD,KAAA,EAAwBmD,OACxC;MACY,OAAA3C,IAAA,CAAAC,KAAA,CAAMC,IAAK,CAAA0C,OAAA,CAAQD,OAAQ,CAAAV,GAAG,CAAE,CAAAY,WAAA,EAAkB,gBAAW,CAAC,CAACrD,KAAM,CAAAsD,MAAA;IAAA,CACjF;IAEA,MAAMpB,MAAMlC,KAAwB,EAAAmD,OAAA,EAAoBT,MACxD;MACI,IAAInC,QAAW,GAAAC,IAAA,CAAAC,KAAA,CAAMC,IAAK,CAAAC,OAAA,CAAQwC,OAAA,CAAQV,GAAG;MAE7C,IAAIlC,QAAA,IAAYA,QAAS,CAAAgD,WAAA,CAAY,GAAG,CAAO,KAAAhD,QAAA,CAASiC,MAAA,GAAS,CACjE;QACgBjC,QAAA;MAAA;MAGZ,IAAAiD,SAAA,GAAYjD,QAAW,GAAAP,KAAA,CAAMiB,IAAK,CAAAwC,KAAA;MAE1BD,SAAA,GAAAT,MAAA,CAAAW,gBAAA,CAAiBF,SAAW,EAAAL,OAAA,CAAQV,GAAG;MAEnD,MAAMkB,QAAA,GAAS,MAAMjB,MAAA,CAAOkB,IAAc,EAACJ,SAAS,CAAC;MACrD,MAAMK,OAAA,GAAUF,QAAO,CAAAH,SAAA;MACvB,MAAMM,WAAA,GAAc,IAAIpC,WAAA,CAAAA,WAAA,CACpBmC,OAAA,CAAQE,WACR,EAAA/D,KAAA,EACAmD,OAAA,CAAQV,GACZ;MAEA,MAAMqB,WAAA,CAAY5B,KAAM;MAKlB,MAAA8B,UAAA,GAAahE,KAAA,EAAOiB,IAAM,EAAAC,mBAAA;MAE5B,IAAA+C,KAAA,CAAMC,OAAQ,CAAAF,UAAU,CAC5B;QACI,MAAMG,QAAA,GAAmC,EAAC;QAE1C,WAAWtD,IAAA,IAAQmD,UACnB;UACQ,WAAOnD,IAAA,KAAS,QACpB;YACI;UAAA;UAGJ,IAAIuD,OAAA,GAAU7D,QAAW,GAAAM,IAAA;UAGrB,IAAAsC,OAAA,CAAQnC,IAAA,EAAMf,eAClB;YACI;UAAA;UAGMmE,OAAA,GAAArB,MAAA,CAAAW,gBAAA,CAAiBU,OAAS,EAAAjB,OAAA,CAAQV,GAAG;UAEtC0B,QAAA,CAAAE,IAAA,CAAK3B,MAAA,CAAOkB,IAAkB;YACnCnB,GAAK,EAAA2B,OAAA;YACLpD,IAAM;cACFf,eAAiB;YAAA;UACrB,CACH,CAAC;QAAA;QAGN,MAAMqE,GAAM,SAAMC,OAAQ,CAAAC,GAAA,CAAIL,QAAQ;QAEtCL,WAAA,CAAYlD,YAAe,GAAA0D,GAAA;QACvBA,GAAA,CAAAnE,OAAA,CAASU,IACb;UACIA,IAAA,CAAKD,YAAe,IAACkD,WAAW,EAAEW,MAAO,CAAAX,WAAA,CAAYlD,YAAa,CAAA8D,MAAA,CAAQC,EAAA,IAAQA,EAAO,KAAA9D,IAAK,CAAC;QAAA,CAClG;MAAA;MAGE,OAAAiD,WAAA;IAAA,CACX;IAEAc,OAAOd,WACP;MACIA,WAAA,CAAYe,OAAA,CAAQ,IAAI;IAAA;EAC5B;AAER;AAEArE,IAAA,CAAAsE,UAAA,CAAWC,GAAA,CAAI3D,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}