{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar alpha = require('./alpha.js');\nclass AlphaFilter extends core.Filter {\n  constructor() {\n    let alpha$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    super(core.defaultVertex, alpha[\"default\"], {\n      uAlpha: 1\n    });\n    this.alpha = alpha$1;\n  }\n  get alpha() {\n    return this.uniforms.uAlpha;\n  }\n  set alpha(value) {\n    this.uniforms.uAlpha = value;\n  }\n}\nexports.AlphaFilter = AlphaFilter;","map":{"version":3,"names":["AlphaFilter","core","Filter","constructor","alpha$1","arguments","length","undefined","defaultVertex","alpha","uAlpha","uniforms","value"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/filter-alpha/src/AlphaFilter.ts"],"sourcesContent":["import { defaultVertex, Filter } from '@pixi/core';\nimport fragment from './alpha.frag';\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n * @memberof PIXI\n */\nexport class AlphaFilter extends Filter\n{\n    /**\n     * @param alpha - Amount of alpha from 0 to 1, where 0 is transparent\n     */\n    constructor(alpha = 1.0)\n    {\n        super(defaultVertex, fragment, { uAlpha: 1 });\n\n        this.alpha = alpha;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     * @default 1\n     */\n    get alpha(): number\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value: number)\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n"],"mappings":";;;;;;;AAiBO,MAAMA,WAAA,SAAoBC,IAAA,CAAAC,MACjC;EAIIC,YAAA,EACA;IAAA,IADYC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAQ,CACpB;IACI,MAAMJ,IAAA,CAAAO,aAAe,EAAAC,KAAA,aAAU;MAAEC,MAAA,EAAQ;IAAA,CAAG;IAE5C,KAAKD,KAAQ,GAAAL,OAAA;EAAA;EAOjB,IAAIK,KACJA,CAAA;IACI,OAAO,KAAKE,QAAS,CAAAD,MAAA;EAAA;EAGzB,IAAID,MAAMG,KACV;IACI,KAAKD,QAAA,CAASD,MAAS,GAAAE,KAAA;EAAA;AAE/B"},"metadata":{},"sourceType":"script","externalDependencies":[]}