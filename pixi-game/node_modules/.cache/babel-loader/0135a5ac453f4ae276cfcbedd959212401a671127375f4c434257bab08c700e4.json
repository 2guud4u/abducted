{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _math = require('../math');\nvar _TransformBase2 = require('./TransformBase');\nvar _TransformBase3 = _interopRequireDefault(_TransformBase2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * Transform that takes care about its versions\n *\n * @class\n * @extends PIXI.TransformBase\n * @memberof PIXI\n */\nvar TransformStatic = function (_TransformBase) {\n  _inherits(TransformStatic, _TransformBase);\n\n  /**\n   *\n   */\n  function TransformStatic() {\n    _classCallCheck(this, TransformStatic);\n\n    /**\n    * The coordinate of the object relative to the local coordinates of the parent.\n    *\n    * @member {PIXI.ObservablePoint}\n    */\n    var _this = _possibleConstructorReturn(this, _TransformBase.call(this));\n    _this.position = new _math.ObservablePoint(_this.onChange, _this, 0, 0);\n\n    /**\n     * The scale factor of the object.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    _this.scale = new _math.ObservablePoint(_this.onChange, _this, 1, 1);\n\n    /**\n     * The pivot point of the displayObject that it rotates around.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    _this.pivot = new _math.ObservablePoint(_this.onChange, _this, 0, 0);\n\n    /**\n     * The skew amount, on the x and y axis.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    _this.skew = new _math.ObservablePoint(_this.updateSkew, _this, 0, 0);\n    _this._rotation = 0;\n    _this._cx = 1; // cos rotation + skewY;\n    _this._sx = 0; // sin rotation + skewY;\n    _this._cy = 0; // cos rotation + Math.PI/2 - skewX;\n    _this._sy = 1; // sin rotation + Math.PI/2 - skewX;\n\n    _this._localID = 0;\n    _this._currentLocalID = 0;\n    return _this;\n  }\n\n  /**\n   * Called when a value changes.\n   *\n   * @private\n   */\n\n  TransformStatic.prototype.onChange = function onChange() {\n    this._localID++;\n  };\n\n  /**\n   * Called when skew or rotation changes\n   *\n   * @private\n   */\n\n  TransformStatic.prototype.updateSkew = function updateSkew() {\n    this._cx = Math.cos(this._rotation + this.skew._y);\n    this._sx = Math.sin(this._rotation + this.skew._y);\n    this._cy = -Math.sin(this._rotation - this.skew._x); // cos, added PI/2\n    this._sy = Math.cos(this._rotation - this.skew._x); // sin, added PI/2\n\n    this._localID++;\n  };\n\n  /**\n   * Updates only local matrix\n   */\n\n  TransformStatic.prototype.updateLocalTransform = function updateLocalTransform() {\n    var lt = this.localTransform;\n    if (this._localID !== this._currentLocalID) {\n      // get the matrix values of the displayobject based on its transform properties..\n      lt.a = this._cx * this.scale._x;\n      lt.b = this._sx * this.scale._x;\n      lt.c = this._cy * this.scale._y;\n      lt.d = this._sy * this.scale._y;\n      lt.tx = this.position._x - (this.pivot._x * lt.a + this.pivot._y * lt.c);\n      lt.ty = this.position._y - (this.pivot._x * lt.b + this.pivot._y * lt.d);\n      this._currentLocalID = this._localID;\n\n      // force an update..\n      this._parentID = -1;\n    }\n  };\n\n  /**\n   * Updates the values of the object and applies the parent's transform.\n   *\n   * @param {PIXI.Transform} parentTransform - The transform of the parent of this object\n   */\n\n  TransformStatic.prototype.updateTransform = function updateTransform(parentTransform) {\n    var lt = this.localTransform;\n    if (this._localID !== this._currentLocalID) {\n      // get the matrix values of the displayobject based on its transform properties..\n      lt.a = this._cx * this.scale._x;\n      lt.b = this._sx * this.scale._x;\n      lt.c = this._cy * this.scale._y;\n      lt.d = this._sy * this.scale._y;\n      lt.tx = this.position._x - (this.pivot._x * lt.a + this.pivot._y * lt.c);\n      lt.ty = this.position._y - (this.pivot._x * lt.b + this.pivot._y * lt.d);\n      this._currentLocalID = this._localID;\n\n      // force an update..\n      this._parentID = -1;\n    }\n    if (this._parentID !== parentTransform._worldID) {\n      // concat the parent matrix with the objects transform.\n      var pt = parentTransform.worldTransform;\n      var wt = this.worldTransform;\n      wt.a = lt.a * pt.a + lt.b * pt.c;\n      wt.b = lt.a * pt.b + lt.b * pt.d;\n      wt.c = lt.c * pt.a + lt.d * pt.c;\n      wt.d = lt.c * pt.b + lt.d * pt.d;\n      wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n      wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n      this._parentID = parentTransform._worldID;\n\n      // update the id of the transform..\n      this._worldID++;\n    }\n  };\n\n  /**\n   * Decomposes a matrix and sets the transforms properties based on it.\n   *\n   * @param {PIXI.Matrix} matrix - The matrix to decompose\n   */\n\n  TransformStatic.prototype.setFromMatrix = function setFromMatrix(matrix) {\n    matrix.decompose(this);\n    this._localID++;\n  };\n\n  /**\n   * The rotation of the object in radians.\n   *\n   * @member {number}\n   */\n\n  _createClass(TransformStatic, [{\n    key: 'rotation',\n    get: function get() {\n      return this._rotation;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._rotation !== value) {\n        this._rotation = value;\n        this.updateSkew();\n      }\n    }\n  }]);\n  return TransformStatic;\n}(_TransformBase3.default);\nexports.default = TransformStatic;","map":{"version":3,"names":["_math","require","_TransformBase2","TransformStatic","_classCallCheck","_this","_possibleConstructorReturn","_TransformBase","call","position","ObservablePoint","onChange","scale","pivot","skew","updateSkew","_rotation","_cx","_sx","_cy","_sy","_localID","_currentLocalID","Math","cos","_y","sin","_x","updateLocalTransform","lt","localTransform","a","b","c","d","tx","ty","_parentID","updateTransform","parentTransform","_worldID","pt","worldTransform","wt","setFromMatrix","matrix","decompose","value"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/display/TransformStatic.js"],"sourcesContent":["import { ObservablePoint } from '../math';\nimport TransformBase from './TransformBase';\n\n/**\n * Transform that takes care about its versions\n *\n * @class\n * @extends PIXI.TransformBase\n * @memberof PIXI\n */\nexport default class TransformStatic extends TransformBase\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        super();\n\n         /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n\n        this._cx = 1; // cos rotation + skewY;\n        this._sx = 0; // sin rotation + skewY;\n        this._cy = 0; // cos rotation + Math.PI/2 - skewX;\n        this._sy = 1; // sin rotation + Math.PI/2 - skewX;\n\n        this._localID = 0;\n        this._currentLocalID = 0;\n    }\n\n    /**\n     * Called when a value changes.\n     *\n     * @private\n     */\n    onChange()\n    {\n        this._localID ++;\n    }\n\n    /**\n     * Called when skew or rotation changes\n     *\n     * @private\n     */\n    updateSkew()\n    {\n        this._cx = Math.cos(this._rotation + this.skew._y);\n        this._sx = Math.sin(this._rotation + this.skew._y);\n        this._cy = -Math.sin(this._rotation - this.skew._x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew._x); // sin, added PI/2\n\n        this._localID ++;\n    }\n\n    /**\n     * Updates only local matrix\n     */\n    updateLocalTransform()\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale._x;\n            lt.b = this._sx * this.scale._x;\n            lt.c = this._cy * this.scale._y;\n            lt.d = this._sy * this.scale._y;\n\n            lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));\n            lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the values of the object and applies the parent's transform.\n     *\n     * @param {PIXI.Transform} parentTransform - The transform of the parent of this object\n     */\n    updateTransform(parentTransform)\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale._x;\n            lt.b = this._sx * this.scale._x;\n            lt.c = this._cy * this.scale._y;\n            lt.d = this._sy * this.scale._y;\n\n            lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));\n            lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID ++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix)\n    {\n        matrix.decompose(this);\n        this._localID ++;\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     */\n    get rotation()\n    {\n        return this._rotation;\n    }\n\n    set rotation(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}