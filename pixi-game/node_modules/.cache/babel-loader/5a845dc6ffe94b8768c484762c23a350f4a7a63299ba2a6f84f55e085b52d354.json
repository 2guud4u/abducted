{"ast":null,"code":"var Texture = require('./GLTexture');\n\n/**\n * Helper class to create a webGL Framebuffer\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n */\nvar Framebuffer = function (gl, width, height) {\n  /**\n   * The current WebGL rendering context\n   *\n   * @member {WebGLRenderingContext}\n   */\n  this.gl = gl;\n\n  /**\n   * The frame buffer\n   *\n   * @member {WebGLFramebuffer}\n   */\n  this.framebuffer = gl.createFramebuffer();\n\n  /**\n   * The stencil buffer\n   *\n   * @member {WebGLRenderbuffer}\n   */\n  this.stencil = null;\n\n  /**\n   * The stencil buffer\n   *\n   * @member {PIXI.glCore.GLTexture}\n   */\n  this.texture = null;\n\n  /**\n   * The width of the drawing area of the buffer\n   *\n   * @member {Number}\n   */\n  this.width = width || 100;\n  /**\n   * The height of the drawing area of the buffer\n   *\n   * @member {Number}\n   */\n  this.height = height || 100;\n};\n\n/**\n * Adds a texture to the frame buffer\n * @param texture {PIXI.glCore.GLTexture}\n */\nFramebuffer.prototype.enableTexture = function (texture) {\n  var gl = this.gl;\n  this.texture = texture || new Texture(gl);\n  this.texture.bind();\n\n  //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,  this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n  this.bind();\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n};\n\n/**\n * Initialises the stencil buffer\n */\nFramebuffer.prototype.enableStencil = function () {\n  if (this.stencil) return;\n  var gl = this.gl;\n  this.stencil = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);\n\n  // TODO.. this is depth AND stencil?\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.stencil);\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, this.width, this.height);\n};\n\n/**\n * Erases the drawing area and fills it with a colour\n * @param  r {Number} the red value of the clearing colour\n * @param  g {Number} the green value of the clearing colour\n * @param  b {Number} the blue value of the clearing colour\n * @param  a {Number} the alpha value of the clearing colour\n */\nFramebuffer.prototype.clear = function (r, g, b, a) {\n  this.bind();\n  var gl = this.gl;\n  gl.clearColor(r, g, b, a);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n};\n\n/**\n * Binds the frame buffer to the WebGL context\n */\nFramebuffer.prototype.bind = function () {\n  var gl = this.gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n};\n\n/**\n * Unbinds the frame buffer to the WebGL context\n */\nFramebuffer.prototype.unbind = function () {\n  var gl = this.gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n};\n/**\n * Resizes the drawing area of the buffer to the given width and height\n * @param  width  {Number} the new width\n * @param  height {Number} the new height\n */\nFramebuffer.prototype.resize = function (width, height) {\n  var gl = this.gl;\n  this.width = width;\n  this.height = height;\n  if (this.texture) {\n    this.texture.uploadData(null, width, height);\n  }\n  if (this.stencil) {\n    // update the stencil buffer width and height\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);\n  }\n};\n\n/**\n * Destroys this buffer\n */\nFramebuffer.prototype.destroy = function () {\n  var gl = this.gl;\n\n  //TODO\n  if (this.texture) {\n    this.texture.destroy();\n  }\n  gl.deleteFramebuffer(this.framebuffer);\n  this.gl = null;\n  this.stencil = null;\n  this.texture = null;\n};\n\n/**\n * Creates a frame buffer with a texture containing the given data\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n */\nFramebuffer.createRGBA = function (gl, width, height, data) {\n  var texture = Texture.fromData(gl, null, width, height);\n  texture.enableNearestScaling();\n  texture.enableWrapClamp();\n\n  //now create the framebuffer object and attach the texture to it.\n  var fbo = new Framebuffer(gl, width, height);\n  fbo.enableTexture(texture);\n  //fbo.enableStencil(); // get this back on soon!\n\n  //fbo.enableStencil(); // get this back on soon!\n\n  fbo.unbind();\n  return fbo;\n};\n\n/**\n * Creates a frame buffer with a texture containing the given data\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n */\nFramebuffer.createFloat32 = function (gl, width, height, data) {\n  // create a new texture..\n  var texture = new Texture.fromData(gl, data, width, height);\n  texture.enableNearestScaling();\n  texture.enableWrapClamp();\n\n  //now create the framebuffer object and attach the texture to it.\n  var fbo = new Framebuffer(gl, width, height);\n  fbo.enableTexture(texture);\n  fbo.unbind();\n  return fbo;\n};\nmodule.exports = Framebuffer;","map":{"version":3,"names":["Texture","require","Framebuffer","gl","width","height","framebuffer","createFramebuffer","stencil","texture","prototype","enableTexture","bind","framebufferTexture2D","FRAMEBUFFER","COLOR_ATTACHMENT0","TEXTURE_2D","enableStencil","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","renderbufferStorage","DEPTH_STENCIL","clear","r","g","b","a","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","bindFramebuffer","unbind","resize","uploadData","destroy","deleteFramebuffer","createRGBA","data","fromData","enableNearestScaling","enableWrapClamp","fbo","createFloat32","module","exports"],"sources":["/Users/jiahuajiang/node_modules/pixi-gl-core/src/GLFramebuffer.js"],"sourcesContent":["\nvar Texture = require('./GLTexture');\n\n/**\n * Helper class to create a webGL Framebuffer\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n */\nvar Framebuffer = function(gl, width, height)\n{\n    /**\n     * The current WebGL rendering context\n     *\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    /**\n     * The frame buffer\n     *\n     * @member {WebGLFramebuffer}\n     */\n    this.framebuffer = gl.createFramebuffer();\n\n    /**\n     * The stencil buffer\n     *\n     * @member {WebGLRenderbuffer}\n     */\n    this.stencil = null;\n\n    /**\n     * The stencil buffer\n     *\n     * @member {PIXI.glCore.GLTexture}\n     */\n    this.texture = null;\n\n    /**\n     * The width of the drawing area of the buffer\n     *\n     * @member {Number}\n     */\n    this.width = width || 100;\n    /**\n     * The height of the drawing area of the buffer\n     *\n     * @member {Number}\n     */\n    this.height = height || 100;\n};\n\n/**\n * Adds a texture to the frame buffer\n * @param texture {PIXI.glCore.GLTexture}\n */\nFramebuffer.prototype.enableTexture = function(texture)\n{\n    var gl = this.gl;\n\n    this.texture = texture || new Texture(gl);\n\n    this.texture.bind();\n\n    //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,  this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    this.bind();\n\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n};\n\n/**\n * Initialises the stencil buffer\n */\nFramebuffer.prototype.enableStencil = function()\n{\n    if(this.stencil)return;\n\n    var gl = this.gl;\n\n    this.stencil = gl.createRenderbuffer();\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);\n\n    // TODO.. this is depth AND stencil?\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.stencil);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL,  this.width  , this.height );\n\n\n};\n\n/**\n * Erases the drawing area and fills it with a colour\n * @param  r {Number} the red value of the clearing colour\n * @param  g {Number} the green value of the clearing colour\n * @param  b {Number} the blue value of the clearing colour\n * @param  a {Number} the alpha value of the clearing colour\n */\nFramebuffer.prototype.clear = function( r, g, b, a )\n{\n    this.bind();\n\n    var gl = this.gl;\n\n    gl.clearColor(r, g, b, a);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n};\n\n/**\n * Binds the frame buffer to the WebGL context\n */\nFramebuffer.prototype.bind = function()\n{\n    var gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer );\n};\n\n/**\n * Unbinds the frame buffer to the WebGL context\n */\nFramebuffer.prototype.unbind = function()\n{\n    var gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null );\n};\n/**\n * Resizes the drawing area of the buffer to the given width and height\n * @param  width  {Number} the new width\n * @param  height {Number} the new height\n */\nFramebuffer.prototype.resize = function(width, height)\n{\n    var gl = this.gl;\n\n    this.width = width;\n    this.height = height;\n\n    if ( this.texture )\n    {\n        this.texture.uploadData(null, width, height);\n    }\n\n    if ( this.stencil )\n    {\n        // update the stencil buffer width and height\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);\n    }\n};\n\n/**\n * Destroys this buffer\n */\nFramebuffer.prototype.destroy = function()\n{\n    var gl = this.gl;\n\n    //TODO\n    if(this.texture)\n    {\n        this.texture.destroy();\n    }\n\n    gl.deleteFramebuffer(this.framebuffer);\n\n    this.gl = null;\n\n    this.stencil = null;\n    this.texture = null;\n};\n\n/**\n * Creates a frame buffer with a texture containing the given data\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n */\nFramebuffer.createRGBA = function(gl, width, height, data)\n{\n    var texture = Texture.fromData(gl, null, width, height);\n    texture.enableNearestScaling();\n    texture.enableWrapClamp();\n\n    //now create the framebuffer object and attach the texture to it.\n    var fbo = new Framebuffer(gl, width, height);\n    fbo.enableTexture(texture);\n    //fbo.enableStencil(); // get this back on soon!\n\n    //fbo.enableStencil(); // get this back on soon!\n\n    fbo.unbind();\n\n    return fbo;\n};\n\n/**\n * Creates a frame buffer with a texture containing the given data\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n */\nFramebuffer.createFloat32 = function(gl, width, height, data)\n{\n    // create a new texture..\n    var texture = new Texture.fromData(gl, data, width, height);\n    texture.enableNearestScaling();\n    texture.enableWrapClamp();\n\n    //now create the framebuffer object and attach the texture to it.\n    var fbo = new Framebuffer(gl, width, height);\n    fbo.enableTexture(texture);\n\n    fbo.unbind();\n\n    return fbo;\n};\n\nmodule.exports = Framebuffer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}