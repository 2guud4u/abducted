{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _WebGLManager2 = require('../managers/WebGLManager');\nvar _WebGLManager3 = _interopRequireDefault(_WebGLManager2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * Base for a common object renderer that can be used as a system renderer plugin.\n *\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\nvar ObjectRenderer = function (_WebGLManager) {\n  _inherits(ObjectRenderer, _WebGLManager);\n  function ObjectRenderer() {\n    _classCallCheck(this, ObjectRenderer);\n    return _possibleConstructorReturn(this, _WebGLManager.apply(this, arguments));\n  }\n\n  /**\n   * Starts the renderer and sets the shader\n   *\n   */\n  ObjectRenderer.prototype.start = function start() {}\n  // set the shader..\n\n  /**\n   * Stops the renderer\n   *\n   */;\n\n  ObjectRenderer.prototype.stop = function stop() {\n    this.flush();\n  };\n\n  /**\n   * Stub method for rendering content and emptying the current batch.\n   *\n   */\n\n  ObjectRenderer.prototype.flush = function flush() {}\n  // flush!\n\n  /**\n   * Renders an object\n   *\n   * @param {PIXI.DisplayObject} object - The object to render.\n   */;\n\n  ObjectRenderer.prototype.render = function render(object)\n  // eslint-disable-line no-unused-vars\n  {\n    // render the object\n  };\n  return ObjectRenderer;\n}(_WebGLManager3.default);\nexports.default = ObjectRenderer;","map":{"version":3,"names":["_WebGLManager2","require","ObjectRenderer","start","stop","flush","render","object"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/renderers/webgl/utils/ObjectRenderer.js"],"sourcesContent":["import WebGLManager from '../managers/WebGLManager';\n\n/**\n * Base for a common object renderer that can be used as a system renderer plugin.\n *\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\nexport default class ObjectRenderer extends WebGLManager\n{\n    /**\n     * Starts the renderer and sets the shader\n     *\n     */\n    start()\n    {\n        // set the shader..\n    }\n\n    /**\n     * Stops the renderer\n     *\n     */\n    stop()\n    {\n        this.flush();\n    }\n\n    /**\n     * Stub method for rendering content and emptying the current batch.\n     *\n     */\n    flush()\n    {\n        // flush!\n    }\n\n    /**\n     * Renders an object\n     *\n     * @param {PIXI.DisplayObject} object - The object to render.\n     */\n    render(object) // eslint-disable-line no-unused-vars\n    {\n        // render the object\n    }\n}\n"],"mappings":";;;AAAA,IAAAA,cAAA,GAAAC,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;IAOqBC,c;;;;;;;EAEjB;;;;2BAIAC,K,oBACA,CAEC;EADG;;EAGJ;;;KAAA;;2BAIAC,I,mBACA;IACI,KAAKC,KAAL;EACH,C;;EAED;;;;;2BAIAA,K,oBACA,CAEC;EADG;;EAGJ;;;;KAAA;;2BAKAC,M,mBAAOC,M;EAAQ;EACf;IACI;EAAA,C;;;kBApCaL,c"},"metadata":{},"sourceType":"script","externalDependencies":[]}