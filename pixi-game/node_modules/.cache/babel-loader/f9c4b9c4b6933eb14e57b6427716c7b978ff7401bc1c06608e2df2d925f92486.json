{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _GroupD = require('../math/GroupD8');\nvar _GroupD2 = _interopRequireDefault(_GroupD);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * A standard object to store the Uvs of a texture\n *\n * @class\n * @private\n * @memberof PIXI\n */\nvar TextureUvs = function () {\n  /**\n   *\n   */\n  function TextureUvs() {\n    _classCallCheck(this, TextureUvs);\n    this.x0 = 0;\n    this.y0 = 0;\n    this.x1 = 1;\n    this.y1 = 0;\n    this.x2 = 1;\n    this.y2 = 1;\n    this.x3 = 0;\n    this.y3 = 1;\n    this.uvsUint32 = new Uint32Array(4);\n  }\n\n  /**\n   * Sets the texture Uvs based on the given frame information.\n   *\n   * @private\n   * @param {PIXI.Rectangle} frame - The frame of the texture\n   * @param {PIXI.Rectangle} baseFrame - The base frame of the texture\n   * @param {number} rotate - Rotation of frame, see {@link PIXI.GroupD8}\n   */\n\n  TextureUvs.prototype.set = function set(frame, baseFrame, rotate) {\n    var tw = baseFrame.width;\n    var th = baseFrame.height;\n    if (rotate) {\n      // width and height div 2 div baseFrame size\n      var w2 = frame.width / 2 / tw;\n      var h2 = frame.height / 2 / th;\n\n      // coordinates of center\n      var cX = frame.x / tw + w2;\n      var cY = frame.y / th + h2;\n      rotate = _GroupD2.default.add(rotate, _GroupD2.default.NW); // NW is top-left corner\n      this.x0 = cX + w2 * _GroupD2.default.uX(rotate);\n      this.y0 = cY + h2 * _GroupD2.default.uY(rotate);\n      rotate = _GroupD2.default.add(rotate, 2); // rotate 90 degrees clockwise\n      this.x1 = cX + w2 * _GroupD2.default.uX(rotate);\n      this.y1 = cY + h2 * _GroupD2.default.uY(rotate);\n      rotate = _GroupD2.default.add(rotate, 2);\n      this.x2 = cX + w2 * _GroupD2.default.uX(rotate);\n      this.y2 = cY + h2 * _GroupD2.default.uY(rotate);\n      rotate = _GroupD2.default.add(rotate, 2);\n      this.x3 = cX + w2 * _GroupD2.default.uX(rotate);\n      this.y3 = cY + h2 * _GroupD2.default.uY(rotate);\n    } else {\n      this.x0 = frame.x / tw;\n      this.y0 = frame.y / th;\n      this.x1 = (frame.x + frame.width) / tw;\n      this.y1 = frame.y / th;\n      this.x2 = (frame.x + frame.width) / tw;\n      this.y2 = (frame.y + frame.height) / th;\n      this.x3 = frame.x / tw;\n      this.y3 = (frame.y + frame.height) / th;\n    }\n    this.uvsUint32[0] = (Math.round(this.y0 * 65535) & 0xFFFF) << 16 | Math.round(this.x0 * 65535) & 0xFFFF;\n    this.uvsUint32[1] = (Math.round(this.y1 * 65535) & 0xFFFF) << 16 | Math.round(this.x1 * 65535) & 0xFFFF;\n    this.uvsUint32[2] = (Math.round(this.y2 * 65535) & 0xFFFF) << 16 | Math.round(this.x2 * 65535) & 0xFFFF;\n    this.uvsUint32[3] = (Math.round(this.y3 * 65535) & 0xFFFF) << 16 | Math.round(this.x3 * 65535) & 0xFFFF;\n  };\n  return TextureUvs;\n}();\nexports.default = TextureUvs;","map":{"version":3,"names":["_GroupD","require","TextureUvs","_classCallCheck","x0","y0","x1","y1","x2","y2","x3","y3","uvsUint32","Uint32Array","set","frame","baseFrame","rotate","tw","width","th","height","w2","h2","cX","x","cY","y","_GroupD2","default","add","NW","uX","uY","Math","round"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/textures/TextureUvs.js"],"sourcesContent":["import GroupD8 from '../math/GroupD8';\n\n/**\n * A standard object to store the Uvs of a texture\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class TextureUvs\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        this.x0 = 0;\n        this.y0 = 0;\n\n        this.x1 = 1;\n        this.y1 = 0;\n\n        this.x2 = 1;\n        this.y2 = 1;\n\n        this.x3 = 0;\n        this.y3 = 1;\n\n        this.uvsUint32 = new Uint32Array(4);\n    }\n\n    /**\n     * Sets the texture Uvs based on the given frame information.\n     *\n     * @private\n     * @param {PIXI.Rectangle} frame - The frame of the texture\n     * @param {PIXI.Rectangle} baseFrame - The base frame of the texture\n     * @param {number} rotate - Rotation of frame, see {@link PIXI.GroupD8}\n     */\n    set(frame, baseFrame, rotate)\n    {\n        const tw = baseFrame.width;\n        const th = baseFrame.height;\n\n        if (rotate)\n        {\n            // width and height div 2 div baseFrame size\n            const w2 = frame.width / 2 / tw;\n            const h2 = frame.height / 2 / th;\n\n            // coordinates of center\n            const cX = (frame.x / tw) + w2;\n            const cY = (frame.y / th) + h2;\n\n            rotate = GroupD8.add(rotate, GroupD8.NW); // NW is top-left corner\n            this.x0 = cX + (w2 * GroupD8.uX(rotate));\n            this.y0 = cY + (h2 * GroupD8.uY(rotate));\n\n            rotate = GroupD8.add(rotate, 2); // rotate 90 degrees clockwise\n            this.x1 = cX + (w2 * GroupD8.uX(rotate));\n            this.y1 = cY + (h2 * GroupD8.uY(rotate));\n\n            rotate = GroupD8.add(rotate, 2);\n            this.x2 = cX + (w2 * GroupD8.uX(rotate));\n            this.y2 = cY + (h2 * GroupD8.uY(rotate));\n\n            rotate = GroupD8.add(rotate, 2);\n            this.x3 = cX + (w2 * GroupD8.uX(rotate));\n            this.y3 = cY + (h2 * GroupD8.uY(rotate));\n        }\n        else\n        {\n            this.x0 = frame.x / tw;\n            this.y0 = frame.y / th;\n\n            this.x1 = (frame.x + frame.width) / tw;\n            this.y1 = frame.y / th;\n\n            this.x2 = (frame.x + frame.width) / tw;\n            this.y2 = (frame.y + frame.height) / th;\n\n            this.x3 = frame.x / tw;\n            this.y3 = (frame.y + frame.height) / th;\n        }\n\n        this.uvsUint32[0] = ((Math.round(this.y0 * 65535) & 0xFFFF) << 16) | (Math.round(this.x0 * 65535) & 0xFFFF);\n        this.uvsUint32[1] = ((Math.round(this.y1 * 65535) & 0xFFFF) << 16) | (Math.round(this.x1 * 65535) & 0xFFFF);\n        this.uvsUint32[2] = ((Math.round(this.y2 * 65535) & 0xFFFF) << 16) | (Math.round(this.x2 * 65535) & 0xFFFF);\n        this.uvsUint32[3] = ((Math.round(this.y3 * 65535) & 0xFFFF) << 16) | (Math.round(this.x3 * 65535) & 0xFFFF);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}