{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n *\n * @private\n * @class\n * @memberof PIXI.ticker\n */\nvar TickerListener = function () {\n  /**\n   * Constructor\n   *\n   * @param {Function} fn - The listener function to be added for one update\n   * @param {Function} [context=null] - The listener context\n   * @param {number} [priority=0] - The priority for emitting\n   * @param {boolean} [once=false] - If the handler should fire once\n   */\n  function TickerListener(fn) {\n    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var once = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    _classCallCheck(this, TickerListener);\n\n    /**\n     * The handler function to execute.\n     * @member {Function}\n     */\n    this.fn = fn;\n\n    /**\n     * The calling to execute.\n     * @member {Function}\n     */\n    this.context = context;\n\n    /**\n     * The current priority.\n     * @member {number}\n     */\n    this.priority = priority;\n\n    /**\n     * If this should only execute once.\n     * @member {boolean}\n     */\n    this.once = once;\n\n    /**\n     * The next item in chain.\n     * @member {TickerListener}\n     */\n    this.next = null;\n\n    /**\n     * The previous item in chain.\n     * @member {TickerListener}\n     */\n    this.previous = null;\n\n    /**\n     * `true` if this listener has been destroyed already.\n     * @member {boolean}\n     * @private\n     */\n    this._destroyed = false;\n  }\n\n  /**\n   * Simple compare function to figure out if a function and context match.\n   *\n   * @param {Function} fn - The listener function to be added for one update\n   * @param {Function} context - The listener context\n   * @return {boolean} `true` if the listener match the arguments\n   */\n\n  TickerListener.prototype.match = function match(fn, context) {\n    context = context || null;\n    return this.fn === fn && this.context === context;\n  };\n\n  /**\n   * Emit by calling the current function.\n   * @param {number} deltaTime - time since the last emit.\n   * @return {TickerListener} Next ticker\n   */\n\n  TickerListener.prototype.emit = function emit(deltaTime) {\n    if (this.fn) {\n      if (this.context) {\n        this.fn.call(this.context, deltaTime);\n      } else {\n        this.fn(deltaTime);\n      }\n    }\n    var redirect = this.next;\n    if (this.once) {\n      this.destroy(true);\n    }\n\n    // Soft-destroying should remove\n    // the next reference\n    if (this._destroyed) {\n      this.next = null;\n    }\n    return redirect;\n  };\n\n  /**\n   * Connect to the list.\n   * @param {TickerListener} previous - Input node, previous listener\n   */\n\n  TickerListener.prototype.connect = function connect(previous) {\n    this.previous = previous;\n    if (previous.next) {\n      previous.next.previous = this;\n    }\n    this.next = previous.next;\n    previous.next = this;\n  };\n\n  /**\n   * Destroy and don't use after this.\n   * @param {boolean} [hard = false] `true` to remove the `next` reference, this\n   *        is considered a hard destroy. Soft destroy maintains the next reference.\n   * @return {TickerListener} The listener to redirect while emitting or removing.\n   */\n\n  TickerListener.prototype.destroy = function destroy() {\n    var hard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this._destroyed = true;\n    this.fn = null;\n    this.context = null;\n\n    // Disconnect, hook up next and previous\n    if (this.previous) {\n      this.previous.next = this.next;\n    }\n    if (this.next) {\n      this.next.previous = this.previous;\n    }\n\n    // Redirect to the next item\n    var redirect = this.next;\n\n    // Remove references\n    this.next = hard ? null : redirect;\n    this.previous = null;\n    return redirect;\n  };\n  return TickerListener;\n}();\nexports.default = TickerListener;","map":{"version":3,"names":["TickerListener","fn","context","arguments","length","undefined","priority","once","_classCallCheck","next","previous","_destroyed","match","emit","deltaTime","call","redirect","destroy","connect","hard"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/ticker/TickerListener.js"],"sourcesContent":["/**\n * Internal class for handling the priority sorting of ticker handlers.\n *\n * @private\n * @class\n * @memberof PIXI.ticker\n */\nexport default class TickerListener\n{\n    /**\n     * Constructor\n     *\n     * @param {Function} fn - The listener function to be added for one update\n     * @param {Function} [context=null] - The listener context\n     * @param {number} [priority=0] - The priority for emitting\n     * @param {boolean} [once=false] - If the handler should fire once\n     */\n    constructor(fn, context = null, priority = 0, once = false)\n    {\n        /**\n         * The handler function to execute.\n         * @member {Function}\n         */\n        this.fn = fn;\n\n        /**\n         * The calling to execute.\n         * @member {Function}\n         */\n        this.context = context;\n\n        /**\n         * The current priority.\n         * @member {number}\n         */\n        this.priority = priority;\n\n        /**\n         * If this should only execute once.\n         * @member {boolean}\n         */\n        this.once = once;\n\n        /**\n         * The next item in chain.\n         * @member {TickerListener}\n         */\n        this.next = null;\n\n        /**\n         * The previous item in chain.\n         * @member {TickerListener}\n         */\n        this.previous = null;\n\n        /**\n         * `true` if this listener has been destroyed already.\n         * @member {boolean}\n         * @private\n         */\n        this._destroyed = false;\n    }\n\n    /**\n     * Simple compare function to figure out if a function and context match.\n     *\n     * @param {Function} fn - The listener function to be added for one update\n     * @param {Function} context - The listener context\n     * @return {boolean} `true` if the listener match the arguments\n     */\n    match(fn, context)\n    {\n        context = context || null;\n\n        return this.fn === fn && this.context === context;\n    }\n\n    /**\n     * Emit by calling the current function.\n     * @param {number} deltaTime - time since the last emit.\n     * @return {TickerListener} Next ticker\n     */\n    emit(deltaTime)\n    {\n        if (this.fn)\n        {\n            if (this.context)\n            {\n                this.fn.call(this.context, deltaTime);\n            }\n            else\n            {\n                this.fn(deltaTime);\n            }\n        }\n\n        const redirect = this.next;\n\n        if (this.once)\n        {\n            this.destroy(true);\n        }\n\n        // Soft-destroying should remove\n        // the next reference\n        if (this._destroyed)\n        {\n            this.next = null;\n        }\n\n        return redirect;\n    }\n\n    /**\n     * Connect to the list.\n     * @param {TickerListener} previous - Input node, previous listener\n     */\n    connect(previous)\n    {\n        this.previous = previous;\n        if (previous.next)\n        {\n            previous.next.previous = this;\n        }\n        this.next = previous.next;\n        previous.next = this;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param {boolean} [hard = false] `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @return {TickerListener} The listener to redirect while emitting or removing.\n     */\n    destroy(hard = false)\n    {\n        this._destroyed = true;\n        this.fn = null;\n        this.context = null;\n\n        // Disconnect, hook up next and previous\n        if (this.previous)\n        {\n            this.previous.next = this.next;\n        }\n\n        if (this.next)\n        {\n            this.next.previous = this.previous;\n        }\n\n        // Redirect to the next item\n        const redirect = this.next;\n\n        // Remove references\n        this.next = hard ? null : redirect;\n        this.previous = null;\n\n        return redirect;\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;;;;;;IAOqBA,c;EAEjB;;;;;;;;EAQA,SAAAA,eAAYC,EAAZ,EACA;IAAA,IADgBC,OAChB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAD0B,IAC1B;IAAA,IADgCG,QAChC,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAD2C,CAC3C;IAAA,IAD8CI,IAC9C,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADqD,KACrD;IAAAK,eAAA,OAAAR,cAAA;;IACI;;;;IAIA,KAAKC,EAAL,GAAUA,EAAV;;IAEA;;;;IAIA,KAAKC,OAAL,GAAeA,OAAf;;IAEA;;;;IAIA,KAAKI,QAAL,GAAgBA,QAAhB;;IAEA;;;;IAIA,KAAKC,IAAL,GAAYA,IAAZ;;IAEA;;;;IAIA,KAAKE,IAAL,GAAY,IAAZ;;IAEA;;;;IAIA,KAAKC,QAAL,GAAgB,IAAhB;;IAEA;;;;;IAKA,KAAKC,UAAL,GAAkB,KAAlB;EACH;;EAED;;;;;;;;2BAOAC,K,kBAAMX,E,EAAIC,O,EACV;IACIA,OAAA,GAAUA,OAAA,IAAW,IAArB;IAEA,OAAO,KAAKD,EAAL,KAAYA,EAAZ,IAAkB,KAAKC,OAAL,KAAiBA,OAA1C;EACH,C;;EAED;;;;;;2BAKAW,I,iBAAKC,S,EACL;IACI,IAAI,KAAKb,EAAT,EACA;MACI,IAAI,KAAKC,OAAT,EACA;QACI,KAAKD,EAAL,CAAQc,IAAR,CAAa,KAAKb,OAAlB,EAA2BY,SAA3B;MACH,CAHD,MAKA;QACI,KAAKb,EAAL,CAAQa,SAAR;MACH;IACJ;IAED,IAAME,QAAA,GAAW,KAAKP,IAAtB;IAEA,IAAI,KAAKF,IAAT,EACA;MACI,KAAKU,OAAL,CAAa,IAAb;IACH;;IAED;IACA;IACA,IAAI,KAAKN,UAAT,EACA;MACI,KAAKF,IAAL,GAAY,IAAZ;IACH;IAED,OAAOO,QAAP;EACH,C;;EAED;;;;;2BAIAE,O,oBAAQR,Q,EACR;IACI,KAAKA,QAAL,GAAgBA,QAAhB;IACA,IAAIA,QAAA,CAASD,IAAb,EACA;MACIC,QAAA,CAASD,IAAT,CAAcC,QAAd,GAAyB,IAAzB;IACH;IACD,KAAKD,IAAL,GAAYC,QAAA,CAASD,IAArB;IACAC,QAAA,CAASD,IAAT,GAAgB,IAAhB;EACH,C;;EAED;;;;;;;2BAMAQ,O,sBACA;IAAA,IADQE,IACR,GAAAhB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADe,KACf;IACI,KAAKQ,UAAL,GAAkB,IAAlB;IACA,KAAKV,EAAL,GAAU,IAAV;IACA,KAAKC,OAAL,GAAe,IAAf;;IAEA;IACA,IAAI,KAAKQ,QAAT,EACA;MACI,KAAKA,QAAL,CAAcD,IAAd,GAAqB,KAAKA,IAA1B;IACH;IAED,IAAI,KAAKA,IAAT,EACA;MACI,KAAKA,IAAL,CAAUC,QAAV,GAAqB,KAAKA,QAA1B;IACH;;IAED;IACA,IAAMM,QAAA,GAAW,KAAKP,IAAtB;;IAEA;IACA,KAAKA,IAAL,GAAYU,IAAA,GAAO,IAAP,GAAcH,QAA1B;IACA,KAAKN,QAAL,GAAgB,IAAhB;IAEA,OAAOM,QAAP;EACH,C;;;kBAxJgBhB,c"},"metadata":{},"sourceType":"script","externalDependencies":[]}