{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _core = require('../../core');\nvar core = _interopRequireWildcard(_core);\nvar _path = require('path');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * Simplest filter - applies alpha\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nvar AlphaFilter = function (_core$Filter) {\n  _inherits(AlphaFilter, _core$Filter);\n\n  /**\n   * @param {number} [alpha=1] Amount of alpha from 0 to 1, where 0 is transparent\n   */\n  function AlphaFilter() {\n    var alpha = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.0;\n    _classCallCheck(this, AlphaFilter);\n    var _this = _possibleConstructorReturn(this, _core$Filter.call(this,\n    // vertex shader\n    'attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}',\n    // fragment shader\n    'varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform float uAlpha;\\n\\nvoid main(void)\\n{\\n   gl_FragColor = texture2D(uSampler, vTextureCoord) * uAlpha;\\n}\\n'));\n    _this.alpha = alpha;\n    _this.glShaderKey = 'alpha';\n    return _this;\n  }\n\n  /**\n   * Coefficient for alpha multiplication\n   *\n   * @member {number}\n   * @default 1\n   */\n\n  _createClass(AlphaFilter, [{\n    key: 'alpha',\n    get: function get() {\n      return this.uniforms.uAlpha;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      this.uniforms.uAlpha = value;\n    }\n  }]);\n  return AlphaFilter;\n}(core.Filter);\nexports.default = AlphaFilter;","map":{"version":3,"names":["_core","require","core","_path","AlphaFilter","alpha","arguments","length","undefined","_classCallCheck","_this","_possibleConstructorReturn","_core$Filter","call","glShaderKey","uniforms","uAlpha","value","Filter"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/filters/alpha/AlphaFilter.js"],"sourcesContent":["import * as core from '../../core';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\n/**\n * Simplest filter - applies alpha\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class AlphaFilter extends core.Filter\n{\n    /**\n     * @param {number} [alpha=1] Amount of alpha from 0 to 1, where 0 is transparent\n     */\n    constructor(alpha = 1.0)\n    {\n        super(\n            // vertex shader\n            readFileSync(join(__dirname, '../fragments/default.vert'), 'utf8'),\n            // fragment shader\n            readFileSync(join(__dirname, './alpha.frag'), 'utf8')\n        );\n\n        this.alpha = alpha;\n        this.glShaderKey = 'alpha';\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     *\n     * @member {number}\n     * @default 1\n     */\n    get alpha()\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value) // eslint-disable-line require-jsdoc\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;IAAYC,I;AAEZ,IAAAC,KAAA,GAAAF,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;IAiBqBG,W;;;EAEjB;;;EAGA,SAAAA,YAAA,EACA;IAAA,IADYC,KACZ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADoB,GACpB;IAAAG,eAAA,OAAAL,WAAA;IAAA,IAAAM,KAAA,GAAAC,0BAAA,OACIC,YAAA,CAAAC,IAAA;IACI;IADJ;IAGI;IAHJ,+KADJ;IAQIH,KAAA,CAAKL,KAAL,GAAaA,KAAb;IACAK,KAAA,CAAKI,WAAL,GAAmB,OAAnB;IATJ,OAAAJ,KAAA;EAUC;;EAED;;;;;;;;;wBAOA;MACI,OAAO,KAAKK,QAAL,CAAcC,MAArB;IACH,C;sBAESC,K;IAAO;IACjB;MACI,KAAKF,QAAL,CAAcC,MAAd,GAAuBC,KAAvB;IACH;;;EAhCoCf,IAAA,CAAKgB,M;kBAAzBd,W"},"metadata":{},"sourceType":"script","externalDependencies":[]}