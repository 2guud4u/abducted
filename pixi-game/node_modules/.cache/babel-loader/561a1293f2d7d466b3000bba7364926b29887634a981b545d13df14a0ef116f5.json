{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _core = require('../../core');\nvar core = _interopRequireWildcard(_core);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar TEMP_RECT = new core.Rectangle();\nvar BYTES_PER_PIXEL = 4;\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.extract\n *\n * @class\n * @memberof PIXI.extract\n */\n\nvar WebGLExtract = function () {\n  /**\n   * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer\n   */\n  function WebGLExtract(renderer) {\n    _classCallCheck(this, WebGLExtract);\n    this.renderer = renderer;\n    /**\n     * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n     *\n     * @member {PIXI.extract.WebGLExtract} extract\n     * @memberof PIXI.WebGLRenderer#\n     * @see PIXI.extract.WebGLExtract\n     */\n    renderer.extract = this;\n  }\n\n  /**\n   * Will return a HTML Image of the target\n   *\n   * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n   *  to convert. If left empty will use use the main renderer\n   * @return {HTMLImageElement} HTML Image of the target\n   */\n\n  WebGLExtract.prototype.image = function image(target) {\n    var image = new Image();\n    image.src = this.base64(target);\n    return image;\n  };\n\n  /**\n   * Will return a a base64 encoded string of this target. It works by calling\n   *  `WebGLExtract.getCanvas` and then running toDataURL on that.\n   *\n   * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n   *  to convert. If left empty will use use the main renderer\n   * @return {string} A base64 encoded string of the texture.\n   */\n\n  WebGLExtract.prototype.base64 = function base64(target) {\n    return this.canvas(target).toDataURL();\n  };\n\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   *\n   * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n   *  to convert. If left empty will use use the main renderer\n   * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n   */\n\n  WebGLExtract.prototype.canvas = function canvas(target) {\n    var renderer = this.renderer;\n    var textureBuffer = void 0;\n    var resolution = void 0;\n    var frame = void 0;\n    var flipY = false;\n    var renderTexture = void 0;\n    var generated = false;\n    if (target) {\n      if (target instanceof core.RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = this.renderer.generateTexture(target);\n        generated = true;\n      }\n    }\n    if (renderTexture) {\n      textureBuffer = renderTexture.baseTexture._glRenderTargets[this.renderer.CONTEXT_UID];\n      resolution = textureBuffer.resolution;\n      frame = renderTexture.frame;\n      flipY = false;\n    } else {\n      textureBuffer = this.renderer.rootRenderTarget;\n      resolution = textureBuffer.resolution;\n      flipY = true;\n      frame = TEMP_RECT;\n      frame.width = textureBuffer.size.width;\n      frame.height = textureBuffer.size.height;\n    }\n    var width = Math.floor(frame.width * resolution + 1e-4);\n    var height = Math.floor(frame.height * resolution + 1e-4);\n    var canvasBuffer = new core.CanvasRenderTarget(width, height, 1);\n    if (textureBuffer) {\n      // bind the buffer\n      renderer.bindRenderTarget(textureBuffer);\n\n      // set up an array of pixels\n      var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n      // read pixels to the array\n      var gl = renderer.gl;\n      gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n\n      // add the pixels to the canvas\n      var canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n      canvasData.data.set(webglPixels);\n      canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n      // pulling pixels\n      if (flipY) {\n        canvasBuffer.context.scale(1, -1);\n        canvasBuffer.context.drawImage(canvasBuffer.canvas, 0, -height);\n      }\n    }\n    if (generated) {\n      renderTexture.destroy(true);\n    }\n    // send the canvas back..\n\n    return canvasBuffer.canvas;\n  };\n\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   *\n   * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n   *  to convert. If left empty will use use the main renderer\n   * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture\n   */\n\n  WebGLExtract.prototype.pixels = function pixels(target) {\n    var renderer = this.renderer;\n    var textureBuffer = void 0;\n    var resolution = void 0;\n    var frame = void 0;\n    var renderTexture = void 0;\n    var generated = false;\n    if (target) {\n      if (target instanceof core.RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = this.renderer.generateTexture(target);\n        generated = true;\n      }\n    }\n    if (renderTexture) {\n      textureBuffer = renderTexture.baseTexture._glRenderTargets[this.renderer.CONTEXT_UID];\n      resolution = textureBuffer.resolution;\n      frame = renderTexture.frame;\n    } else {\n      textureBuffer = this.renderer.rootRenderTarget;\n      resolution = textureBuffer.resolution;\n      frame = TEMP_RECT;\n      frame.width = textureBuffer.size.width;\n      frame.height = textureBuffer.size.height;\n    }\n    var width = frame.width * resolution;\n    var height = frame.height * resolution;\n    var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n    if (textureBuffer) {\n      // bind the buffer\n      renderer.bindRenderTarget(textureBuffer);\n      // read pixels to the array\n      var gl = renderer.gl;\n      gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n    }\n    if (generated) {\n      renderTexture.destroy(true);\n    }\n    return webglPixels;\n  };\n\n  /**\n   * Destroys the extract\n   *\n   */\n\n  WebGLExtract.prototype.destroy = function destroy() {\n    this.renderer.extract = null;\n    this.renderer = null;\n  };\n  return WebGLExtract;\n}();\nexports.default = WebGLExtract;\ncore.WebGLRenderer.registerPlugin('extract', WebGLExtract);","map":{"version":3,"names":["_core","require","core","TEMP_RECT","Rectangle","BYTES_PER_PIXEL","WebGLExtract","renderer","_classCallCheck","extract","image","target","Image","src","base64","canvas","toDataURL","textureBuffer","resolution","frame","flipY","renderTexture","generated","RenderTexture","generateTexture","baseTexture","_glRenderTargets","CONTEXT_UID","rootRenderTarget","width","size","height","Math","floor","canvasBuffer","CanvasRenderTarget","bindRenderTarget","webglPixels","Uint8Array","gl","readPixels","x","y","RGBA","UNSIGNED_BYTE","canvasData","context","getImageData","data","set","putImageData","scale","drawImage","destroy","pixels","WebGLRenderer","registerPlugin"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/extract/webgl/WebGLExtract.js"],"sourcesContent":["import * as core from '../../core';\n\nconst TEMP_RECT = new core.Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.extract\n *\n * @class\n * @memberof PIXI.extract\n */\nexport default class WebGLExtract\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n        /**\n         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n         *\n         * @member {PIXI.extract.WebGLExtract} extract\n         * @memberof PIXI.WebGLRenderer#\n         * @see PIXI.extract.WebGLExtract\n         */\n        renderer.extract = this;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use use the main renderer\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    image(target)\n    {\n        const image = new Image();\n\n        image.src = this.base64(target);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `WebGLExtract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use use the main renderer\n     * @return {string} A base64 encoded string of the texture.\n     */\n    base64(target)\n    {\n        return this.canvas(target).toDataURL();\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    canvas(target)\n    {\n        const renderer = this.renderer;\n        let textureBuffer;\n        let resolution;\n        let frame;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof core.RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            textureBuffer = renderTexture.baseTexture._glRenderTargets[this.renderer.CONTEXT_UID];\n            resolution = textureBuffer.resolution;\n            frame = renderTexture.frame;\n            flipY = false;\n        }\n        else\n        {\n            textureBuffer = this.renderer.rootRenderTarget;\n            resolution = textureBuffer.resolution;\n            flipY = true;\n\n            frame = TEMP_RECT;\n            frame.width = textureBuffer.size.width;\n            frame.height = textureBuffer.size.height;\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        const canvasBuffer = new core.CanvasRenderTarget(width, height, 1);\n\n        if (textureBuffer)\n        {\n            // bind the buffer\n            renderer.bindRenderTarget(textureBuffer);\n\n            // set up an array of pixels\n            const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n            // read pixels to the array\n            const gl = renderer.gl;\n\n            gl.readPixels(\n                frame.x * resolution,\n                frame.y * resolution,\n                width,\n                height,\n                gl.RGBA,\n                gl.UNSIGNED_BYTE,\n                webglPixels\n            );\n\n            // add the pixels to the canvas\n            const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n            canvasData.data.set(webglPixels);\n\n            canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n            // pulling pixels\n            if (flipY)\n            {\n                canvasBuffer.context.scale(1, -1);\n                canvasBuffer.context.drawImage(canvasBuffer.canvas, 0, -height);\n            }\n        }\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n        // send the canvas back..\n\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use use the main renderer\n     * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture\n     */\n    pixels(target)\n    {\n        const renderer = this.renderer;\n        let textureBuffer;\n        let resolution;\n        let frame;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof core.RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            textureBuffer = renderTexture.baseTexture._glRenderTargets[this.renderer.CONTEXT_UID];\n            resolution = textureBuffer.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            textureBuffer = this.renderer.rootRenderTarget;\n            resolution = textureBuffer.resolution;\n\n            frame = TEMP_RECT;\n            frame.width = textureBuffer.size.width;\n            frame.height = textureBuffer.size.height;\n        }\n\n        const width = frame.width * resolution;\n        const height = frame.height * resolution;\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        if (textureBuffer)\n        {\n            // bind the buffer\n            renderer.bindRenderTarget(textureBuffer);\n            // read pixels to the array\n            const gl = renderer.gl;\n\n            gl.readPixels(\n                frame.x * resolution,\n                frame.y * resolution,\n                width,\n                height,\n                gl.RGBA,\n                gl.UNSIGNED_BYTE,\n                webglPixels\n            );\n        }\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        return webglPixels;\n    }\n\n    /**\n     * Destroys the extract\n     *\n     */\n    destroy()\n    {\n        this.renderer.extract = null;\n        this.renderer = null;\n    }\n}\n\ncore.WebGLRenderer.registerPlugin('extract', WebGLExtract);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}