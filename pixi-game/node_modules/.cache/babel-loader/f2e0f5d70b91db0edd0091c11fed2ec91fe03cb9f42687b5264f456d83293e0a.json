{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberOf PIXI\n */\nvar TextMetrics = function () {\n  /**\n   * @param {string} text - the text that was measured\n   * @param {PIXI.TextStyle} style - the style that was measured\n   * @param {number} width - the measured width of the text\n   * @param {number} height - the measured height of the text\n   * @param {array} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n   * @param {array} lineWidths - an array of the line widths for each line matched to `lines`\n   * @param {number} lineHeight - the measured line height for this style\n   * @param {number} maxLineWidth - the maximum line width for all measured lines\n   * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n   */\n  function TextMetrics(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n    _classCallCheck(this, TextMetrics);\n    this.text = text;\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.lines = lines;\n    this.lineWidths = lineWidths;\n    this.lineHeight = lineHeight;\n    this.maxLineWidth = maxLineWidth;\n    this.fontProperties = fontProperties;\n  }\n\n  /**\n   * Measures the supplied string of text and returns a Rectangle.\n   *\n   * @param {string} text - the text to measure.\n   * @param {PIXI.TextStyle} style - the text style to use for measuring\n   * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n   * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n   * @return {PIXI.TextMetrics} measured width and height of the text.\n   */\n\n  TextMetrics.measureText = function measureText(text, style, wordWrap) {\n    var canvas = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TextMetrics._canvas;\n    wordWrap = wordWrap === undefined || wordWrap === null ? style.wordWrap : wordWrap;\n    var font = style.toFontString();\n    var fontProperties = TextMetrics.measureFont(font);\n    var context = canvas.getContext('2d');\n    context.font = font;\n    var outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n    var lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n    var lineWidths = new Array(lines.length);\n    var maxLineWidth = 0;\n    for (var i = 0; i < lines.length; i++) {\n      var lineWidth = context.measureText(lines[i]).width + (lines[i].length - 1) * style.letterSpacing;\n      lineWidths[i] = lineWidth;\n      maxLineWidth = Math.max(maxLineWidth, lineWidth);\n    }\n    var width = maxLineWidth + style.strokeThickness;\n    if (style.dropShadow) {\n      width += style.dropShadowDistance;\n    }\n    var lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n    var height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness) + (lines.length - 1) * (lineHeight + style.leading);\n    if (style.dropShadow) {\n      height += style.dropShadowDistance;\n    }\n    return new TextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);\n  };\n\n  /**\n   * Applies newlines to a string to have it optimally fit into the horizontal\n   * bounds set by the Text object's wordWrapWidth property.\n   *\n   * @private\n   * @param {string} text - String to apply word wrapping to\n   * @param {PIXI.TextStyle} style - the style to use when wrapping\n   * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n   * @return {string} New string with new lines applied where required\n   */\n\n  TextMetrics.wordWrap = function wordWrap(text, style) {\n    var canvas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TextMetrics._canvas;\n    var context = canvas.getContext('2d');\n    var width = 0;\n    var line = '';\n    var lines = '';\n    var cache = {};\n    var letterSpacing = style.letterSpacing,\n      whiteSpace = style.whiteSpace;\n\n    // How to handle whitespaces\n\n    var collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n    var collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n    // whether or not spaces may be added to the beginning of lines\n    var canPrependSpaces = !collapseSpaces;\n\n    // There is letterSpacing after every char except the last one\n    // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n    // so for convenience the above needs to be compared to width + 1 extra letterSpace\n    // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n    // ________________________________________________\n    // And then the final space is simply no appended to each line\n    var wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n    // break text into words, spaces and newline chars\n    var tokens = TextMetrics.tokenize(text);\n    for (var i = 0; i < tokens.length; i++) {\n      // get the word, space or newlineChar\n      var token = tokens[i];\n\n      // if word is a new line\n      if (TextMetrics.isNewline(token)) {\n        // keep the new line\n        if (!collapseNewlines) {\n          lines += TextMetrics.addLine(line);\n          canPrependSpaces = !collapseSpaces;\n          line = '';\n          width = 0;\n          continue;\n        }\n\n        // if we should collapse new lines\n        // we simply convert it into a space\n        token = ' ';\n      }\n\n      // if we should collapse repeated whitespaces\n      if (collapseSpaces) {\n        // check both this and the last tokens for spaces\n        var currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n        var lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n        if (currIsBreakingSpace && lastIsBreakingSpace) {\n          continue;\n        }\n      }\n\n      // get word width from cache if possible\n      var tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n      // word is longer than desired bounds\n      if (tokenWidth > wordWrapWidth) {\n        // if we are not already at the beginning of a line\n        if (line !== '') {\n          // start newlines for overflow words\n          lines += TextMetrics.addLine(line);\n          line = '';\n          width = 0;\n        }\n\n        // break large word over multiple lines\n        if (TextMetrics.canBreakWords(token, style.breakWords)) {\n          // break word into characters\n          var characters = token.split('');\n\n          // loop the characters\n          for (var j = 0; j < characters.length; j++) {\n            var char = characters[j];\n            var k = 1;\n            // we are not at the end of the token\n\n            while (characters[j + k]) {\n              var nextChar = characters[j + k];\n              var lastChar = char[char.length - 1];\n\n              // should not split chars\n              if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                // combine chars & move forward one\n                char += nextChar;\n              } else {\n                break;\n              }\n              k++;\n            }\n            j += char.length - 1;\n            var characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n            if (characterWidth + width > wordWrapWidth) {\n              lines += TextMetrics.addLine(line);\n              canPrependSpaces = false;\n              line = '';\n              width = 0;\n            }\n            line += char;\n            width += characterWidth;\n          }\n        }\n\n        // run word out of the bounds\n        else {\n          // if there are words in this line already\n          // finish that line and start a new one\n          if (line.length > 0) {\n            lines += TextMetrics.addLine(line);\n            line = '';\n            width = 0;\n          }\n          var isLastToken = i === tokens.length - 1;\n\n          // give it its own line if it's not the end\n          lines += TextMetrics.addLine(token, !isLastToken);\n          canPrependSpaces = false;\n          line = '';\n          width = 0;\n        }\n      }\n\n      // word could fit\n      else {\n        // word won't fit because of existing words\n        // start a new line\n        if (tokenWidth + width > wordWrapWidth) {\n          // if its a space we don't want it\n          canPrependSpaces = false;\n\n          // add a new line\n          lines += TextMetrics.addLine(line);\n\n          // start a new line\n          line = '';\n          width = 0;\n        }\n\n        // don't add spaces to the beginning of lines\n        if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n          // add the word to the current line\n          line += token;\n\n          // update width counter\n          width += tokenWidth;\n        }\n      }\n    }\n    lines += TextMetrics.addLine(line, false);\n    return lines;\n  };\n\n  /**\n   * Convienience function for logging each line added during the wordWrap\n   * method\n   *\n   * @private\n   * @param  {string}   line        - The line of text to add\n   * @param  {boolean}  newLine     - Add new line character to end\n   * @return {string}   A formatted line\n   */\n\n  TextMetrics.addLine = function addLine(line) {\n    var newLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    line = TextMetrics.trimRight(line);\n    line = newLine ? line + '\\n' : line;\n    return line;\n  };\n\n  /**\n   * Gets & sets the widths of calculated characters in a cache object\n   *\n   * @private\n   * @param  {string}                    key            The key\n   * @param  {number}                    letterSpacing  The letter spacing\n   * @param  {object}                    cache          The cache\n   * @param  {CanvasRenderingContext2D}  context        The canvas context\n   * @return {number}                    The from cache.\n   */\n\n  TextMetrics.getFromCache = function getFromCache(key, letterSpacing, cache, context) {\n    var width = cache[key];\n    if (width === undefined) {\n      var spacing = key.length * letterSpacing;\n      width = context.measureText(key).width + spacing;\n      cache[key] = width;\n    }\n    return width;\n  };\n\n  /**\n   * Determines whether we should collapse breaking spaces\n   *\n   * @private\n   * @param  {string}   whiteSpace  The TextStyle property whiteSpace\n   * @return {boolean}  should collapse\n   */\n\n  TextMetrics.collapseSpaces = function collapseSpaces(whiteSpace) {\n    return whiteSpace === 'normal' || whiteSpace === 'pre-line';\n  };\n\n  /**\n   * Determines whether we should collapse newLine chars\n   *\n   * @private\n   * @param  {string}   whiteSpace  The white space\n   * @return {boolean}  should collapse\n   */\n\n  TextMetrics.collapseNewlines = function collapseNewlines(whiteSpace) {\n    return whiteSpace === 'normal';\n  };\n\n  /**\n   * trims breaking whitespaces from string\n   *\n   * @private\n   * @param  {string}  text  The text\n   * @return {string}  trimmed string\n   */\n\n  TextMetrics.trimRight = function trimRight(text) {\n    if (typeof text !== 'string') {\n      return '';\n    }\n    for (var i = text.length - 1; i >= 0; i--) {\n      var char = text[i];\n      if (!TextMetrics.isBreakingSpace(char)) {\n        break;\n      }\n      text = text.slice(0, -1);\n    }\n    return text;\n  };\n\n  /**\n   * Determines if char is a newline.\n   *\n   * @private\n   * @param  {string}  char  The character\n   * @return {boolean}  True if newline, False otherwise.\n   */\n\n  TextMetrics.isNewline = function isNewline(char) {\n    if (typeof char !== 'string') {\n      return false;\n    }\n    return TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0;\n  };\n\n  /**\n   * Determines if char is a breaking whitespace.\n   *\n   * @private\n   * @param  {string}  char  The character\n   * @return {boolean}  True if whitespace, False otherwise.\n   */\n\n  TextMetrics.isBreakingSpace = function isBreakingSpace(char) {\n    if (typeof char !== 'string') {\n      return false;\n    }\n    return TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0;\n  };\n\n  /**\n   * Splits a string into words, breaking-spaces and newLine characters\n   *\n   * @private\n   * @param  {string}  text       The text\n   * @return {array}  A tokenized array\n   */\n\n  TextMetrics.tokenize = function tokenize(text) {\n    var tokens = [];\n    var token = '';\n    if (typeof text !== 'string') {\n      return tokens;\n    }\n    for (var i = 0; i < text.length; i++) {\n      var char = text[i];\n      if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char)) {\n        if (token !== '') {\n          tokens.push(token);\n          token = '';\n        }\n        tokens.push(char);\n        continue;\n      }\n      token += char;\n    }\n    if (token !== '') {\n      tokens.push(token);\n    }\n    return tokens;\n  };\n\n  /**\n   * This method exists to be easily overridden\n   * It allows one to customise which words should break\n   * Examples are if the token is CJK or numbers.\n   * It must return a boolean.\n   *\n   * @private\n   * @param  {string}  token       The token\n   * @param  {boolean}  breakWords  The style attr break words\n   * @return {boolean} whether to break word or not\n   */\n\n  TextMetrics.canBreakWords = function canBreakWords(token, breakWords) {\n    return breakWords;\n  };\n\n  /**\n   * This method exists to be easily overridden\n   * It allows one to determine whether a pair of characters\n   * should be broken by newlines\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   *\n   * @private\n   * @param  {string}  char      The character\n   * @param  {string}  nextChar  The next character\n   * @param  {string}  token     The token/word the characters are from\n   * @param  {number}  index     The index in the token of the char\n   * @param  {boolean}  breakWords  The style attr break words\n   * @return {boolean} whether to break word or not\n   */\n\n  TextMetrics.canBreakChars = function canBreakChars(char, nextChar, token, index, breakWords)\n  // eslint-disable-line no-unused-vars\n  {\n    return true;\n  };\n\n  /**\n   * Calculates the ascent, descent and fontSize of a given font-style\n   *\n   * @static\n   * @param {string} font - String representing the style of the font\n   * @return {PIXI.TextMetrics~FontMetrics} Font properties object\n   */\n\n  TextMetrics.measureFont = function measureFont(font) {\n    // as this method is used for preparing assets, don't recalculate things if we don't need to\n    if (TextMetrics._fonts[font]) {\n      return TextMetrics._fonts[font];\n    }\n    var properties = {};\n    var canvas = TextMetrics._canvas;\n    var context = TextMetrics._context;\n    context.font = font;\n    var metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n    var width = Math.ceil(context.measureText(metricsString).width);\n    var baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n    var height = 2 * baseline;\n    baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n    canvas.width = width;\n    canvas.height = height;\n    context.fillStyle = '#f00';\n    context.fillRect(0, 0, width, height);\n    context.font = font;\n    context.textBaseline = 'alphabetic';\n    context.fillStyle = '#000';\n    context.fillText(metricsString, 0, baseline);\n    var imagedata = context.getImageData(0, 0, width, height).data;\n    var pixels = imagedata.length;\n    var line = width * 4;\n    var i = 0;\n    var idx = 0;\n    var stop = false;\n\n    // ascent. scan from top to bottom until we find a non red pixel\n    for (i = 0; i < baseline; ++i) {\n      for (var j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n      if (!stop) {\n        idx += line;\n      } else {\n        break;\n      }\n    }\n    properties.ascent = baseline - i;\n    idx = pixels - line;\n    stop = false;\n\n    // descent. scan from bottom to top until we find a non red pixel\n    for (i = height; i > baseline; --i) {\n      for (var _j = 0; _j < line; _j += 4) {\n        if (imagedata[idx + _j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n      if (!stop) {\n        idx -= line;\n      } else {\n        break;\n      }\n    }\n    properties.descent = i - baseline;\n    properties.fontSize = properties.ascent + properties.descent;\n    TextMetrics._fonts[font] = properties;\n    return properties;\n  };\n\n  /**\n   * Clear font metrics in metrics cache.\n   *\n   * @static\n   * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n   */\n\n  TextMetrics.clearMetrics = function clearMetrics() {\n    var font = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    if (font) {\n      delete TextMetrics._fonts[font];\n    } else {\n      TextMetrics._fonts = {};\n    }\n  };\n  return TextMetrics;\n}();\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @class FontMetrics\n * @memberof PIXI.TextMetrics~\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n */\n\nexports.default = TextMetrics;\nvar canvas = document.createElement('canvas');\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of PIXI.TextMetrics~FontMetrics objects.\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |Éq\n */\nTextMetrics.METRICS_STRING = '|Éq';\n\n/**\n * Baseline symbol for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Cache of new line chars.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [0x000A,\n// line feed\n0x000D];\n\n/**\n * Cache of breaking spaces.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [0x0009,\n// character tabulation\n0x0020,\n// space\n0x2000,\n// en quad\n0x2001,\n// em quad\n0x2002,\n// en space\n0x2003,\n// em space\n0x2004,\n// three-per-em space\n0x2005,\n// four-per-em space\n0x2006,\n// six-per-em space\n0x2008,\n// punctuation space\n0x2009,\n// thin space\n0x200A,\n// hair space\n0x205F,\n// medium mathematical space\n0x3000];","map":{"version":3,"names":["TextMetrics","text","style","width","height","lines","lineWidths","lineHeight","maxLineWidth","fontProperties","_classCallCheck","measureText","wordWrap","canvas","arguments","length","undefined","_canvas","font","toFontString","measureFont","context","getContext","outputText","split","Array","i","lineWidth","letterSpacing","Math","max","strokeThickness","dropShadow","dropShadowDistance","fontSize","leading","line","cache","whiteSpace","collapseSpaces","collapseNewlines","canPrependSpaces","wordWrapWidth","tokens","tokenize","token","isNewline","addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","getFromCache","canBreakWords","breakWords","characters","j","char","k","nextChar","lastChar","canBreakChars","characterWidth","isLastToken","newLine","trimRight","key","spacing","slice","_newlines","indexOf","charCodeAt","_breakingSpaces","push","index","_fonts","properties","_context","metricsString","METRICS_STRING","BASELINE_SYMBOL","ceil","baseline","BASELINE_MULTIPLIER","fillStyle","fillRect","textBaseline","fillText","imagedata","getImageData","data","pixels","idx","stop","ascent","_j","descent","clearMetrics","document","createElement"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/text/TextMetrics.js"],"sourcesContent":["/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberOf PIXI\n */\nexport default class TextMetrics\n{\n    /**\n     * @param {string} text - the text that was measured\n     * @param {PIXI.TextStyle} style - the style that was measured\n     * @param {number} width - the measured width of the text\n     * @param {number} height - the measured height of the text\n     * @param {array} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param {array} lineWidths - an array of the line widths for each line matched to `lines`\n     * @param {number} lineHeight - the measured line height for this style\n     * @param {number} maxLineWidth - the maximum line width for all measured lines\n     * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param {string} text - the text to measure.\n     * @param {PIXI.TextStyle} style - the text style to use for measuring\n     * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {PIXI.TextMetrics} measured width and height of the text.\n     */\n    static measureText(text, style, wordWrap, canvas = TextMetrics._canvas)\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n        const context = canvas.getContext('2d');\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @private\n     * @param {string} text - String to apply word wrapping to\n     * @param {PIXI.TextStyle} style - the style to use when wrapping\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {string} New string with new lines applied where required\n     */\n    static wordWrap(text, style, canvas = TextMetrics._canvas)\n    {\n        const context = canvas.getContext('2d');\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache = {};\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = token.split('');\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                   // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap\n     * method\n     *\n     * @private\n     * @param  {string}   line        - The line of text to add\n     * @param  {boolean}  newLine     - Add new line character to end\n     * @return {string}   A formatted line\n     */\n    static addLine(line, newLine = true)\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @private\n     * @param  {string}                    key            The key\n     * @param  {number}                    letterSpacing  The letter spacing\n     * @param  {object}                    cache          The cache\n     * @param  {CanvasRenderingContext2D}  context        The canvas context\n     * @return {number}                    The from cache.\n     */\n    static getFromCache(key, letterSpacing, cache, context)\n    {\n        let width = cache[key];\n\n        if (width === undefined)\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces\n     *\n     * @private\n     * @param  {string}   whiteSpace  The TextStyle property whiteSpace\n     * @return {boolean}  should collapse\n     */\n    static collapseSpaces(whiteSpace)\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars\n     *\n     * @private\n     * @param  {string}   whiteSpace  The white space\n     * @return {boolean}  should collapse\n     */\n    static collapseNewlines(whiteSpace)\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * trims breaking whitespaces from string\n     *\n     * @private\n     * @param  {string}  text  The text\n     * @return {string}  trimmed string\n     */\n    static trimRight(text)\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if newline, False otherwise.\n     */\n    static isNewline(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @private\n     * @param  {string}  text       The text\n     * @return {array}  A tokenized array\n     */\n    static tokenize(text)\n    {\n        const tokens = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n\n            if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * This method exists to be easily overridden\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @private\n     * @param  {string}  token       The token\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakWords(token, breakWords)\n    {\n        return breakWords;\n    }\n\n    /**\n     * This method exists to be easily overridden\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @private\n     * @param  {string}  char      The character\n     * @param  {string}  nextChar  The next character\n     * @param  {string}  token     The token/word the characters are from\n     * @param  {number}  index     The index in the token of the char\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakChars(char, nextChar, token, index, breakWords) // eslint-disable-line no-unused-vars\n    {\n        return true;\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @static\n     * @param {string} font - String representing the style of the font\n     * @return {PIXI.TextMetrics~FontMetrics} Font properties object\n     */\n    static measureFont(font)\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties = {};\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = 2 * baseline;\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @static\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    static clearMetrics(font = '')\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n * @class FontMetrics\n * @memberof PIXI.TextMetrics~\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n */\n\nconst canvas = document.createElement('canvas');\n\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of PIXI.TextMetrics~FontMetrics objects.\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |Éq\n */\nTextMetrics.METRICS_STRING = '|Éq';\n\n/**\n * Baseline symbol for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Cache of new line chars.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}