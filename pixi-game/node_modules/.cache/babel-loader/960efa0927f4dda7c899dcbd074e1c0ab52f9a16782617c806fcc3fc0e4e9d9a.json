{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.parse = parse;\nexports.default = function () {\n  return function bitmapFontParser(resource, next) {\n    // skip if no data or not xml data\n    if (!resource.data || resource.type !== _resourceLoader.Resource.TYPE.XML) {\n      next();\n      return;\n    }\n\n    // skip if not bitmap font data, using some silly duck-typing\n    if (resource.data.getElementsByTagName('page').length === 0 || resource.data.getElementsByTagName('info').length === 0 || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null) {\n      next();\n      return;\n    }\n    var xmlUrl = !resource.isDataUrl ? path.dirname(resource.url) : '';\n    if (resource.isDataUrl) {\n      if (xmlUrl === '.') {\n        xmlUrl = '';\n      }\n      if (this.baseUrl && xmlUrl) {\n        // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n        if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/') {\n          xmlUrl += '/';\n        }\n      }\n    }\n\n    // remove baseUrl from xmlUrl\n    xmlUrl = xmlUrl.replace(this.baseUrl, '');\n\n    // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n    if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/') {\n      xmlUrl += '/';\n    }\n    var pages = resource.data.getElementsByTagName('page');\n    var textures = {};\n\n    // Handle completed, when the number of textures\n    // load is the same number as references in the fnt file\n    var completed = function completed(page) {\n      textures[page.metadata.pageFile] = page.texture;\n      if (Object.keys(textures).length === pages.length) {\n        parse(resource, textures);\n        next();\n      }\n    };\n    for (var i = 0; i < pages.length; ++i) {\n      var pageFile = pages[i].getAttribute('file');\n      var url = xmlUrl + pageFile;\n      var exists = false;\n\n      // incase the image is loaded outside\n      // using the same loader, resource will be available\n      for (var name in this.resources) {\n        var bitmapResource = this.resources[name];\n        if (bitmapResource.url === url) {\n          bitmapResource.metadata.pageFile = pageFile;\n          if (bitmapResource.texture) {\n            completed(bitmapResource);\n          } else {\n            bitmapResource.onAfterMiddleware.add(completed);\n          }\n          exists = true;\n          break;\n        }\n      }\n\n      // texture is not loaded, we'll attempt to add\n      // it to the load and add the texture to the list\n      if (!exists) {\n        // Standard loading options for images\n        var options = {\n          crossOrigin: resource.crossOrigin,\n          loadType: _resourceLoader.Resource.LOAD_TYPE.IMAGE,\n          metadata: Object.assign({\n            pageFile: pageFile\n          }, resource.metadata.imageMetadata),\n          parentResource: resource\n        };\n        this.add(url, options, completed);\n      }\n    }\n  };\n};\nvar _path = require('path');\nvar path = _interopRequireWildcard(_path);\nvar _resourceLoader = require('resource-loader');\nvar _extras = require('../extras');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\n/**\n * Register a BitmapText font from loader resource.\n *\n * @function parseBitmapFontData\n * @memberof PIXI.loaders\n * @param {PIXI.loaders.Resource} resource - Loader resource.\n * @param {PIXI.Texture|PIXI.Texture[]} textures - List of textures for each page.\n */\nfunction parse(resource, textures) {\n  resource.bitmapFont = _extras.BitmapText.registerFont(resource.data, textures);\n}","map":{"version":3,"names":["parse","bitmapFontParser","resource","next","data","type","_resourceLoader","Resource","TYPE","XML","getElementsByTagName","length","getAttribute","xmlUrl","isDataUrl","path","dirname","url","baseUrl","charAt","replace","pages","textures","completed","page","metadata","pageFile","texture","Object","keys","i","exists","name","resources","bitmapResource","onAfterMiddleware","add","options","crossOrigin","loadType","LOAD_TYPE","IMAGE","assign","imageMetadata","parentResource","_path","require","_extras","bitmapFont","BitmapText","registerFont"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/loaders/bitmapFontParser.js"],"sourcesContent":["import * as path from 'path';\nimport { Resource } from 'resource-loader';\nimport { BitmapText } from '../extras';\n\n/**\n * Register a BitmapText font from loader resource.\n *\n * @function parseBitmapFontData\n * @memberof PIXI.loaders\n * @param {PIXI.loaders.Resource} resource - Loader resource.\n * @param {PIXI.Texture|PIXI.Texture[]} textures - List of textures for each page.\n */\nexport function parse(resource, textures)\n{\n    resource.bitmapFont = BitmapText.registerFont(resource.data, textures);\n}\n\nexport default function ()\n{\n    return function bitmapFontParser(resource, next)\n    {\n        // skip if no data or not xml data\n        if (!resource.data || resource.type !== Resource.TYPE.XML)\n        {\n            next();\n\n            return;\n        }\n\n        // skip if not bitmap font data, using some silly duck-typing\n        if (resource.data.getElementsByTagName('page').length === 0\n            || resource.data.getElementsByTagName('info').length === 0\n            || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null\n        )\n        {\n            next();\n\n            return;\n        }\n\n        let xmlUrl = !resource.isDataUrl ? path.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (xmlUrl === '.')\n            {\n                xmlUrl = '';\n            }\n\n            if (this.baseUrl && xmlUrl)\n            {\n                // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n                if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/')\n                {\n                    xmlUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from xmlUrl\n        xmlUrl = xmlUrl.replace(this.baseUrl, '');\n\n        // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/')\n        {\n            xmlUrl += '/';\n        }\n\n        const pages = resource.data.getElementsByTagName('page');\n        const textures = {};\n\n        // Handle completed, when the number of textures\n        // load is the same number as references in the fnt file\n        const completed = (page) =>\n        {\n            textures[page.metadata.pageFile] = page.texture;\n\n            if (Object.keys(textures).length === pages.length)\n            {\n                parse(resource, textures);\n                next();\n            }\n        };\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].getAttribute('file');\n            const url = xmlUrl + pageFile;\n            let exists = false;\n\n            // incase the image is loaded outside\n            // using the same loader, resource will be available\n            for (const name in this.resources)\n            {\n                const bitmapResource = this.resources[name];\n\n                if (bitmapResource.url === url)\n                {\n                    bitmapResource.metadata.pageFile = pageFile;\n                    if (bitmapResource.texture)\n                    {\n                        completed(bitmapResource);\n                    }\n                    else\n                    {\n                        bitmapResource.onAfterMiddleware.add(completed);\n                    }\n                    exists = true;\n                    break;\n                }\n            }\n\n            // texture is not loaded, we'll attempt to add\n            // it to the load and add the texture to the list\n            if (!exists)\n            {\n                // Standard loading options for images\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: Resource.LOAD_TYPE.IMAGE,\n                    metadata: Object.assign(\n                        { pageFile },\n                        resource.metadata.imageMetadata\n                    ),\n                    parentResource: resource,\n                };\n\n                this.add(url, options, completed);\n            }\n        }\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}