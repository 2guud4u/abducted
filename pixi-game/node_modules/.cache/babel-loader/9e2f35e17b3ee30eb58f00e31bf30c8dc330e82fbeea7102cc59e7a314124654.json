{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = generateMultiTextureShader;\nvar _Shader = require('../../Shader');\nvar _Shader2 = _interopRequireDefault(_Shader);\nvar _path = require('path');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar fragTemplate = ['varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'varying float vTextureId;', 'uniform sampler2D uSamplers[%count%];', 'void main(void){', 'vec4 color;', '%forloop%', 'gl_FragColor = color * vColor;', '}'].join('\\n');\nfunction generateMultiTextureShader(gl, maxTextures) {\n  var vertexSrc = 'precision highp float;\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\nattribute float aTextureId;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\nvarying float vTextureId;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = aTextureCoord;\\n    vTextureId = aTextureId;\\n    vColor = aColor;\\n}\\n';\n  var fragmentSrc = fragTemplate;\n  fragmentSrc = fragmentSrc.replace(/%count%/gi, maxTextures);\n  fragmentSrc = fragmentSrc.replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n  var shader = new _Shader2.default(gl, vertexSrc, fragmentSrc);\n  var sampleValues = [];\n  for (var i = 0; i < maxTextures; i++) {\n    sampleValues[i] = i;\n  }\n  shader.bind();\n  shader.uniforms.uSamplers = sampleValues;\n  return shader;\n}\nfunction generateSampleSrc(maxTextures) {\n  var src = '';\n  src += '\\n';\n  src += '\\n';\n  for (var i = 0; i < maxTextures; i++) {\n    if (i > 0) {\n      src += '\\nelse ';\n    }\n    if (i < maxTextures - 1) {\n      src += 'if(vTextureId < ' + i + '.5)';\n    }\n    src += '\\n{';\n    src += '\\n\\tcolor = texture2D(uSamplers[' + i + '], vTextureCoord);';\n    src += '\\n}';\n  }\n  src += '\\n';\n  src += '\\n';\n  return src;\n}","map":{"version":3,"names":["generateMultiTextureShader","_Shader","require","_path","fragTemplate","join","gl","maxTextures","vertexSrc","fragmentSrc","replace","generateSampleSrc","shader","_Shader2","default","sampleValues","i","bind","uniforms","uSamplers","src"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/sprites/webgl/generateMultiTextureShader.js"],"sourcesContent":["import Shader from '../../Shader';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nconst fragTemplate = [\n    'varying vec2 vTextureCoord;',\n    'varying vec4 vColor;',\n    'varying float vTextureId;',\n    'uniform sampler2D uSamplers[%count%];',\n\n    'void main(void){',\n    'vec4 color;',\n    '%forloop%',\n    'gl_FragColor = color * vColor;',\n    '}',\n].join('\\n');\n\nexport default function generateMultiTextureShader(gl, maxTextures)\n{\n    const vertexSrc = readFileSync(join(__dirname, './texture.vert'), 'utf8');\n    let fragmentSrc = fragTemplate;\n\n    fragmentSrc = fragmentSrc.replace(/%count%/gi, maxTextures);\n    fragmentSrc = fragmentSrc.replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n\n    const shader = new Shader(gl, vertexSrc, fragmentSrc);\n\n    const sampleValues = [];\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n\n    shader.bind();\n    shader.uniforms.uSamplers = sampleValues;\n\n    return shader;\n}\n\nfunction generateSampleSrc(maxTextures)\n{\n    let src = '';\n\n    src += '\\n';\n    src += '\\n';\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxTextures - 1)\n        {\n            src += `if(vTextureId < ${i}.5)`;\n        }\n\n        src += '\\n{';\n        src += `\\n\\tcolor = texture2D(uSamplers[${i}], vTextureCoord);`;\n        src += '\\n}';\n    }\n\n    src += '\\n';\n    src += '\\n';\n\n    return src;\n}\n"],"mappings":";;;kBAiBwBA,0B;AAjBxB,IAAAC,OAAA,GAAAC,OAAA;;AAEA,IAAAC,KAAA,GAAAD,OAAA;;;;;;AAEA,IAAME,YAAA,GAAe,CACjB,6BADiB,EAEjB,sBAFiB,EAGjB,2BAHiB,EAIjB,uCAJiB,EAMjB,kBANiB,EAOjB,aAPiB,EAQjB,WARiB,EASjB,gCATiB,EAUjB,GAViB,EAWnBC,IAXmB,CAWd,IAXc,CAArB;AAae,SAASL,0BAATA,CAAoCM,EAApC,EAAwCC,WAAxC,EACf;EACI,IAAMC,SAAA,4cAAN;EACA,IAAIC,WAAA,GAAcL,YAAlB;EAEAK,WAAA,GAAcA,WAAA,CAAYC,OAAZ,CAAoB,WAApB,EAAiCH,WAAjC,CAAd;EACAE,WAAA,GAAcA,WAAA,CAAYC,OAAZ,CAAoB,aAApB,EAAmCC,iBAAA,CAAkBJ,WAAlB,CAAnC,CAAd;EAEA,IAAMK,MAAA,GAAS,IAAAC,QAAA,CAAAC,OAAA,CAAWR,EAAX,EAAeE,SAAf,EAA0BC,WAA1B,CAAf;EAEA,IAAMM,YAAA,GAAe,EAArB;EAEA,KAAK,IAAIC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIT,WAApB,EAAiCS,CAAA,EAAjC,EACA;IACID,YAAA,CAAaC,CAAb,IAAkBA,CAAlB;EACH;EAEDJ,MAAA,CAAOK,IAAP;EACAL,MAAA,CAAOM,QAAP,CAAgBC,SAAhB,GAA4BJ,YAA5B;EAEA,OAAOH,MAAP;AACH;AAED,SAASD,iBAATA,CAA2BJ,WAA3B,EACA;EACI,IAAIa,GAAA,GAAM,EAAV;EAEAA,GAAA,IAAO,IAAP;EACAA,GAAA,IAAO,IAAP;EAEA,KAAK,IAAIJ,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIT,WAApB,EAAiCS,CAAA,EAAjC,EACA;IACI,IAAIA,CAAA,GAAI,CAAR,EACA;MACII,GAAA,IAAO,SAAP;IACH;IAED,IAAIJ,CAAA,GAAIT,WAAA,GAAc,CAAtB,EACA;MACIa,GAAA,yBAA0BJ,CAA1B;IACH;IAEDI,GAAA,IAAO,KAAP;IACAA,GAAA,yCAA0CJ,CAA1C;IACAI,GAAA,IAAO,KAAP;EACH;EAEDA,GAAA,IAAO,IAAP;EACAA,GAAA,IAAO,IAAP;EAEA,OAAOA,GAAP;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}