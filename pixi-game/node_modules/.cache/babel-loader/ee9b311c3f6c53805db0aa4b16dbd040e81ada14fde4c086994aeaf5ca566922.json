{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _pixiGlCore = require('pixi-gl-core');\nvar _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * An object containing WebGL specific properties to be used by the WebGL renderer\n *\n * @class\n * @private\n * @memberof PIXI\n */\nvar WebGLGraphicsData = function () {\n  /**\n   * @param {WebGLRenderingContext} gl - The current WebGL drawing context\n   * @param {PIXI.Shader} shader - The shader\n   * @param {object} attribsState - The state for the VAO\n   */\n  function WebGLGraphicsData(gl, shader, attribsState) {\n    _classCallCheck(this, WebGLGraphicsData);\n\n    /**\n     * The current WebGL drawing context\n     *\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    // TODO does this need to be split before uploading??\n    /**\n     * An array of color components (r,g,b)\n     * @member {number[]}\n     */\n    this.color = [0, 0, 0]; // color split!\n\n    /**\n     * An array of points to draw\n     * @member {PIXI.Point[]}\n     */\n    this.points = [];\n\n    /**\n     * The indices of the vertices\n     * @member {number[]}\n     */\n    this.indices = [];\n    /**\n     * The main buffer\n     * @member {WebGLBuffer}\n     */\n    this.buffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl);\n\n    /**\n     * The index buffer\n     * @member {WebGLBuffer}\n     */\n    this.indexBuffer = _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl);\n\n    /**\n     * Whether this graphics is dirty or not\n     * @member {boolean}\n     */\n    this.dirty = true;\n\n    /**\n     * Whether this graphics is nativeLines or not\n     * @member {boolean}\n     */\n    this.nativeLines = false;\n    this.glPoints = null;\n    this.glIndices = null;\n\n    /**\n     *\n     * @member {PIXI.Shader}\n     */\n    this.shader = shader;\n    this.vao = new _pixiGlCore2.default.VertexArrayObject(gl, attribsState).addIndex(this.indexBuffer).addAttribute(this.buffer, shader.attributes.aVertexPosition, gl.FLOAT, false, 4 * 6, 0).addAttribute(this.buffer, shader.attributes.aColor, gl.FLOAT, false, 4 * 6, 2 * 4);\n  }\n\n  /**\n   * Resets the vertices and the indices\n   */\n\n  WebGLGraphicsData.prototype.reset = function reset() {\n    this.points.length = 0;\n    this.indices.length = 0;\n  };\n\n  /**\n   * Binds the buffers and uploads the data\n   */\n\n  WebGLGraphicsData.prototype.upload = function upload() {\n    this.glPoints = new Float32Array(this.points);\n    this.buffer.upload(this.glPoints);\n    this.glIndices = new Uint16Array(this.indices);\n    this.indexBuffer.upload(this.glIndices);\n    this.dirty = false;\n  };\n\n  /**\n   * Empties all the data\n   */\n\n  WebGLGraphicsData.prototype.destroy = function destroy() {\n    this.color = null;\n    this.points = null;\n    this.indices = null;\n    this.vao.destroy();\n    this.buffer.destroy();\n    this.indexBuffer.destroy();\n    this.gl = null;\n    this.buffer = null;\n    this.indexBuffer = null;\n    this.glPoints = null;\n    this.glIndices = null;\n  };\n  return WebGLGraphicsData;\n}();\nexports.default = WebGLGraphicsData;","map":{"version":3,"names":["_pixiGlCore","require","WebGLGraphicsData","gl","shader","attribsState","_classCallCheck","color","points","indices","buffer","_pixiGlCore2","default","GLBuffer","createVertexBuffer","indexBuffer","createIndexBuffer","dirty","nativeLines","glPoints","glIndices","vao","VertexArrayObject","addIndex","addAttribute","attributes","aVertexPosition","FLOAT","aColor","reset","length","upload","Float32Array","Uint16Array","destroy"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/graphics/webgl/WebGLGraphicsData.js"],"sourcesContent":["import glCore from 'pixi-gl-core';\n\n/**\n * An object containing WebGL specific properties to be used by the WebGL renderer\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class WebGLGraphicsData\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The current WebGL drawing context\n     * @param {PIXI.Shader} shader - The shader\n     * @param {object} attribsState - The state for the VAO\n     */\n    constructor(gl, shader, attribsState)\n    {\n        /**\n         * The current WebGL drawing context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        // TODO does this need to be split before uploading??\n        /**\n         * An array of color components (r,g,b)\n         * @member {number[]}\n         */\n        this.color = [0, 0, 0]; // color split!\n\n        /**\n         * An array of points to draw\n         * @member {PIXI.Point[]}\n         */\n        this.points = [];\n\n        /**\n         * The indices of the vertices\n         * @member {number[]}\n         */\n        this.indices = [];\n        /**\n         * The main buffer\n         * @member {WebGLBuffer}\n         */\n        this.buffer = glCore.GLBuffer.createVertexBuffer(gl);\n\n        /**\n         * The index buffer\n         * @member {WebGLBuffer}\n         */\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl);\n\n        /**\n         * Whether this graphics is dirty or not\n         * @member {boolean}\n         */\n        this.dirty = true;\n\n        /**\n         * Whether this graphics is nativeLines or not\n         * @member {boolean}\n         */\n        this.nativeLines = false;\n\n        this.glPoints = null;\n        this.glIndices = null;\n\n        /**\n         *\n         * @member {PIXI.Shader}\n         */\n        this.shader = shader;\n\n        this.vao = new glCore.VertexArrayObject(gl, attribsState)\n        .addIndex(this.indexBuffer)\n        .addAttribute(this.buffer, shader.attributes.aVertexPosition, gl.FLOAT, false, 4 * 6, 0)\n        .addAttribute(this.buffer, shader.attributes.aColor, gl.FLOAT, false, 4 * 6, 2 * 4);\n    }\n\n    /**\n     * Resets the vertices and the indices\n     */\n    reset()\n    {\n        this.points.length = 0;\n        this.indices.length = 0;\n    }\n\n    /**\n     * Binds the buffers and uploads the data\n     */\n    upload()\n    {\n        this.glPoints = new Float32Array(this.points);\n        this.buffer.upload(this.glPoints);\n\n        this.glIndices = new Uint16Array(this.indices);\n        this.indexBuffer.upload(this.glIndices);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Empties all the data\n     */\n    destroy()\n    {\n        this.color = null;\n        this.points = null;\n        this.indices = null;\n\n        this.vao.destroy();\n        this.buffer.destroy();\n        this.indexBuffer.destroy();\n\n        this.gl = null;\n\n        this.buffer = null;\n        this.indexBuffer = null;\n\n        this.glPoints = null;\n        this.glIndices = null;\n    }\n}\n"],"mappings":";;;AAAA,IAAAA,WAAA,GAAAC,OAAA;;;;;;;;;;;;;AAEA;;;;;;;IAOqBC,iB;EAEjB;;;;;EAKA,SAAAA,kBAAYC,EAAZ,EAAgBC,MAAhB,EAAwBC,YAAxB,EACA;IAAAC,eAAA,OAAAJ,iBAAA;;IACI;;;;;IAKA,KAAKC,EAAL,GAAUA,EAAV;;IAEA;IACA;;;;IAIA,KAAKI,KAAL,GAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb,CAbJ,CAa4B;;IAExB;;;;IAIA,KAAKC,MAAL,GAAc,EAAd;;IAEA;;;;IAIA,KAAKC,OAAL,GAAe,EAAf;IACA;;;;IAIA,KAAKC,MAAL,GAAcC,YAAA,CAAAC,OAAA,CAAOC,QAAP,CAAgBC,kBAAhB,CAAmCX,EAAnC,CAAd;;IAEA;;;;IAIA,KAAKY,WAAL,GAAmBJ,YAAA,CAAAC,OAAA,CAAOC,QAAP,CAAgBG,iBAAhB,CAAkCb,EAAlC,CAAnB;;IAEA;;;;IAIA,KAAKc,KAAL,GAAa,IAAb;;IAEA;;;;IAIA,KAAKC,WAAL,GAAmB,KAAnB;IAEA,KAAKC,QAAL,GAAgB,IAAhB;IACA,KAAKC,SAAL,GAAiB,IAAjB;;IAEA;;;;IAIA,KAAKhB,MAAL,GAAcA,MAAd;IAEA,KAAKiB,GAAL,GAAW,IAAIV,YAAA,CAAAC,OAAA,CAAOU,iBAAX,CAA6BnB,EAA7B,EAAiCE,YAAjC,EACVkB,QADU,CACD,KAAKR,WADJ,EAEVS,YAFU,CAEG,KAAKd,MAFR,EAEgBN,MAAA,CAAOqB,UAAP,CAAkBC,eAFlC,EAEmDvB,EAAA,CAAGwB,KAFtD,EAE6D,KAF7D,EAEoE,IAAI,CAFxE,EAE2E,CAF3E,EAGVH,YAHU,CAGG,KAAKd,MAHR,EAGgBN,MAAA,CAAOqB,UAAP,CAAkBG,MAHlC,EAG0CzB,EAAA,CAAGwB,KAH7C,EAGoD,KAHpD,EAG2D,IAAI,CAH/D,EAGkE,IAAI,CAHtE,CAAX;EAIH;;EAED;;;;8BAGAE,K,oBACA;IACI,KAAKrB,MAAL,CAAYsB,MAAZ,GAAqB,CAArB;IACA,KAAKrB,OAAL,CAAaqB,MAAb,GAAsB,CAAtB;EACH,C;;EAED;;;;8BAGAC,M,qBACA;IACI,KAAKZ,QAAL,GAAgB,IAAIa,YAAJ,CAAiB,KAAKxB,MAAtB,CAAhB;IACA,KAAKE,MAAL,CAAYqB,MAAZ,CAAmB,KAAKZ,QAAxB;IAEA,KAAKC,SAAL,GAAiB,IAAIa,WAAJ,CAAgB,KAAKxB,OAArB,CAAjB;IACA,KAAKM,WAAL,CAAiBgB,MAAjB,CAAwB,KAAKX,SAA7B;IAEA,KAAKH,KAAL,GAAa,KAAb;EACH,C;;EAED;;;;8BAGAiB,O,sBACA;IACI,KAAK3B,KAAL,GAAa,IAAb;IACA,KAAKC,MAAL,GAAc,IAAd;IACA,KAAKC,OAAL,GAAe,IAAf;IAEA,KAAKY,GAAL,CAASa,OAAT;IACA,KAAKxB,MAAL,CAAYwB,OAAZ;IACA,KAAKnB,WAAL,CAAiBmB,OAAjB;IAEA,KAAK/B,EAAL,GAAU,IAAV;IAEA,KAAKO,MAAL,GAAc,IAAd;IACA,KAAKK,WAAL,GAAmB,IAAnB;IAEA,KAAKI,QAAL,GAAgB,IAAhB;IACA,KAAKC,SAAL,GAAiB,IAAjB;EACH,C;;;kBApHgBlB,iB"},"metadata":{},"sourceType":"script","externalDependencies":[]}