{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _pixiGlCore = require('pixi-gl-core');\nvar _settings = require('./settings');\nvar _settings2 = _interopRequireDefault(_settings);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nfunction checkPrecision(src, def) {\n  if (src instanceof Array) {\n    if (src[0].substring(0, 9) !== 'precision') {\n      var copy = src.slice(0);\n      copy.unshift('precision ' + def + ' float;');\n      return copy;\n    }\n  } else if (src.trim().substring(0, 9) !== 'precision') {\n    return 'precision ' + def + ' float;\\n' + src;\n  }\n  return src;\n}\n\n/**\n * Wrapper class, webGL Shader for Pixi.\n * Adds precision string if vertexSrc or fragmentSrc have no mention of it.\n *\n * @class\n * @extends GLShader\n * @memberof PIXI\n */\n\nvar Shader = function (_GLShader) {\n  _inherits(Shader, _GLShader);\n\n  /**\n   *\n   * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n   * @param {string|string[]} vertexSrc - The vertex shader source as an array of strings.\n   * @param {string|string[]} fragmentSrc - The fragment shader source as an array of strings.\n   * @param {object} [attributeLocations] - A key value pair showing which location eact attribute should sit.\n                     e.g. {position:0, uvs:1}.\n   * @param {string} [precision] - The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.\n   */\n  function Shader(gl, vertexSrc, fragmentSrc, attributeLocations, precision) {\n    _classCallCheck(this, Shader);\n    return _possibleConstructorReturn(this, _GLShader.call(this, gl, checkPrecision(vertexSrc, precision || _settings2.default.PRECISION_VERTEX), checkPrecision(fragmentSrc, precision || _settings2.default.PRECISION_FRAGMENT), undefined, attributeLocations));\n  }\n  return Shader;\n}(_pixiGlCore.GLShader);\nexports.default = Shader;","map":{"version":3,"names":["_pixiGlCore","require","_settings","checkPrecision","src","def","Array","substring","copy","slice","unshift","trim","Shader","gl","vertexSrc","fragmentSrc","attributeLocations","precision","_classCallCheck","_possibleConstructorReturn","_GLShader","call","_settings2","default","PRECISION_VERTEX","PRECISION_FRAGMENT","undefined"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/Shader.js"],"sourcesContent":["import { GLShader } from 'pixi-gl-core';\nimport settings from './settings';\n\nfunction checkPrecision(src, def)\n{\n    if (src instanceof Array)\n    {\n        if (src[0].substring(0, 9) !== 'precision')\n        {\n            const copy = src.slice(0);\n\n            copy.unshift(`precision ${def} float;`);\n\n            return copy;\n        }\n    }\n    else if (src.trim().substring(0, 9) !== 'precision')\n    {\n        return `precision ${def} float;\\n${src}`;\n    }\n\n    return src;\n}\n\n/**\n * Wrapper class, webGL Shader for Pixi.\n * Adds precision string if vertexSrc or fragmentSrc have no mention of it.\n *\n * @class\n * @extends GLShader\n * @memberof PIXI\n */\nexport default class Shader extends GLShader\n{\n    /**\n     *\n     * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n     * @param {string|string[]} vertexSrc - The vertex shader source as an array of strings.\n     * @param {string|string[]} fragmentSrc - The fragment shader source as an array of strings.\n     * @param {object} [attributeLocations] - A key value pair showing which location eact attribute should sit.\n                       e.g. {position:0, uvs:1}.\n     * @param {string} [precision] - The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.\n     */\n    constructor(gl, vertexSrc, fragmentSrc, attributeLocations, precision)\n    {\n        super(gl, checkPrecision(vertexSrc, precision || settings.PRECISION_VERTEX),\n            checkPrecision(fragmentSrc, precision || settings.PRECISION_FRAGMENT), undefined, attributeLocations);\n    }\n}\n"],"mappings":";;;AAAA,IAAAA,WAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASE,cAATA,CAAwBC,GAAxB,EAA6BC,GAA7B,EACA;EACI,IAAID,GAAA,YAAeE,KAAnB,EACA;IACI,IAAIF,GAAA,CAAI,CAAJ,EAAOG,SAAP,CAAiB,CAAjB,EAAoB,CAApB,MAA2B,WAA/B,EACA;MACI,IAAMC,IAAA,GAAOJ,GAAA,CAAIK,KAAJ,CAAU,CAAV,CAAb;MAEAD,IAAA,CAAKE,OAAL,gBAA0BL,GAA1B;MAEA,OAAOG,IAAP;IACH;EACJ,CAVD,MAWK,IAAIJ,GAAA,CAAIO,IAAJ,GAAWJ,SAAX,CAAqB,CAArB,EAAwB,CAAxB,MAA+B,WAAnC,EACL;IACI,sBAAoBF,GAApB,iBAAmCD,GAAnC;EACH;EAED,OAAOA,GAAP;AACH;;AAED;;;;;;;;;IAQqBQ,M;;;EAEjB;;;;;;;;;EASA,SAAAA,OAAYC,EAAZ,EAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,kBAAxC,EAA4DC,SAA5D,EACA;IAAAC,eAAA,OAAAN,MAAA;IAAA,OAAAO,0BAAA,OACIC,SAAA,CAAAC,IAAA,OAAMR,EAAN,EAAUV,cAAA,CAAeW,SAAf,EAA0BG,SAAA,IAAaK,UAAA,CAAAC,OAAA,CAASC,gBAAhD,CAAV,EACIrB,cAAA,CAAeY,WAAf,EAA4BE,SAAA,IAAaK,UAAA,CAAAC,OAAA,CAASE,kBAAlD,CADJ,EAC2EC,SAD3E,EACsFV,kBADtF,CADJ;EAGC;;;kBAfgBJ,M"},"metadata":{},"sourceType":"script","externalDependencies":[]}