{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _const = require('../../const');\nvar _settings = require('../../settings');\nvar _settings2 = _interopRequireDefault(_settings);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * TextureGarbageCollector. This class manages the GPU and ensures that it does not get clogged\n * up with textures that are no longer being used.\n *\n * @class\n * @memberof PIXI\n */\nvar TextureGarbageCollector = function () {\n  /**\n   * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n   */\n  function TextureGarbageCollector(renderer) {\n    _classCallCheck(this, TextureGarbageCollector);\n    this.renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n    this.maxIdle = _settings2.default.GC_MAX_IDLE;\n    this.checkCountMax = _settings2.default.GC_MAX_CHECK_COUNT;\n    this.mode = _settings2.default.GC_MODE;\n  }\n\n  /**\n   * Checks to see when the last time a texture was used\n   * if the texture has not been used for a specified amount of time it will be removed from the GPU\n   */\n\n  TextureGarbageCollector.prototype.update = function update() {\n    this.count++;\n    if (this.mode === _const.GC_MODES.MANUAL) {\n      return;\n    }\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  };\n\n  /**\n   * Checks to see when the last time a texture was used\n   * if the texture has not been used for a specified amount of time it will be removed from the GPU\n   */\n\n  TextureGarbageCollector.prototype.run = function run() {\n    var tm = this.renderer.textureManager;\n    var managedTextures = tm._managedTextures;\n    var wasRemoved = false;\n    for (var i = 0; i < managedTextures.length; i++) {\n      var texture = managedTextures[i];\n\n      // only supports non generated textures at the moment!\n      if (!texture._glRenderTargets && this.count - texture.touched > this.maxIdle) {\n        tm.destroyTexture(texture, true);\n        managedTextures[i] = null;\n        wasRemoved = true;\n      }\n    }\n    if (wasRemoved) {\n      var j = 0;\n      for (var _i = 0; _i < managedTextures.length; _i++) {\n        if (managedTextures[_i] !== null) {\n          managedTextures[j++] = managedTextures[_i];\n        }\n      }\n      managedTextures.length = j;\n    }\n  };\n\n  /**\n   * Removes all the textures within the specified displayObject and its children from the GPU\n   *\n   * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\n   */\n\n  TextureGarbageCollector.prototype.unload = function unload(displayObject) {\n    var tm = this.renderer.textureManager;\n\n    // only destroy non generated textures\n    if (displayObject._texture && displayObject._texture._glRenderTargets) {\n      tm.destroyTexture(displayObject._texture, true);\n    }\n    for (var i = displayObject.children.length - 1; i >= 0; i--) {\n      this.unload(displayObject.children[i]);\n    }\n  };\n  return TextureGarbageCollector;\n}();\nexports.default = TextureGarbageCollector;","map":{"version":3,"names":["_const","require","_settings","TextureGarbageCollector","renderer","_classCallCheck","count","checkCount","maxIdle","_settings2","default","GC_MAX_IDLE","checkCountMax","GC_MAX_CHECK_COUNT","mode","GC_MODE","update","GC_MODES","MANUAL","run","tm","textureManager","managedTextures","_managedTextures","wasRemoved","i","length","texture","_glRenderTargets","touched","destroyTexture","j","_i","unload","displayObject","_texture","children"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/renderers/webgl/TextureGarbageCollector.js"],"sourcesContent":["import { GC_MODES } from '../../const';\nimport settings from '../../settings';\n\n/**\n * TextureGarbageCollector. This class manages the GPU and ensures that it does not get clogged\n * up with textures that are no longer being used.\n *\n * @class\n * @memberof PIXI\n */\nexport default class TextureGarbageCollector\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n        this.maxIdle = settings.GC_MAX_IDLE;\n        this.checkCountMax = settings.GC_MAX_CHECK_COUNT;\n        this.mode = settings.GC_MODE;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    update()\n    {\n        this.count++;\n\n        if (this.mode === GC_MODES.MANUAL)\n        {\n            return;\n        }\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    run()\n    {\n        const tm = this.renderer.textureManager;\n        const managedTextures =  tm._managedTextures;\n        let wasRemoved = false;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // only supports non generated textures at the moment!\n            if (!texture._glRenderTargets && this.count - texture.touched > this.maxIdle)\n            {\n                tm.destroyTexture(texture, true);\n                managedTextures[i] = null;\n                wasRemoved = true;\n            }\n        }\n\n        if (wasRemoved)\n        {\n            let j = 0;\n\n            for (let i = 0; i < managedTextures.length; i++)\n            {\n                if (managedTextures[i] !== null)\n                {\n                    managedTextures[j++] = managedTextures[i];\n                }\n            }\n\n            managedTextures.length = j;\n        }\n    }\n\n    /**\n     * Removes all the textures within the specified displayObject and its children from the GPU\n     *\n     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\n     */\n    unload(displayObject)\n    {\n        const tm = this.renderer.textureManager;\n\n        // only destroy non generated textures\n        if (displayObject._texture && displayObject._texture._glRenderTargets)\n        {\n            tm.destroyTexture(displayObject._texture, true);\n        }\n\n        for (let i = displayObject.children.length - 1; i >= 0; i--)\n        {\n            this.unload(displayObject.children[i]);\n        }\n    }\n}\n"],"mappings":";;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;;;;;;;;;;;;;AAEA;;;;;;;IAOqBE,uB;EAEjB;;;EAGA,SAAAA,wBAAYC,QAAZ,EACA;IAAAC,eAAA,OAAAF,uBAAA;IACI,KAAKC,QAAL,GAAgBA,QAAhB;IAEA,KAAKE,KAAL,GAAa,CAAb;IACA,KAAKC,UAAL,GAAkB,CAAlB;IACA,KAAKC,OAAL,GAAeC,UAAA,CAAAC,OAAA,CAASC,WAAxB;IACA,KAAKC,aAAL,GAAqBH,UAAA,CAAAC,OAAA,CAASG,kBAA9B;IACA,KAAKC,IAAL,GAAYL,UAAA,CAAAC,OAAA,CAASK,OAArB;EACH;;EAED;;;;;oCAIAC,M,qBACA;IACI,KAAKV,KAAL;IAEA,IAAI,KAAKQ,IAAL,KAAcd,MAAA,CAAAiB,QAAA,CAASC,MAA3B,EACA;MACI;IACH;IAED,KAAKX,UAAL;IAEA,IAAI,KAAKA,UAAL,GAAkB,KAAKK,aAA3B,EACA;MACI,KAAKL,UAAL,GAAkB,CAAlB;MAEA,KAAKY,GAAL;IACH;EACJ,C;;EAED;;;;;oCAIAA,G,kBACA;IACI,IAAMC,EAAA,GAAK,KAAKhB,QAAL,CAAciB,cAAzB;IACA,IAAMC,eAAA,GAAmBF,EAAA,CAAGG,gBAA5B;IACA,IAAIC,UAAA,GAAa,KAAjB;IAEA,KAAK,IAAIC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIH,eAAA,CAAgBI,MAApC,EAA4CD,CAAA,EAA5C,EACA;MACI,IAAME,OAAA,GAAUL,eAAA,CAAgBG,CAAhB,CAAhB;;MAEA;MACA,IAAI,CAACE,OAAA,CAAQC,gBAAT,IAA6B,KAAKtB,KAAL,GAAaqB,OAAA,CAAQE,OAArB,GAA+B,KAAKrB,OAArE,EACA;QACIY,EAAA,CAAGU,cAAH,CAAkBH,OAAlB,EAA2B,IAA3B;QACAL,eAAA,CAAgBG,CAAhB,IAAqB,IAArB;QACAD,UAAA,GAAa,IAAb;MACH;IACJ;IAED,IAAIA,UAAJ,EACA;MACI,IAAIO,CAAA,GAAI,CAAR;MAEA,KAAK,IAAIC,EAAA,GAAI,CAAb,EAAgBA,EAAA,GAAIV,eAAA,CAAgBI,MAApC,EAA4CM,EAAA,EAA5C,EACA;QACI,IAAIV,eAAA,CAAgBU,EAAhB,MAAuB,IAA3B,EACA;UACIV,eAAA,CAAgBS,CAAA,EAAhB,IAAuBT,eAAA,CAAgBU,EAAhB,CAAvB;QACH;MACJ;MAEDV,eAAA,CAAgBI,MAAhB,GAAyBK,CAAzB;IACH;EACJ,C;;EAED;;;;;;oCAKAE,M,mBAAOC,a,EACP;IACI,IAAMd,EAAA,GAAK,KAAKhB,QAAL,CAAciB,cAAzB;;IAEA;IACA,IAAIa,aAAA,CAAcC,QAAd,IAA0BD,aAAA,CAAcC,QAAd,CAAuBP,gBAArD,EACA;MACIR,EAAA,CAAGU,cAAH,CAAkBI,aAAA,CAAcC,QAAhC,EAA0C,IAA1C;IACH;IAED,KAAK,IAAIV,CAAA,GAAIS,aAAA,CAAcE,QAAd,CAAuBV,MAAvB,GAAgC,CAA7C,EAAgDD,CAAA,IAAK,CAArD,EAAwDA,CAAA,EAAxD,EACA;MACI,KAAKQ,MAAL,CAAYC,aAAA,CAAcE,QAAd,CAAuBX,CAAvB,CAAZ;IACH;EACJ,C;;;kBAjGgBtB,uB"},"metadata":{},"sourceType":"script","externalDependencies":[]}