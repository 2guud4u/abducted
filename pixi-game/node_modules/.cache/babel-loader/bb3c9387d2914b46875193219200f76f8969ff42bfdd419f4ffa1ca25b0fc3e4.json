{"ast":null,"code":"'use strict';\n\nvar _core = require('../core');\nvar core = _interopRequireWildcard(_core);\nvar _Texture = require('../core/textures/Texture');\nvar _Texture2 = _interopRequireDefault(_Texture);\nvar _BaseTexture = require('../core/textures/BaseTexture');\nvar _BaseTexture2 = _interopRequireDefault(_BaseTexture);\nvar _utils = require('../core/utils');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar DisplayObject = core.DisplayObject;\nvar _tempMatrix = new core.Matrix();\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = false;\n\n// figured theres no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n */\n\nvar CacheData =\n/**\n *\n */\nfunction CacheData() {\n  _classCallCheck(this, CacheData);\n  this.textureCacheId = null;\n  this.originalRenderWebGL = null;\n  this.originalRenderCanvas = null;\n  this.originalCalculateBounds = null;\n  this.originalGetLocalBounds = null;\n  this.originalUpdateTransform = null;\n  this.originalHitTest = null;\n  this.originalDestroy = null;\n  this.originalMask = null;\n  this.originalFilterArea = null;\n  this.sprite = null;\n};\nObject.defineProperties(DisplayObject.prototype, {\n  /**\n   * Set this to true if you want this display object to be cached as a bitmap.\n   * This basically takes a snap shot of the display object as it is at that moment. It can\n   * provide a performance benefit for complex static displayObjects.\n   * To remove simply set this property to 'false'\n   *\n   * IMPORTANT GOTCHA - make sure that all your textures are preloaded BEFORE setting this property to true\n   * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  cacheAsBitmap: {\n    get: function get() {\n      return this._cacheAsBitmap;\n    },\n    set: function set(value) {\n      if (this._cacheAsBitmap === value) {\n        return;\n      }\n      this._cacheAsBitmap = value;\n      var data = void 0;\n      if (value) {\n        if (!this._cacheData) {\n          this._cacheData = new CacheData();\n        }\n        data = this._cacheData;\n        data.originalRenderWebGL = this.renderWebGL;\n        data.originalRenderCanvas = this.renderCanvas;\n        data.originalUpdateTransform = this.updateTransform;\n        data.originalCalculateBounds = this.calculateBounds;\n        data.originalGetLocalBounds = this.getLocalBounds;\n        data.originalDestroy = this.destroy;\n        data.originalContainsPoint = this.containsPoint;\n        data.originalMask = this._mask;\n        data.originalFilterArea = this.filterArea;\n        this.renderWebGL = this._renderCachedWebGL;\n        this.renderCanvas = this._renderCachedCanvas;\n        this.destroy = this._cacheAsBitmapDestroy;\n      } else {\n        data = this._cacheData;\n        if (data.sprite) {\n          this._destroyCachedDisplayObject();\n        }\n        this.renderWebGL = data.originalRenderWebGL;\n        this.renderCanvas = data.originalRenderCanvas;\n        this.calculateBounds = data.originalCalculateBounds;\n        this.getLocalBounds = data.originalGetLocalBounds;\n        this.destroy = data.originalDestroy;\n        this.updateTransform = data.originalUpdateTransform;\n        this.containsPoint = data.originalContainsPoint;\n        this._mask = data.originalMask;\n        this.filterArea = data.originalFilterArea;\n      }\n    }\n  }\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCachedWebGL = function _renderCachedWebGL(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObject(renderer);\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._renderWebGL(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  }\n\n  // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n\n  // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n  renderer.currentRenderer.flush();\n  // this.filters= [];\n\n  // next we find the dimensions of the untransformed object\n  // this function also calls updatetransform on all its children as part of the measuring.\n  // This means we don't need to update the transform again in this function\n  // TODO pass an object to clone too? saves having to create a new one each time!\n  var bounds = this.getLocalBounds().clone();\n\n  // add some padding!\n  if (this._filters && this._filters.length) {\n    var padding = this._filters[0].padding;\n    bounds.pad(padding);\n  }\n  bounds.ceil(core.settings.RESOLUTION);\n\n  // for now we cache the current renderTarget that the webGL renderer is currently using.\n  // this could be more elegent..\n  var cachedRenderTarget = renderer._activeRenderTarget;\n  // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n  var stack = renderer.filterManager.filterStack;\n\n  // this renderTexture will be used to store the cached DisplayObject\n\n  var renderTexture = core.RenderTexture.create(bounds.width, bounds.height);\n  var textureCacheId = 'cacheAsBitmap_' + (0, _utils.uid)();\n  this._cacheData.textureCacheId = textureCacheId;\n  _BaseTexture2.default.addToCache(renderTexture.baseTexture, textureCacheId);\n  _Texture2.default.addToCache(renderTexture, textureCacheId);\n\n  // need to set //\n  var m = _tempMatrix;\n  m.tx = -bounds.x;\n  m.ty = -bounds.y;\n\n  // reset\n  this.transform.worldTransform.identity();\n\n  // set all properties to there original so we can render to a texture\n  this.renderWebGL = this._cacheData.originalRenderWebGL;\n  renderer.render(this, renderTexture, true, m, true);\n  // now restore the state be setting the new properties\n\n  renderer.bindRenderTarget(cachedRenderTarget);\n  renderer.filterManager.filterStack = stack;\n  this.renderWebGL = this._renderCachedWebGL;\n  // the rest is the same as for Canvas\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n\n  // create our cached sprite\n  var cachedSprite = new core.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  // restore the transform of the cached sprite to avoid the nasty flicker..\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  }\n\n  // map the hit test..\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n  this._initCachedDisplayObjectCanvas(renderer);\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n  this._cacheData.sprite._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the webGL verison.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  }\n\n  // get bounds actually transforms the object for us already!\n  var bounds = this.getLocalBounds();\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  var cachedRenderTarget = renderer.context;\n  bounds.ceil(core.settings.RESOLUTION);\n  var renderTexture = core.RenderTexture.create(bounds.width, bounds.height);\n  var textureCacheId = 'cacheAsBitmap_' + (0, _utils.uid)();\n  this._cacheData.textureCacheId = textureCacheId;\n  _BaseTexture2.default.addToCache(renderTexture.baseTexture, textureCacheId);\n  _Texture2.default.addToCache(renderTexture, textureCacheId);\n\n  // need to set //\n  var m = _tempMatrix;\n  this.transform.localTransform.copy(m);\n  m.invert();\n  m.tx -= bounds.x;\n  m.ty -= bounds.y;\n\n  // m.append(this.transform.worldTransform.)\n  // set all properties to there original so we can render to a texture\n  this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n  // renderTexture.render(this, m, true);\n  renderer.render(this, renderTexture, true, m, false);\n\n  // now restore the state be setting the new properties\n  renderer.context = cachedRenderTarget;\n  this.renderCanvas = this._renderCachedCanvas;\n  // the rest is the same as for WebGL\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n\n  // create our cached sprite\n  var cachedSprite = new core.Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1;\n  // restore the transform of the cached sprite to avoid the nasty flicker..\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  }\n\n  // map the hit test..\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n  this._bounds.clear();\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite._calculateBounds();\n  this._lastBoundsID = this._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n  return this._cacheData.sprite.getLocalBounds();\n};\n\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n  this._cacheData.sprite._texture.destroy(true);\n  this._cacheData.sprite = null;\n  _BaseTexture2.default.removeFromCache(this._cacheData.textureCacheId);\n  _Texture2.default.removeFromCache(this._cacheData.textureCacheId);\n  this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n  this.cacheAsBitmap = false;\n  this.destroy(options);\n};","map":{"version":3,"names":["_core","require","core","_Texture","_BaseTexture","_utils","DisplayObject","_tempMatrix","Matrix","prototype","_cacheAsBitmap","_cacheData","CacheData","_classCallCheck","textureCacheId","originalRenderWebGL","originalRenderCanvas","originalCalculateBounds","originalGetLocalBounds","originalUpdateTransform","originalHitTest","originalDestroy","originalMask","originalFilterArea","sprite","Object","defineProperties","cacheAsBitmap","get","set","value","data","renderWebGL","renderCanvas","updateTransform","calculateBounds","getLocalBounds","destroy","originalContainsPoint","containsPoint","_mask","filterArea","_renderCachedWebGL","_renderCachedCanvas","_cacheAsBitmapDestroy","_destroyCachedDisplayObject","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","transform","_worldID","_renderWebGL","cacheAlpha","alpha","currentRenderer","flush","bounds","clone","_filters","length","padding","pad","ceil","settings","RESOLUTION","cachedRenderTarget","_activeRenderTarget","stack","filterManager","filterStack","renderTexture","RenderTexture","create","width","height","uid","_BaseTexture2","default","addToCache","baseTexture","_Texture2","m","tx","x","ty","y","worldTransform","identity","render","bindRenderTarget","displayObjectUpdateTransform","_calculateCachedBounds","_getCachedLocalBounds","cachedSprite","Sprite","anchor","_bounds","_parentID","parent","_tempDisplayObjectParent","bind","_initCachedDisplayObjectCanvas","_renderCanvas","context","localTransform","copy","invert","clear","_calculateBounds","_lastBoundsID","_boundsID","_texture","removeFromCache","options"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/extras/cacheAsBitmap.js"],"sourcesContent":["import * as core from '../core';\nimport Texture from '../core/textures/Texture';\nimport BaseTexture from '../core/textures/BaseTexture';\nimport { uid } from '../core/utils';\n\nconst DisplayObject = core.DisplayObject;\nconst _tempMatrix = new core.Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = false;\n\n// figured theres no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n */\nclass CacheData\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRenderWebGL = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalHitTest = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to 'false'\n     *\n     * IMPORTANT GOTCHA - make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get()\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value)\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRenderWebGL = this.renderWebGL;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.renderWebGL = this._renderCachedWebGL;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.renderWebGL = data.originalRenderWebGL;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCachedWebGL = function _renderCachedWebGL(renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._renderWebGL(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer)\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.currentRenderer.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = this.getLocalBounds().clone();\n\n    // add some padding!\n    if (this._filters && this._filters.length)\n    {\n        const padding = this._filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(core.settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the webGL renderer is currently using.\n    // this could be more elegent..\n    const cachedRenderTarget = renderer._activeRenderTarget;\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n\n    const renderTexture = core.RenderTexture.create(bounds.width, bounds.height);\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    m.tx = -bounds.x;\n    m.ty = -bounds.y;\n\n    // reset\n    this.transform.worldTransform.identity();\n\n    // set all properties to there original so we can render to a texture\n    this.renderWebGL = this._cacheData.originalRenderWebGL;\n\n    renderer.render(this, renderTexture, true, m, true);\n    // now restore the state be setting the new properties\n\n    renderer.bindRenderTarget(cachedRenderTarget);\n\n    renderer.filterManager.filterStack = stack;\n\n    this.renderWebGL = this._renderCachedWebGL;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new core.Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = renderer._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the webGL verison.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer)\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = this.getLocalBounds();\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n\n    bounds.ceil(core.settings.RESOLUTION);\n\n    const renderTexture = core.RenderTexture.create(bounds.width, bounds.height);\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copy(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    // renderTexture.render(this, m, true);\n    renderer.render(this, renderTexture, true, m, false);\n\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new core.Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = renderer._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds()\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite._calculateBounds();\n    this._lastBoundsID = this._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds()\n{\n    return this._cacheData.sprite.getLocalBounds();\n};\n\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject()\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options)\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}