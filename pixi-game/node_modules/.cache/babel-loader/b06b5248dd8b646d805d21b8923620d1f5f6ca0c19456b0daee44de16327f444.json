{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _mapWebGLBlendModesToPixi = require('./utils/mapWebGLBlendModesToPixi');\nvar _mapWebGLBlendModesToPixi2 = _interopRequireDefault(_mapWebGLBlendModesToPixi);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar BLEND = 0;\nvar DEPTH_TEST = 1;\nvar FRONT_FACE = 2;\nvar CULL_FACE = 3;\nvar BLEND_FUNC = 4;\n\n/**\n * A WebGL state machines\n *\n * @memberof PIXI\n * @class\n */\n\nvar WebGLState = function () {\n  /**\n   * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n   */\n  function WebGLState(gl) {\n    _classCallCheck(this, WebGLState);\n\n    /**\n     * The current active state\n     *\n     * @member {Uint8Array}\n     */\n    this.activeState = new Uint8Array(16);\n\n    /**\n     * The default state\n     *\n     * @member {Uint8Array}\n     */\n    this.defaultState = new Uint8Array(16);\n\n    // default blend mode..\n    this.defaultState[0] = 1;\n\n    /**\n     * The current state index in the stack\n     *\n     * @member {number}\n     * @private\n     */\n    this.stackIndex = 0;\n\n    /**\n     * The stack holding all the different states\n     *\n     * @member {Array<*>}\n     * @private\n     */\n    this.stack = [];\n\n    /**\n     * The current WebGL rendering context\n     *\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n    this.maxAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    this.attribState = {\n      tempAttribState: new Array(this.maxAttribs),\n      attribState: new Array(this.maxAttribs)\n    };\n    this.blendModes = (0, _mapWebGLBlendModesToPixi2.default)(gl);\n\n    // check we have vao..\n    this.nativeVaoExtension = gl.getExtension('OES_vertex_array_object') || gl.getExtension('MOZ_OES_vertex_array_object') || gl.getExtension('WEBKIT_OES_vertex_array_object');\n  }\n\n  /**\n   * Pushes a new active state\n   */\n\n  WebGLState.prototype.push = function push() {\n    // next state..\n    var state = this.stack[this.stackIndex];\n    if (!state) {\n      state = this.stack[this.stackIndex] = new Uint8Array(16);\n    }\n    ++this.stackIndex;\n\n    // copy state..\n    // set active state so we can force overrides of gl state\n    for (var i = 0; i < this.activeState.length; i++) {\n      state[i] = this.activeState[i];\n    }\n  };\n\n  /**\n   * Pops a state out\n   */\n\n  WebGLState.prototype.pop = function pop() {\n    var state = this.stack[--this.stackIndex];\n    this.setState(state);\n  };\n\n  /**\n   * Sets the current state\n   *\n   * @param {*} state - The state to set.\n   */\n\n  WebGLState.prototype.setState = function setState(state) {\n    this.setBlend(state[BLEND]);\n    this.setDepthTest(state[DEPTH_TEST]);\n    this.setFrontFace(state[FRONT_FACE]);\n    this.setCullFace(state[CULL_FACE]);\n    this.setBlendMode(state[BLEND_FUNC]);\n  };\n\n  /**\n   * Enables or disabled blending.\n   *\n   * @param {boolean} value - Turn on or off webgl blending.\n   */\n\n  WebGLState.prototype.setBlend = function setBlend(value) {\n    value = value ? 1 : 0;\n    if (this.activeState[BLEND] === value) {\n      return;\n    }\n    this.activeState[BLEND] = value;\n    this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n  };\n\n  /**\n   * Sets the blend mode.\n   *\n   * @param {number} value - The blend mode to set to.\n   */\n\n  WebGLState.prototype.setBlendMode = function setBlendMode(value) {\n    if (value === this.activeState[BLEND_FUNC]) {\n      return;\n    }\n    this.activeState[BLEND_FUNC] = value;\n    var mode = this.blendModes[value];\n    if (mode.length === 2) {\n      this.gl.blendFunc(mode[0], mode[1]);\n    } else {\n      this.gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n    }\n  };\n\n  /**\n   * Sets whether to enable or disable depth test.\n   *\n   * @param {boolean} value - Turn on or off webgl depth testing.\n   */\n\n  WebGLState.prototype.setDepthTest = function setDepthTest(value) {\n    value = value ? 1 : 0;\n    if (this.activeState[DEPTH_TEST] === value) {\n      return;\n    }\n    this.activeState[DEPTH_TEST] = value;\n    this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n  };\n\n  /**\n   * Sets whether to enable or disable cull face.\n   *\n   * @param {boolean} value - Turn on or off webgl cull face.\n   */\n\n  WebGLState.prototype.setCullFace = function setCullFace(value) {\n    value = value ? 1 : 0;\n    if (this.activeState[CULL_FACE] === value) {\n      return;\n    }\n    this.activeState[CULL_FACE] = value;\n    this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n  };\n\n  /**\n   * Sets the gl front face.\n   *\n   * @param {boolean} value - true is clockwise and false is counter-clockwise\n   */\n\n  WebGLState.prototype.setFrontFace = function setFrontFace(value) {\n    value = value ? 1 : 0;\n    if (this.activeState[FRONT_FACE] === value) {\n      return;\n    }\n    this.activeState[FRONT_FACE] = value;\n    this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n  };\n\n  /**\n   * Disables all the vaos in use\n   *\n   */\n\n  WebGLState.prototype.resetAttributes = function resetAttributes() {\n    for (var i = 0; i < this.attribState.tempAttribState.length; i++) {\n      this.attribState.tempAttribState[i] = 0;\n    }\n    for (var _i = 0; _i < this.attribState.attribState.length; _i++) {\n      this.attribState.attribState[_i] = 0;\n    }\n\n    // im going to assume one is always active for performance reasons.\n    for (var _i2 = 1; _i2 < this.maxAttribs; _i2++) {\n      this.gl.disableVertexAttribArray(_i2);\n    }\n  };\n\n  // used\n  /**\n   * Resets all the logic and disables the vaos\n   */\n\n  WebGLState.prototype.resetToDefault = function resetToDefault() {\n    // unbind any VAO if they exist..\n    if (this.nativeVaoExtension) {\n      this.nativeVaoExtension.bindVertexArrayOES(null);\n    }\n\n    // reset all attributes..\n    this.resetAttributes();\n\n    // set active state so we can force overrides of gl state\n    for (var i = 0; i < this.activeState.length; ++i) {\n      this.activeState[i] = 32;\n    }\n    this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n    this.setState(this.defaultState);\n  };\n  return WebGLState;\n}();\nexports.default = WebGLState;","map":{"version":3,"names":["_mapWebGLBlendModesToPixi","require","BLEND","DEPTH_TEST","FRONT_FACE","CULL_FACE","BLEND_FUNC","WebGLState","gl","_classCallCheck","activeState","Uint8Array","defaultState","stackIndex","stack","maxAttribs","getParameter","MAX_VERTEX_ATTRIBS","attribState","tempAttribState","Array","blendModes","_mapWebGLBlendModesToPixi2","default","nativeVaoExtension","getExtension","push","state","i","length","pop","setState","setBlend","setDepthTest","setFrontFace","setCullFace","setBlendMode","value","mode","blendFunc","blendFuncSeparate","frontFace","resetAttributes","_i","_i2","disableVertexAttribArray","resetToDefault","bindVertexArrayOES","pixelStorei","UNPACK_FLIP_Y_WEBGL"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/renderers/webgl/WebGLState.js"],"sourcesContent":["import mapWebGLBlendModesToPixi from './utils/mapWebGLBlendModesToPixi';\n\nconst BLEND = 0;\nconst DEPTH_TEST = 1;\nconst FRONT_FACE = 2;\nconst CULL_FACE = 3;\nconst BLEND_FUNC = 4;\n\n/**\n * A WebGL state machines\n *\n * @memberof PIXI\n * @class\n */\nexport default class WebGLState\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n     */\n    constructor(gl)\n    {\n        /**\n         * The current active state\n         *\n         * @member {Uint8Array}\n         */\n        this.activeState = new Uint8Array(16);\n\n        /**\n         * The default state\n         *\n         * @member {Uint8Array}\n         */\n        this.defaultState = new Uint8Array(16);\n\n        // default blend mode..\n        this.defaultState[0] = 1;\n\n        /**\n         * The current state index in the stack\n         *\n         * @member {number}\n         * @private\n         */\n        this.stackIndex = 0;\n\n        /**\n         * The stack holding all the different states\n         *\n         * @member {Array<*>}\n         * @private\n         */\n        this.stack = [];\n\n        /**\n         * The current WebGL rendering context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        this.maxAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\n        this.attribState = {\n            tempAttribState: new Array(this.maxAttribs),\n            attribState: new Array(this.maxAttribs),\n        };\n\n        this.blendModes = mapWebGLBlendModesToPixi(gl);\n\n        // check we have vao..\n        this.nativeVaoExtension = (\n            gl.getExtension('OES_vertex_array_object')\n            || gl.getExtension('MOZ_OES_vertex_array_object')\n            || gl.getExtension('WEBKIT_OES_vertex_array_object')\n        );\n    }\n\n    /**\n     * Pushes a new active state\n     */\n    push()\n    {\n        // next state..\n        let state = this.stack[this.stackIndex];\n\n        if (!state)\n        {\n            state = this.stack[this.stackIndex] = new Uint8Array(16);\n        }\n\n        ++this.stackIndex;\n\n        // copy state..\n        // set active state so we can force overrides of gl state\n        for (let i = 0; i < this.activeState.length; i++)\n        {\n            state[i] = this.activeState[i];\n        }\n    }\n\n    /**\n     * Pops a state out\n     */\n    pop()\n    {\n        const state = this.stack[--this.stackIndex];\n\n        this.setState(state);\n    }\n\n    /**\n     * Sets the current state\n     *\n     * @param {*} state - The state to set.\n     */\n    setState(state)\n    {\n        this.setBlend(state[BLEND]);\n        this.setDepthTest(state[DEPTH_TEST]);\n        this.setFrontFace(state[FRONT_FACE]);\n        this.setCullFace(state[CULL_FACE]);\n        this.setBlendMode(state[BLEND_FUNC]);\n    }\n\n    /**\n     * Enables or disabled blending.\n     *\n     * @param {boolean} value - Turn on or off webgl blending.\n     */\n    setBlend(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[BLEND] === value)\n        {\n            return;\n        }\n\n        this.activeState[BLEND] = value;\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets the blend mode.\n     *\n     * @param {number} value - The blend mode to set to.\n     */\n    setBlendMode(value)\n    {\n        if (value === this.activeState[BLEND_FUNC])\n        {\n            return;\n        }\n\n        this.activeState[BLEND_FUNC] = value;\n\n        const mode = this.blendModes[value];\n\n        if (mode.length === 2)\n        {\n            this.gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            this.gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     *\n     * @param {boolean} value - Turn on or off webgl depth testing.\n     */\n    setDepthTest(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[DEPTH_TEST] === value)\n        {\n            return;\n        }\n\n        this.activeState[DEPTH_TEST] = value;\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     *\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    setCullFace(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[CULL_FACE] === value)\n        {\n            return;\n        }\n\n        this.activeState[CULL_FACE] = value;\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     *\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    setFrontFace(value)\n    {\n        value = value ? 1 : 0;\n\n        if (this.activeState[FRONT_FACE] === value)\n        {\n            return;\n        }\n\n        this.activeState[FRONT_FACE] = value;\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Disables all the vaos in use\n     *\n     */\n    resetAttributes()\n    {\n        for (let i = 0; i < this.attribState.tempAttribState.length; i++)\n        {\n            this.attribState.tempAttribState[i] = 0;\n        }\n\n        for (let i = 0; i < this.attribState.attribState.length; i++)\n        {\n            this.attribState.attribState[i] = 0;\n        }\n\n        // im going to assume one is always active for performance reasons.\n        for (let i = 1; i < this.maxAttribs; i++)\n        {\n            this.gl.disableVertexAttribArray(i);\n        }\n    }\n\n    // used\n    /**\n     * Resets all the logic and disables the vaos\n     */\n    resetToDefault()\n    {\n        // unbind any VAO if they exist..\n        if (this.nativeVaoExtension)\n        {\n            this.nativeVaoExtension.bindVertexArrayOES(null);\n        }\n\n        // reset all attributes..\n        this.resetAttributes();\n\n        // set active state so we can force overrides of gl state\n        for (let i = 0; i < this.activeState.length; ++i)\n        {\n            this.activeState[i] = 32;\n        }\n\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.setState(this.defaultState);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}