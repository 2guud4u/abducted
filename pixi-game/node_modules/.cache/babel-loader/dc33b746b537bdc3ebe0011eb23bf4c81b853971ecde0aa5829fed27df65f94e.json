{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _core = require('../../core');\nvar core = _interopRequireWildcard(_core);\nvar _generateBlurVertSource = require('./generateBlurVertSource');\nvar _generateBlurVertSource2 = _interopRequireDefault(_generateBlurVertSource);\nvar _generateBlurFragSource = require('./generateBlurFragSource');\nvar _generateBlurFragSource2 = _interopRequireDefault(_generateBlurFragSource);\nvar _getMaxBlurKernelSize = require('./getMaxBlurKernelSize');\nvar _getMaxBlurKernelSize2 = _interopRequireDefault(_getMaxBlurKernelSize);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * The BlurYFilter applies a horizontal Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nvar BlurYFilter = function (_core$Filter) {\n  _inherits(BlurYFilter, _core$Filter);\n\n  /**\n   * @param {number} strength - The strength of the blur filter.\n   * @param {number} quality - The quality of the blur filter.\n   * @param {number} resolution - The resolution of the blur filter.\n   * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n   */\n  function BlurYFilter(strength, quality, resolution, kernelSize) {\n    _classCallCheck(this, BlurYFilter);\n    kernelSize = kernelSize || 5;\n    var vertSrc = (0, _generateBlurVertSource2.default)(kernelSize, false);\n    var fragSrc = (0, _generateBlurFragSource2.default)(kernelSize);\n    var _this = _possibleConstructorReturn(this, _core$Filter.call(this,\n    // vertex shader\n    vertSrc,\n    // fragment shader\n    fragSrc));\n    _this.resolution = resolution || core.settings.RESOLUTION;\n    _this._quality = 0;\n    _this.quality = quality || 4;\n    _this.strength = strength || 8;\n    _this.firstRun = true;\n    return _this;\n  }\n\n  /**\n   * Applies the filter.\n   *\n   * @param {PIXI.FilterManager} filterManager - The manager.\n   * @param {PIXI.RenderTarget} input - The input target.\n   * @param {PIXI.RenderTarget} output - The output target.\n   * @param {boolean} clear - Should the output be cleared before rendering?\n   */\n\n  BlurYFilter.prototype.apply = function apply(filterManager, input, output, clear) {\n    if (this.firstRun) {\n      var gl = filterManager.renderer.gl;\n      var kernelSize = (0, _getMaxBlurKernelSize2.default)(gl);\n      this.vertexSrc = (0, _generateBlurVertSource2.default)(kernelSize, false);\n      this.fragmentSrc = (0, _generateBlurFragSource2.default)(kernelSize);\n      this.firstRun = false;\n    }\n    this.uniforms.strength = 1 / output.size.height * (output.size.height / input.size.height);\n    this.uniforms.strength *= this.strength;\n    this.uniforms.strength /= this.passes;\n    if (this.passes === 1) {\n      filterManager.applyFilter(this, input, output, clear);\n    } else {\n      var renderTarget = filterManager.getRenderTarget(true);\n      var flip = input;\n      var flop = renderTarget;\n      for (var i = 0; i < this.passes - 1; i++) {\n        filterManager.applyFilter(this, flip, flop, true);\n        var temp = flop;\n        flop = flip;\n        flip = temp;\n      }\n      filterManager.applyFilter(this, flip, output, clear);\n      filterManager.returnRenderTarget(renderTarget);\n    }\n  };\n\n  /**\n   * Sets the strength of both the blur.\n   *\n   * @member {number}\n   * @default 2\n   */\n\n  _createClass(BlurYFilter, [{\n    key: 'blur',\n    get: function get() {\n      return this.strength;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      this.padding = Math.abs(value) * 2;\n      this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quaility bluring but the lower the performance.\n     *\n     * @member {number}\n     * @default 4\n     */\n  }, {\n    key: 'quality',\n    get: function get() {\n      return this._quality;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      this._quality = value;\n      this.passes = value;\n    }\n  }]);\n  return BlurYFilter;\n}(core.Filter);\nexports.default = BlurYFilter;","map":{"version":3,"names":["_core","require","core","_generateBlurVertSource","_generateBlurFragSource","_getMaxBlurKernelSize","BlurYFilter","strength","quality","resolution","kernelSize","_classCallCheck","vertSrc","_generateBlurVertSource2","default","fragSrc","_generateBlurFragSource2","_this","_possibleConstructorReturn","_core$Filter","call","settings","RESOLUTION","_quality","firstRun","apply","filterManager","input","output","clear","gl","renderer","_getMaxBlurKernelSize2","vertexSrc","fragmentSrc","uniforms","size","height","passes","applyFilter","renderTarget","getRenderTarget","flip","flop","i","temp","returnRenderTarget","value","padding","Math","abs","Filter"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/filters/blur/BlurYFilter.js"],"sourcesContent":["import * as core from '../../core';\nimport generateBlurVertSource from './generateBlurVertSource';\nimport generateBlurFragSource from './generateBlurFragSource';\nimport getMaxBlurKernelSize from './getMaxBlurKernelSize';\n\n/**\n * The BlurYFilter applies a horizontal Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class BlurYFilter extends core.Filter\n{\n    /**\n     * @param {number} strength - The strength of the blur filter.\n     * @param {number} quality - The quality of the blur filter.\n     * @param {number} resolution - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength, quality, resolution, kernelSize)\n    {\n        kernelSize = kernelSize || 5;\n        const vertSrc = generateBlurVertSource(kernelSize, false);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.resolution = resolution || core.settings.RESOLUTION;\n\n        this._quality = 0;\n\n        this.quality = quality || 4;\n        this.strength = strength || 8;\n\n        this.firstRun = true;\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     * @param {boolean} clear - Should the output be cleared before rendering?\n     */\n    apply(filterManager, input, output, clear)\n    {\n        if (this.firstRun)\n        {\n            const gl = filterManager.renderer.gl;\n            const kernelSize = getMaxBlurKernelSize(gl);\n\n            this.vertexSrc = generateBlurVertSource(kernelSize, false);\n            this.fragmentSrc = generateBlurFragSource(kernelSize);\n\n            this.firstRun = false;\n        }\n\n        this.uniforms.strength = (1 / output.size.height) * (output.size.height / input.size.height);\n\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else\n        {\n            const renderTarget = filterManager.getRenderTarget(true);\n            let flip = input;\n            let flop = renderTarget;\n\n            for (let i = 0; i < this.passes - 1; i++)\n            {\n                filterManager.applyFilter(this, flip, flop, true);\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n            }\n\n            filterManager.applyFilter(this, flip, output, clear);\n\n            filterManager.returnRenderTarget(renderTarget);\n        }\n    }\n\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur()\n    {\n        return this.strength;\n    }\n\n    set blur(value) // eslint-disable-line require-jsdoc\n    {\n        this.padding = Math.abs(value) * 2;\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quaility bluring but the lower the performance.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality()\n    {\n        return this._quality;\n    }\n\n    set quality(value) // eslint-disable-line require-jsdoc\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}