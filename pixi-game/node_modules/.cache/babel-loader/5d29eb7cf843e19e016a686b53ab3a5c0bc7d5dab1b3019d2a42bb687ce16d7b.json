{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _WebGLManager2 = require('./WebGLManager');\nvar _WebGLManager3 = _interopRequireDefault(_WebGLManager2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\nvar StencilManager = function (_WebGLManager) {\n  _inherits(StencilManager, _WebGLManager);\n\n  /**\n   * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n   */\n  function StencilManager(renderer) {\n    _classCallCheck(this, StencilManager);\n    var _this = _possibleConstructorReturn(this, _WebGLManager.call(this, renderer));\n    _this.stencilMaskStack = null;\n    return _this;\n  }\n\n  /**\n   * Changes the mask stack that is used by this manager.\n   *\n   * @param {PIXI.Graphics[]} stencilMaskStack - The mask stack\n   */\n\n  StencilManager.prototype.setMaskStack = function setMaskStack(stencilMaskStack) {\n    this.stencilMaskStack = stencilMaskStack;\n    var gl = this.renderer.gl;\n    if (stencilMaskStack.length === 0) {\n      gl.disable(gl.STENCIL_TEST);\n    } else {\n      gl.enable(gl.STENCIL_TEST);\n    }\n  };\n\n  /**\n   * Applies the Mask and adds it to the current stencil stack. @alvin\n   *\n   * @param {PIXI.Graphics} graphics - The mask\n   */\n\n  StencilManager.prototype.pushStencil = function pushStencil(graphics) {\n    this.renderer.setObjectRenderer(this.renderer.plugins.graphics);\n    this.renderer._activeRenderTarget.attachStencilBuffer();\n    var gl = this.renderer.gl;\n    var prevMaskCount = this.stencilMaskStack.length;\n    if (prevMaskCount === 0) {\n      gl.enable(gl.STENCIL_TEST);\n    }\n    this.stencilMaskStack.push(graphics);\n\n    // Increment the reference stencil value where the new mask overlaps with the old ones.\n    gl.colorMask(false, false, false, false);\n    gl.stencilFunc(gl.EQUAL, prevMaskCount, this._getBitwiseMask());\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n    this.renderer.plugins.graphics.render(graphics);\n    this._useCurrent();\n  };\n\n  /**\n   * Removes the last mask from the stencil stack. @alvin\n   */\n\n  StencilManager.prototype.popStencil = function popStencil() {\n    this.renderer.setObjectRenderer(this.renderer.plugins.graphics);\n    var gl = this.renderer.gl;\n    var graphics = this.stencilMaskStack.pop();\n    if (this.stencilMaskStack.length === 0) {\n      // the stack is empty!\n      gl.disable(gl.STENCIL_TEST);\n      gl.clear(gl.STENCIL_BUFFER_BIT);\n      gl.clearStencil(0);\n    } else {\n      // Decrement the reference stencil value where the popped mask overlaps with the other ones\n      gl.colorMask(false, false, false, false);\n      gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n      this.renderer.plugins.graphics.render(graphics);\n      this._useCurrent();\n    }\n  };\n\n  /**\n   * Setup renderer to use the current stencil data.\n   */\n\n  StencilManager.prototype._useCurrent = function _useCurrent() {\n    var gl = this.renderer.gl;\n    gl.colorMask(true, true, true, true);\n    gl.stencilFunc(gl.EQUAL, this.stencilMaskStack.length, this._getBitwiseMask());\n    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n  };\n\n  /**\n   * Fill 1s equal to the number of acitve stencil masks.\n   *\n   * @return {number} The bitwise mask.\n   */\n\n  StencilManager.prototype._getBitwiseMask = function _getBitwiseMask() {\n    return (1 << this.stencilMaskStack.length) - 1;\n  };\n\n  /**\n   * Destroys the mask stack.\n   *\n   */\n\n  StencilManager.prototype.destroy = function destroy() {\n    _WebGLManager3.default.prototype.destroy.call(this);\n    this.stencilMaskStack.stencilStack = null;\n  };\n  return StencilManager;\n}(_WebGLManager3.default);\nexports.default = StencilManager;","map":{"version":3,"names":["_WebGLManager2","require","StencilManager","renderer","_classCallCheck","_this","_possibleConstructorReturn","_WebGLManager","call","stencilMaskStack","setMaskStack","gl","length","disable","STENCIL_TEST","enable","pushStencil","graphics","setObjectRenderer","plugins","_activeRenderTarget","attachStencilBuffer","prevMaskCount","push","colorMask","stencilFunc","EQUAL","_getBitwiseMask","stencilOp","KEEP","INCR","render","_useCurrent","popStencil","pop","clear","STENCIL_BUFFER_BIT","clearStencil","DECR","destroy","_WebGLManager3","default","prototype","stencilStack"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/renderers/webgl/managers/StencilManager.js"],"sourcesContent":["import WebGLManager from './WebGLManager';\n\n/**\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\nexport default class StencilManager extends WebGLManager\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n        this.stencilMaskStack = null;\n    }\n\n    /**\n     * Changes the mask stack that is used by this manager.\n     *\n     * @param {PIXI.Graphics[]} stencilMaskStack - The mask stack\n     */\n    setMaskStack(stencilMaskStack)\n    {\n        this.stencilMaskStack = stencilMaskStack;\n\n        const gl = this.renderer.gl;\n\n        if (stencilMaskStack.length === 0)\n        {\n            gl.disable(gl.STENCIL_TEST);\n        }\n        else\n        {\n            gl.enable(gl.STENCIL_TEST);\n        }\n    }\n\n    /**\n     * Applies the Mask and adds it to the current stencil stack. @alvin\n     *\n     * @param {PIXI.Graphics} graphics - The mask\n     */\n    pushStencil(graphics)\n    {\n        this.renderer.setObjectRenderer(this.renderer.plugins.graphics);\n\n        this.renderer._activeRenderTarget.attachStencilBuffer();\n\n        const gl = this.renderer.gl;\n        const prevMaskCount = this.stencilMaskStack.length;\n\n        if (prevMaskCount === 0)\n        {\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        this.stencilMaskStack.push(graphics);\n\n        // Increment the reference stencil value where the new mask overlaps with the old ones.\n        gl.colorMask(false, false, false, false);\n        gl.stencilFunc(gl.EQUAL, prevMaskCount, this._getBitwiseMask());\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n        this.renderer.plugins.graphics.render(graphics);\n\n        this._useCurrent();\n    }\n\n    /**\n     * Removes the last mask from the stencil stack. @alvin\n     */\n    popStencil()\n    {\n        this.renderer.setObjectRenderer(this.renderer.plugins.graphics);\n\n        const gl = this.renderer.gl;\n        const graphics = this.stencilMaskStack.pop();\n\n        if (this.stencilMaskStack.length === 0)\n        {\n            // the stack is empty!\n            gl.disable(gl.STENCIL_TEST);\n            gl.clear(gl.STENCIL_BUFFER_BIT);\n            gl.clearStencil(0);\n        }\n        else\n        {\n            // Decrement the reference stencil value where the popped mask overlaps with the other ones\n            gl.colorMask(false, false, false, false);\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n            this.renderer.plugins.graphics.render(graphics);\n\n            this._useCurrent();\n        }\n    }\n\n    /**\n     * Setup renderer to use the current stencil data.\n     */\n    _useCurrent()\n    {\n        const gl = this.renderer.gl;\n\n        gl.colorMask(true, true, true, true);\n        gl.stencilFunc(gl.EQUAL, this.stencilMaskStack.length, this._getBitwiseMask());\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    }\n\n    /**\n     * Fill 1s equal to the number of acitve stencil masks.\n     *\n     * @return {number} The bitwise mask.\n     */\n    _getBitwiseMask()\n    {\n        return (1 << this.stencilMaskStack.length) - 1;\n    }\n\n    /**\n     * Destroys the mask stack.\n     *\n     */\n    destroy()\n    {\n        WebGLManager.prototype.destroy.call(this);\n\n        this.stencilMaskStack.stencilStack = null;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}