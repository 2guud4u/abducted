{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _const = require('../../const');\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\nvar Rectangle = function () {\n  /**\n   * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n   * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n   * @param {number} [width=0] - The overall width of this rectangle\n   * @param {number} [height=0] - The overall height of this rectangle\n   */\n  function Rectangle() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, Rectangle);\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = Number(x);\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = Number(y);\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.width = Number(width);\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.height = Number(height);\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default PIXI.SHAPES.RECT\n     * @see PIXI.SHAPES\n     */\n    this.type = _const.SHAPES.RECT;\n  }\n\n  /**\n   * returns the left edge of the rectangle\n   *\n   * @member {number}\n   */\n\n  /**\n   * Creates a clone of this Rectangle\n   *\n   * @return {PIXI.Rectangle} a copy of the rectangle\n   */\n  Rectangle.prototype.clone = function clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  };\n\n  /**\n   * Copies another rectangle to this one.\n   *\n   * @param {PIXI.Rectangle} rectangle - The rectangle to copy.\n   * @return {PIXI.Rectangle} Returns itself.\n   */\n\n  Rectangle.prototype.copy = function copy(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  };\n\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rectangle\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coordinates are within this Rectangle\n   */\n\n  Rectangle.prototype.contains = function contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x < this.x + this.width) {\n      if (y >= this.y && y < this.y + this.height) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Pads the rectangle making it grow in all directions.\n   *\n   * @param {number} paddingX - The horizontal padding amount.\n   * @param {number} [paddingY] - The vertical padding amount.\n   */\n\n  Rectangle.prototype.pad = function pad(paddingX, paddingY) {\n    paddingX = paddingX || 0;\n    paddingY = paddingY || (paddingY !== 0 ? paddingX : 0);\n    this.x -= paddingX;\n    this.y -= paddingY;\n    this.width += paddingX * 2;\n    this.height += paddingY * 2;\n  };\n\n  /**\n   * Fits this rectangle around the passed one.\n   *\n   * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n   */\n\n  Rectangle.prototype.fit = function fit(rectangle) {\n    var x1 = Math.max(this.x, rectangle.x);\n    var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.max(this.y, rectangle.y);\n    var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = Math.max(x2 - x1, 0);\n    this.y = y1;\n    this.height = Math.max(y2 - y1, 0);\n  };\n\n  /**\n   * Enlarges this rectangle to include the passed rectangle.\n   *\n   * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n   */\n\n  Rectangle.prototype.enlarge = function enlarge(rectangle) {\n    var x1 = Math.min(this.x, rectangle.x);\n    var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.min(this.y, rectangle.y);\n    var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = x2 - x1;\n    this.y = y1;\n    this.height = y2 - y1;\n  };\n\n  /**\n   * Enlarges rectangle that way its corners lie on grid\n   *\n   * @param {number} [resolution=1] resolution\n   * @param {number} [eps=0.001] precision\n   */\n\n  Rectangle.prototype.ceil = function ceil() {\n    var resolution = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.001;\n    var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n    var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n    this.x = Math.floor((this.x + eps) * resolution) / resolution;\n    this.y = Math.floor((this.y + eps) * resolution) / resolution;\n    this.width = x2 - this.x;\n    this.height = y2 - this.y;\n  };\n  _createClass(Rectangle, [{\n    key: 'left',\n    get: function get() {\n      return this.x;\n    }\n\n    /**\n     * returns the right edge of the rectangle\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'right',\n    get: function get() {\n      return this.x + this.width;\n    }\n\n    /**\n     * returns the top edge of the rectangle\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'top',\n    get: function get() {\n      return this.y;\n    }\n\n    /**\n     * returns the bottom edge of the rectangle\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'bottom',\n    get: function get() {\n      return this.y + this.height;\n    }\n\n    /**\n     * A constant empty rectangle.\n     *\n     * @static\n     * @constant\n     */\n  }], [{\n    key: 'EMPTY',\n    get: function get() {\n      return new Rectangle(0, 0, 0, 0);\n    }\n  }]);\n  return Rectangle;\n}();\nexports.default = Rectangle;","map":{"version":3,"names":["_const","require","Rectangle","x","arguments","length","undefined","y","width","height","_classCallCheck","Number","type","SHAPES","RECT","clone","copy","rectangle","contains","pad","paddingX","paddingY","fit","x1","Math","max","x2","min","y1","y2","enlarge","ceil","resolution","eps","floor"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/math/shapes/Rectangle.js"],"sourcesContent":["import { SHAPES } from '../../const';\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Rectangle\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n     * @param {number} [width=0] - The overall width of this rectangle\n     * @param {number} [height=0] - The overall height of this rectangle\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = Number(x);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = Number(y);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = Number(width);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = Number(height);\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.RECT\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RECT;\n    }\n\n    /**\n     * returns the left edge of the rectangle\n     *\n     * @member {number}\n     */\n    get left()\n    {\n        return this.x;\n    }\n\n    /**\n     * returns the right edge of the rectangle\n     *\n     * @member {number}\n     */\n    get right()\n    {\n        return this.x + this.width;\n    }\n\n    /**\n     * returns the top edge of the rectangle\n     *\n     * @member {number}\n     */\n    get top()\n    {\n        return this.y;\n    }\n\n    /**\n     * returns the bottom edge of the rectangle\n     *\n     * @member {number}\n     */\n    get bottom()\n    {\n        return this.y + this.height;\n    }\n\n    /**\n     * A constant empty rectangle.\n     *\n     * @static\n     * @constant\n     */\n    static get EMPTY()\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     *\n     * @return {PIXI.Rectangle} a copy of the rectangle\n     */\n    clone()\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    copy(rectangle)\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x, y)\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     *\n     * @param {number} paddingX - The horizontal padding amount.\n     * @param {number} [paddingY] - The vertical padding amount.\n     */\n    pad(paddingX, paddingY)\n    {\n        paddingX = paddingX || 0;\n        paddingY = paddingY || ((paddingY !== 0) ? paddingX : 0);\n\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n     */\n    fit(rectangle)\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n     */\n    enlarge(rectangle)\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     *\n     * @param {number} [resolution=1] resolution\n     * @param {number} [eps=0.001] precision\n     */\n    ceil(resolution = 1, eps = 0.001)\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}