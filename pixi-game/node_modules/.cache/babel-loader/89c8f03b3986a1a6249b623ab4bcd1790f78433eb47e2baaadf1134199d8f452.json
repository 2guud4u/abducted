{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _CanvasRenderer = require('../../renderers/canvas/CanvasRenderer');\nvar _CanvasRenderer2 = _interopRequireDefault(_CanvasRenderer);\nvar _const = require('../../const');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they\n * now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasGraphicsRenderer:\n * https://github.com/libgdx/libgdx/blob/1.0.0/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching graphics objects.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nvar CanvasGraphicsRenderer = function () {\n  /**\n   * @param {PIXI.CanvasRenderer} renderer - The current PIXI renderer.\n   */\n  function CanvasGraphicsRenderer(renderer) {\n    _classCallCheck(this, CanvasGraphicsRenderer);\n    this.renderer = renderer;\n  }\n\n  /**\n   * Renders a Graphics object to a canvas.\n   *\n   * @param {PIXI.Graphics} graphics - the actual graphics object to render\n   */\n\n  CanvasGraphicsRenderer.prototype.render = function render(graphics) {\n    var renderer = this.renderer;\n    var context = renderer.context;\n    var worldAlpha = graphics.worldAlpha;\n    var transform = graphics.transform.worldTransform;\n    var resolution = renderer.resolution;\n    context.setTransform(transform.a * resolution, transform.b * resolution, transform.c * resolution, transform.d * resolution, transform.tx * resolution, transform.ty * resolution);\n\n    // update tint if graphics was dirty\n    if (graphics.canvasTintDirty !== graphics.dirty || graphics._prevTint !== graphics.tint) {\n      this.updateGraphicsTint(graphics);\n    }\n    renderer.setBlendMode(graphics.blendMode);\n    for (var i = 0; i < graphics.graphicsData.length; i++) {\n      var data = graphics.graphicsData[i];\n      var shape = data.shape;\n      var fillColor = data._fillTint;\n      var lineColor = data._lineTint;\n      context.lineWidth = data.lineWidth;\n      if (data.type === _const.SHAPES.POLY) {\n        context.beginPath();\n        var points = shape.points;\n        var holes = data.holes;\n        var outerArea = void 0;\n        var innerArea = void 0;\n        var px = void 0;\n        var py = void 0;\n        context.moveTo(points[0], points[1]);\n        for (var j = 2; j < points.length; j += 2) {\n          context.lineTo(points[j], points[j + 1]);\n        }\n\n        // if the first and last point are the same close the path - much neater :)\n        if (shape.closed) {\n          context.closePath();\n        }\n        if (holes.length > 0) {\n          outerArea = 0;\n          px = points[0];\n          py = points[1];\n          for (var _j = 2; _j + 2 < points.length; _j += 2) {\n            outerArea += (points[_j] - px) * (points[_j + 3] - py) - (points[_j + 2] - px) * (points[_j + 1] - py);\n          }\n          for (var k = 0; k < holes.length; k++) {\n            points = holes[k].points;\n            if (!points) {\n              continue;\n            }\n            innerArea = 0;\n            px = points[0];\n            py = points[1];\n            for (var _j2 = 2; _j2 + 2 < points.length; _j2 += 2) {\n              innerArea += (points[_j2] - px) * (points[_j2 + 3] - py) - (points[_j2 + 2] - px) * (points[_j2 + 1] - py);\n            }\n            if (innerArea * outerArea < 0) {\n              context.moveTo(points[0], points[1]);\n              for (var _j3 = 2; _j3 < points.length; _j3 += 2) {\n                context.lineTo(points[_j3], points[_j3 + 1]);\n              }\n            } else {\n              context.moveTo(points[points.length - 2], points[points.length - 1]);\n              for (var _j4 = points.length - 4; _j4 >= 0; _j4 -= 2) {\n                context.lineTo(points[_j4], points[_j4 + 1]);\n              }\n            }\n            if (holes[k].close) {\n              context.closePath();\n            }\n          }\n        }\n        if (data.fill) {\n          context.globalAlpha = data.fillAlpha * worldAlpha;\n          context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);\n          context.fill();\n        }\n        if (data.lineWidth) {\n          context.globalAlpha = data.lineAlpha * worldAlpha;\n          context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);\n          context.stroke();\n        }\n      } else if (data.type === _const.SHAPES.RECT) {\n        if (data.fillColor || data.fillColor === 0) {\n          context.globalAlpha = data.fillAlpha * worldAlpha;\n          context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);\n          context.fillRect(shape.x, shape.y, shape.width, shape.height);\n        }\n        if (data.lineWidth) {\n          context.globalAlpha = data.lineAlpha * worldAlpha;\n          context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);\n          context.strokeRect(shape.x, shape.y, shape.width, shape.height);\n        }\n      } else if (data.type === _const.SHAPES.CIRC) {\n        // TODO - need to be Undefined!\n        context.beginPath();\n        context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n        context.closePath();\n        if (data.fill) {\n          context.globalAlpha = data.fillAlpha * worldAlpha;\n          context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);\n          context.fill();\n        }\n        if (data.lineWidth) {\n          context.globalAlpha = data.lineAlpha * worldAlpha;\n          context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);\n          context.stroke();\n        }\n      } else if (data.type === _const.SHAPES.ELIP) {\n        // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n        var w = shape.width * 2;\n        var h = shape.height * 2;\n        var x = shape.x - w / 2;\n        var y = shape.y - h / 2;\n        context.beginPath();\n        var kappa = 0.5522848;\n        var ox = w / 2 * kappa; // control point offset horizontal\n        var oy = h / 2 * kappa; // control point offset vertical\n        var xe = x + w; // x-end\n        var ye = y + h; // y-end\n        var xm = x + w / 2; // x-middle\n        var ym = y + h / 2; // y-middle\n\n        context.moveTo(x, ym);\n        context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n        context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n        context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n        context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n        context.closePath();\n        if (data.fill) {\n          context.globalAlpha = data.fillAlpha * worldAlpha;\n          context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);\n          context.fill();\n        }\n        if (data.lineWidth) {\n          context.globalAlpha = data.lineAlpha * worldAlpha;\n          context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);\n          context.stroke();\n        }\n      } else if (data.type === _const.SHAPES.RREC) {\n        var rx = shape.x;\n        var ry = shape.y;\n        var width = shape.width;\n        var height = shape.height;\n        var radius = shape.radius;\n        var maxRadius = Math.min(width, height) / 2 | 0;\n        radius = radius > maxRadius ? maxRadius : radius;\n        context.beginPath();\n        context.moveTo(rx, ry + radius);\n        context.lineTo(rx, ry + height - radius);\n        context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n        context.lineTo(rx + width - radius, ry + height);\n        context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n        context.lineTo(rx + width, ry + radius);\n        context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n        context.lineTo(rx + radius, ry);\n        context.quadraticCurveTo(rx, ry, rx, ry + radius);\n        context.closePath();\n        if (data.fillColor || data.fillColor === 0) {\n          context.globalAlpha = data.fillAlpha * worldAlpha;\n          context.fillStyle = '#' + ('00000' + (fillColor | 0).toString(16)).substr(-6);\n          context.fill();\n        }\n        if (data.lineWidth) {\n          context.globalAlpha = data.lineAlpha * worldAlpha;\n          context.strokeStyle = '#' + ('00000' + (lineColor | 0).toString(16)).substr(-6);\n          context.stroke();\n        }\n      }\n    }\n  };\n\n  /**\n   * Updates the tint of a graphics object\n   *\n   * @private\n   * @param {PIXI.Graphics} graphics - the graphics that will have its tint updated\n   */\n\n  CanvasGraphicsRenderer.prototype.updateGraphicsTint = function updateGraphicsTint(graphics) {\n    graphics._prevTint = graphics.tint;\n    graphics.canvasTintDirty = graphics.dirty;\n    var tintR = (graphics.tint >> 16 & 0xFF) / 255;\n    var tintG = (graphics.tint >> 8 & 0xFF) / 255;\n    var tintB = (graphics.tint & 0xFF) / 255;\n    for (var i = 0; i < graphics.graphicsData.length; ++i) {\n      var data = graphics.graphicsData[i];\n      var fillColor = data.fillColor | 0;\n      var lineColor = data.lineColor | 0;\n\n      // super inline, cos optimization :)\n      data._fillTint = ((fillColor >> 16 & 0xFF) / 255 * tintR * 255 << 16) + ((fillColor >> 8 & 0xFF) / 255 * tintG * 255 << 8) + (fillColor & 0xFF) / 255 * tintB * 255;\n      data._lineTint = ((lineColor >> 16 & 0xFF) / 255 * tintR * 255 << 16) + ((lineColor >> 8 & 0xFF) / 255 * tintG * 255 << 8) + (lineColor & 0xFF) / 255 * tintB * 255;\n    }\n  };\n\n  /**\n   * Renders a polygon.\n   *\n   * @param {PIXI.Point[]} points - The points to render\n   * @param {boolean} close - Should the polygon be closed\n   * @param {CanvasRenderingContext2D} context - The rendering context to use\n   */\n\n  CanvasGraphicsRenderer.prototype.renderPolygon = function renderPolygon(points, close, context) {\n    context.moveTo(points[0], points[1]);\n    for (var j = 1; j < points.length / 2; ++j) {\n      context.lineTo(points[j * 2], points[j * 2 + 1]);\n    }\n    if (close) {\n      context.closePath();\n    }\n  };\n\n  /**\n   * destroy graphics object\n   *\n   */\n\n  CanvasGraphicsRenderer.prototype.destroy = function destroy() {\n    this.renderer = null;\n  };\n  return CanvasGraphicsRenderer;\n}();\nexports.default = CanvasGraphicsRenderer;\n_CanvasRenderer2.default.registerPlugin('graphics', CanvasGraphicsRenderer);","map":{"version":3,"names":["_CanvasRenderer","require","_const","CanvasGraphicsRenderer","renderer","_classCallCheck","render","graphics","context","worldAlpha","transform","worldTransform","resolution","setTransform","a","b","c","d","tx","ty","canvasTintDirty","dirty","_prevTint","tint","updateGraphicsTint","setBlendMode","blendMode","i","graphicsData","length","data","shape","fillColor","_fillTint","lineColor","_lineTint","lineWidth","type","SHAPES","POLY","beginPath","points","holes","outerArea","innerArea","px","py","moveTo","j","lineTo","closed","closePath","_j","k","_j2","_j3","_j4","close","fill","globalAlpha","fillAlpha","fillStyle","toString","substr","lineAlpha","strokeStyle","stroke","RECT","fillRect","x","y","width","height","strokeRect","CIRC","arc","radius","Math","PI","ELIP","w","h","kappa","ox","oy","xe","ye","xm","ym","bezierCurveTo","RREC","rx","ry","maxRadius","min","quadraticCurveTo","tintR","tintG","tintB","renderPolygon","destroy","_CanvasRenderer2","default","registerPlugin"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/graphics/canvas/CanvasGraphicsRenderer.js"],"sourcesContent":["import CanvasRenderer from '../../renderers/canvas/CanvasRenderer';\nimport { SHAPES } from '../../const';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they\n * now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasGraphicsRenderer:\n * https://github.com/libgdx/libgdx/blob/1.0.0/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching graphics objects.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class CanvasGraphicsRenderer\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The current PIXI renderer.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders a Graphics object to a canvas.\n     *\n     * @param {PIXI.Graphics} graphics - the actual graphics object to render\n     */\n    render(graphics)\n    {\n        const renderer = this.renderer;\n        const context = renderer.context;\n        const worldAlpha = graphics.worldAlpha;\n        const transform = graphics.transform.worldTransform;\n        const resolution = renderer.resolution;\n\n        context.setTransform(\n            transform.a * resolution,\n            transform.b * resolution,\n            transform.c * resolution,\n            transform.d * resolution,\n            transform.tx * resolution,\n            transform.ty * resolution\n        );\n\n        // update tint if graphics was dirty\n        if (graphics.canvasTintDirty !== graphics.dirty\n            || graphics._prevTint !== graphics.tint)\n        {\n            this.updateGraphicsTint(graphics);\n        }\n\n        renderer.setBlendMode(graphics.blendMode);\n\n        for (let i = 0; i < graphics.graphicsData.length; i++)\n        {\n            const data = graphics.graphicsData[i];\n            const shape = data.shape;\n\n            const fillColor = data._fillTint;\n            const lineColor = data._lineTint;\n\n            context.lineWidth = data.lineWidth;\n\n            if (data.type === SHAPES.POLY)\n            {\n                context.beginPath();\n\n                let points = shape.points;\n                const holes = data.holes;\n                let outerArea;\n                let innerArea;\n                let px;\n                let py;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 2; j < points.length; j += 2)\n                {\n                    context.lineTo(points[j], points[j + 1]);\n                }\n\n                // if the first and last point are the same close the path - much neater :)\n                if (shape.closed)\n                {\n                    context.closePath();\n                }\n\n                if (holes.length > 0)\n                {\n                    outerArea = 0;\n                    px = points[0];\n                    py = points[1];\n                    for (let j = 2; j + 2 < points.length; j += 2)\n                    {\n                        outerArea += ((points[j] - px) * (points[j + 3] - py))\n                            - ((points[j + 2] - px) * (points[j + 1] - py));\n                    }\n\n                    for (let k = 0; k < holes.length; k++)\n                    {\n                        points = holes[k].points;\n\n                        if (!points)\n                        {\n                            continue;\n                        }\n\n                        innerArea = 0;\n                        px = points[0];\n                        py = points[1];\n                        for (let j = 2; j + 2 < points.length; j += 2)\n                        {\n                            innerArea += ((points[j] - px) * (points[j + 3] - py))\n                                - ((points[j + 2] - px) * (points[j + 1] - py));\n                        }\n\n                        if (innerArea * outerArea < 0)\n                        {\n                            context.moveTo(points[0], points[1]);\n\n                            for (let j = 2; j < points.length; j += 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n                        else\n                        {\n                            context.moveTo(points[points.length - 2], points[points.length - 1]);\n\n                            for (let j = points.length - 4; j >= 0; j -= 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n\n                        if (holes[k].close)\n                        {\n                            context.closePath();\n                        }\n                    }\n                }\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                if (data.fillColor || data.fillColor === 0)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fillRect(shape.x, shape.y, shape.width, shape.height);\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.strokeRect(shape.x, shape.y, shape.width, shape.height);\n                }\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.beginPath();\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                context.beginPath();\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w;           // x-end\n                const ye = y + h;           // y-end\n                const xm = x + (w / 2);       // x-middle\n                const ym = y + (h / 2);       // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n\n                context.closePath();\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.beginPath();\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n\n                if (data.fillColor || data.fillColor === 0)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates the tint of a graphics object\n     *\n     * @private\n     * @param {PIXI.Graphics} graphics - the graphics that will have its tint updated\n     */\n    updateGraphicsTint(graphics)\n    {\n        graphics._prevTint = graphics.tint;\n        graphics.canvasTintDirty = graphics.dirty;\n\n        const tintR = ((graphics.tint >> 16) & 0xFF) / 255;\n        const tintG = ((graphics.tint >> 8) & 0xFF) / 255;\n        const tintB = (graphics.tint & 0xFF) / 255;\n\n        for (let i = 0; i < graphics.graphicsData.length; ++i)\n        {\n            const data = graphics.graphicsData[i];\n\n            const fillColor = data.fillColor | 0;\n            const lineColor = data.lineColor | 0;\n\n            // super inline, cos optimization :)\n            data._fillTint = (\n                (((fillColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                + (((fillColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                + (((fillColor & 0xFF) / 255) * tintB * 255)\n            );\n\n            data._lineTint = (\n                (((lineColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                + (((lineColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                + (((lineColor & 0xFF) / 255) * tintB * 255)\n            );\n        }\n    }\n\n    /**\n     * Renders a polygon.\n     *\n     * @param {PIXI.Point[]} points - The points to render\n     * @param {boolean} close - Should the polygon be closed\n     * @param {CanvasRenderingContext2D} context - The rendering context to use\n     */\n    renderPolygon(points, close, context)\n    {\n        context.moveTo(points[0], points[1]);\n\n        for (let j = 1; j < points.length / 2; ++j)\n        {\n            context.lineTo(points[j * 2], points[(j * 2) + 1]);\n        }\n\n        if (close)\n        {\n            context.closePath();\n        }\n    }\n\n    /**\n     * destroy graphics object\n     *\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n\nCanvasRenderer.registerPlugin('graphics', CanvasGraphicsRenderer);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}