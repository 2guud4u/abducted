{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _utils = require('../utils');\nvar _settings = require('../settings');\nvar _settings2 = _interopRequireDefault(_settings);\nvar _eventemitter = require('eventemitter3');\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\nvar _determineCrossOrigin = require('../utils/determineCrossOrigin');\nvar _determineCrossOrigin2 = _interopRequireDefault(_determineCrossOrigin);\nvar _bitTwiddle = require('bit-twiddle');\nvar _bitTwiddle2 = _interopRequireDefault(_bitTwiddle);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * A texture stores the information that represents an image. All textures have a base texture.\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nvar BaseTexture = function (_EventEmitter) {\n  _inherits(BaseTexture, _EventEmitter);\n\n  /**\n   * @param {HTMLImageElement|HTMLCanvasElement} [source] - the source object of the texture.\n   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n   * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture\n   */\n  function BaseTexture(source, scaleMode, resolution) {\n    _classCallCheck(this, BaseTexture);\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n    _this.uid = (0, _utils.uid)();\n    _this.touched = 0;\n\n    /**\n     * The resolution / device pixel ratio of the texture\n     *\n     * @member {number}\n     * @default 1\n     */\n    _this.resolution = resolution || _settings2.default.RESOLUTION;\n\n    /**\n     * The width of the base texture set when the image has loaded\n     *\n     * @readonly\n     * @member {number}\n     */\n    _this.width = 100;\n\n    /**\n     * The height of the base texture set when the image has loaded\n     *\n     * @readonly\n     * @member {number}\n     */\n    _this.height = 100;\n\n    // TODO docs\n    // used to store the actual dimensions of the source\n    /**\n     * Used to store the actual width of the source of this texture\n     *\n     * @readonly\n     * @member {number}\n     */\n    _this.realWidth = 100;\n    /**\n     * Used to store the actual height of the source of this texture\n     *\n     * @readonly\n     * @member {number}\n     */\n    _this.realHeight = 100;\n\n    /**\n     * The scale mode to apply when scaling this texture\n     *\n     * @member {number}\n     * @default PIXI.settings.SCALE_MODE\n     * @see PIXI.SCALE_MODES\n     */\n    _this.scaleMode = scaleMode !== undefined ? scaleMode : _settings2.default.SCALE_MODE;\n\n    /**\n     * Set to true once the base texture has successfully loaded.\n     *\n     * This is never true if the underlying source fails to load or has no texture data.\n     *\n     * @readonly\n     * @member {boolean}\n     */\n    _this.hasLoaded = false;\n\n    /**\n     * Set to true if the source is currently loading.\n     *\n     * If an Image source is loading the 'loaded' or 'error' event will be\n     * dispatched when the operation ends. An underyling source that is\n     * immediately-available bypasses loading entirely.\n     *\n     * @readonly\n     * @member {boolean}\n     */\n    _this.isLoading = false;\n\n    /**\n     * The image source that is used to create the texture.\n     *\n     * TODO: Make this a setter that calls loadSource();\n     *\n     * @readonly\n     * @member {HTMLImageElement|HTMLCanvasElement}\n     */\n    _this.source = null; // set in loadSource, if at all\n\n    /**\n     * The image source that is used to create the texture. This is used to\n     * store the original Svg source when it is replaced with a canvas element.\n     *\n     * TODO: Currently not in use but could be used when re-scaling svg.\n     *\n     * @readonly\n     * @member {Image}\n     */\n    _this.origSource = null; // set in loadSvg, if at all\n\n    /**\n     * Type of image defined in source, eg. `png` or `svg`\n     *\n     * @readonly\n     * @member {string}\n     */\n    _this.imageType = null; // set in updateImageType\n\n    /**\n     * Scale for source image. Used with Svg images to scale them before rasterization.\n     *\n     * @readonly\n     * @member {number}\n     */\n    _this.sourceScale = 1.0;\n\n    /**\n     * Controls if RGB channels should be pre-multiplied by Alpha  (WebGL only)\n     * All blend modes, and shaders written for default value. Change it on your own risk.\n     *\n     * @member {boolean}\n     * @default true\n     */\n    _this.premultipliedAlpha = true;\n\n    /**\n     * The image url of the texture\n     *\n     * @member {string}\n     */\n    _this.imageUrl = null;\n\n    /**\n     * Whether or not the texture is a power of two, try to use power of two textures as much\n     * as you can\n     *\n     * @private\n     * @member {boolean}\n     */\n    _this.isPowerOfTwo = false;\n\n    // used for webGL\n\n    /**\n     *\n     * Set this to true if a mipmap of this texture needs to be generated. This value needs\n     * to be set before the texture is used\n     * Also the texture must be a power of two size to work\n     *\n     * @member {boolean}\n     * @see PIXI.MIPMAP_TEXTURES\n     */\n    _this.mipmap = _settings2.default.MIPMAP_TEXTURES;\n\n    /**\n     *\n     * WebGL Texture wrap mode\n     *\n     * @member {number}\n     * @see PIXI.WRAP_MODES\n     */\n    _this.wrapMode = _settings2.default.WRAP_MODE;\n\n    /**\n     * A map of renderer IDs to webgl textures\n     *\n     * @private\n     * @member {object<number, WebGLTexture>}\n     */\n    _this._glTextures = {};\n    _this._enabled = 0;\n    _this._virtalBoundId = -1;\n\n    /**\n     * If the object has been destroyed via destroy(). If true, it should not be used.\n     *\n     * @member {boolean}\n     * @private\n     * @readonly\n     */\n    _this._destroyed = false;\n\n    /**\n     * The ids under which this BaseTexture has been added to the base texture cache. This is\n     * automatically set as long as BaseTexture.addToCache is used, but may not be set if a\n     * BaseTexture is added directly to the BaseTextureCache array.\n     *\n     * @member {string[]}\n     */\n    _this.textureCacheIds = [];\n\n    // if no source passed don't try to load\n    if (source) {\n      _this.loadSource(source);\n    }\n\n    /**\n     * Fired when a not-immediately-available source finishes loading.\n     *\n     * @protected\n     * @event PIXI.BaseTexture#loaded\n     * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n     */\n\n    /**\n     * Fired when a not-immediately-available source fails to load.\n     *\n     * @protected\n     * @event PIXI.BaseTexture#error\n     * @param {PIXI.BaseTexture} baseTexture - Resource errored.\n     */\n\n    /**\n     * Fired when BaseTexture is updated.\n     *\n     * @protected\n     * @event PIXI.BaseTexture#update\n     * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.\n     */\n\n    /**\n     * Fired when BaseTexture is destroyed.\n     *\n     * @protected\n     * @event PIXI.BaseTexture#dispose\n     * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.\n     */\n    return _this;\n  }\n\n  /**\n   * Updates the texture on all the webgl renderers, this also assumes the src has changed.\n   *\n   * @fires PIXI.BaseTexture#update\n   */\n\n  BaseTexture.prototype.update = function update() {\n    // Svg size is handled during load\n    if (this.imageType !== 'svg') {\n      this.realWidth = this.source.naturalWidth || this.source.videoWidth || this.source.width;\n      this.realHeight = this.source.naturalHeight || this.source.videoHeight || this.source.height;\n      this._updateDimensions();\n    }\n    this.emit('update', this);\n  };\n\n  /**\n   * Update dimensions from real values\n   */\n\n  BaseTexture.prototype._updateDimensions = function _updateDimensions() {\n    this.width = this.realWidth / this.resolution;\n    this.height = this.realHeight / this.resolution;\n    this.isPowerOfTwo = _bitTwiddle2.default.isPow2(this.realWidth) && _bitTwiddle2.default.isPow2(this.realHeight);\n  };\n\n  /**\n   * Load a source.\n   *\n   * If the source is not-immediately-available, such as an image that needs to be\n   * downloaded, then the 'loaded' or 'error' event will be dispatched in the future\n   * and `hasLoaded` will remain false after this call.\n   *\n   * The logic state after calling `loadSource` directly or indirectly (eg. `fromImage`, `new BaseTexture`) is:\n   *\n   *     if (texture.hasLoaded) {\n   *        // texture ready for use\n   *     } else if (texture.isLoading) {\n   *        // listen to 'loaded' and/or 'error' events on texture\n   *     } else {\n   *        // not loading, not going to load UNLESS the source is reloaded\n   *        // (it may still make sense to listen to the events)\n   *     }\n   *\n   * @protected\n   * @param {HTMLImageElement|HTMLCanvasElement} source - the source object of the texture.\n   */\n\n  BaseTexture.prototype.loadSource = function loadSource(source) {\n    var wasLoading = this.isLoading;\n    this.hasLoaded = false;\n    this.isLoading = false;\n    if (wasLoading && this.source) {\n      this.source.onload = null;\n      this.source.onerror = null;\n    }\n    var firstSourceLoaded = !this.source;\n    this.source = source;\n\n    // Apply source if loaded. Otherwise setup appropriate loading monitors.\n    if ((source.src && source.complete || source.getContext) && source.width && source.height) {\n      this._updateImageType();\n      if (this.imageType === 'svg') {\n        this._loadSvgSource();\n      } else {\n        this._sourceLoaded();\n      }\n      if (firstSourceLoaded) {\n        // send loaded event if previous source was null and we have been passed a pre-loaded IMG element\n        this.emit('loaded', this);\n      }\n    } else if (!source.getContext) {\n      // Image fail / not ready\n      this.isLoading = true;\n      var scope = this;\n      source.onload = function () {\n        scope._updateImageType();\n        source.onload = null;\n        source.onerror = null;\n        if (!scope.isLoading) {\n          return;\n        }\n        scope.isLoading = false;\n        scope._sourceLoaded();\n        if (scope.imageType === 'svg') {\n          scope._loadSvgSource();\n          return;\n        }\n        scope.emit('loaded', scope);\n      };\n      source.onerror = function () {\n        source.onload = null;\n        source.onerror = null;\n        if (!scope.isLoading) {\n          return;\n        }\n        scope.isLoading = false;\n        scope.emit('error', scope);\n      };\n\n      // Per http://www.w3.org/TR/html5/embedded-content-0.html#the-img-element\n      //   \"The value of `complete` can thus change while a script is executing.\"\n      // So complete needs to be re-checked after the callbacks have been added..\n      // NOTE: complete will be true if the image has no src so best to check if the src is set.\n      if (source.complete && source.src) {\n        // ..and if we're complete now, no need for callbacks\n        source.onload = null;\n        source.onerror = null;\n        if (scope.imageType === 'svg') {\n          scope._loadSvgSource();\n          return;\n        }\n        this.isLoading = false;\n        if (source.width && source.height) {\n          this._sourceLoaded();\n\n          // If any previous subscribers possible\n          if (wasLoading) {\n            this.emit('loaded', this);\n          }\n        }\n        // If any previous subscribers possible\n        else if (wasLoading) {\n          this.emit('error', this);\n        }\n      }\n    }\n  };\n\n  /**\n   * Updates type of the source image.\n   */\n\n  BaseTexture.prototype._updateImageType = function _updateImageType() {\n    if (!this.imageUrl) {\n      return;\n    }\n    var dataUri = (0, _utils.decomposeDataUri)(this.imageUrl);\n    var imageType = void 0;\n    if (dataUri && dataUri.mediaType === 'image') {\n      // Check for subType validity\n      var firstSubType = dataUri.subType.split('+')[0];\n      imageType = (0, _utils.getUrlFileExtension)('.' + firstSubType);\n      if (!imageType) {\n        throw new Error('Invalid image type in data URI.');\n      }\n    } else {\n      imageType = (0, _utils.getUrlFileExtension)(this.imageUrl);\n      if (!imageType) {\n        imageType = 'png';\n      }\n    }\n    this.imageType = imageType;\n  };\n\n  /**\n   * Checks if `source` is an SVG image and whether it's loaded via a URL or a data URI. Then calls\n   * `_loadSvgSourceUsingDataUri` or `_loadSvgSourceUsingXhr`.\n   */\n\n  BaseTexture.prototype._loadSvgSource = function _loadSvgSource() {\n    if (this.imageType !== 'svg') {\n      // Do nothing if source is not svg\n      return;\n    }\n    var dataUri = (0, _utils.decomposeDataUri)(this.imageUrl);\n    if (dataUri) {\n      this._loadSvgSourceUsingDataUri(dataUri);\n    } else {\n      // We got an URL, so we need to do an XHR to check the svg size\n      this._loadSvgSourceUsingXhr();\n    }\n  };\n\n  /**\n   * Reads an SVG string from data URI and then calls `_loadSvgSourceUsingString`.\n   *\n   * @param {string} dataUri - The data uri to load from.\n   */\n\n  BaseTexture.prototype._loadSvgSourceUsingDataUri = function _loadSvgSourceUsingDataUri(dataUri) {\n    var svgString = void 0;\n    if (dataUri.encoding === 'base64') {\n      if (!atob) {\n        throw new Error('Your browser doesn\\'t support base64 conversions.');\n      }\n      svgString = atob(dataUri.data);\n    } else {\n      svgString = dataUri.data;\n    }\n    this._loadSvgSourceUsingString(svgString);\n  };\n\n  /**\n   * Loads an SVG string from `imageUrl` using XHR and then calls `_loadSvgSourceUsingString`.\n   */\n\n  BaseTexture.prototype._loadSvgSourceUsingXhr = function _loadSvgSourceUsingXhr() {\n    var _this2 = this;\n    var svgXhr = new XMLHttpRequest();\n\n    // This throws error on IE, so SVG Document can't be used\n    // svgXhr.responseType = 'document';\n\n    // This is not needed since we load the svg as string (breaks IE too)\n    // but overrideMimeType() can be used to force the response to be parsed as XML\n    // svgXhr.overrideMimeType('image/svg+xml');\n\n    svgXhr.onload = function () {\n      if (svgXhr.readyState !== svgXhr.DONE || svgXhr.status !== 200) {\n        throw new Error('Failed to load SVG using XHR.');\n      }\n      _this2._loadSvgSourceUsingString(svgXhr.response);\n    };\n    svgXhr.onerror = function () {\n      return _this2.emit('error', _this2);\n    };\n    svgXhr.open('GET', this.imageUrl, true);\n    svgXhr.send();\n  };\n\n  /**\n   * Loads texture using an SVG string. The original SVG Image is stored as `origSource` and the\n   * created canvas is the new `source`. The SVG is scaled using `sourceScale`. Called by\n   * `_loadSvgSourceUsingXhr` or `_loadSvgSourceUsingDataUri`.\n   *\n   * @param  {string} svgString SVG source as string\n   *\n   * @fires PIXI.BaseTexture#loaded\n   */\n\n  BaseTexture.prototype._loadSvgSourceUsingString = function _loadSvgSourceUsingString(svgString) {\n    var svgSize = (0, _utils.getSvgSize)(svgString);\n    var svgWidth = svgSize.width;\n    var svgHeight = svgSize.height;\n    if (!svgWidth || !svgHeight) {\n      throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');\n    }\n\n    // Scale realWidth and realHeight\n    this.realWidth = Math.round(svgWidth * this.sourceScale);\n    this.realHeight = Math.round(svgHeight * this.sourceScale);\n    this._updateDimensions();\n\n    // Create a canvas element\n    var canvas = document.createElement('canvas');\n    canvas.width = this.realWidth;\n    canvas.height = this.realHeight;\n    canvas._pixiId = 'canvas_' + (0, _utils.uid)();\n\n    // Draw the Svg to the canvas\n    canvas.getContext('2d').drawImage(this.source, 0, 0, svgWidth, svgHeight, 0, 0, this.realWidth, this.realHeight);\n\n    // Replace the original source image with the canvas\n    this.origSource = this.source;\n    this.source = canvas;\n\n    // Add also the canvas in cache (destroy clears by `imageUrl` and `source._pixiId`)\n    BaseTexture.addToCache(this, canvas._pixiId);\n    this.isLoading = false;\n    this._sourceLoaded();\n    this.emit('loaded', this);\n  };\n\n  /**\n   * Used internally to update the width, height, and some other tracking vars once\n   * a source has successfully loaded.\n   *\n   * @private\n   */\n\n  BaseTexture.prototype._sourceLoaded = function _sourceLoaded() {\n    this.hasLoaded = true;\n    this.update();\n  };\n\n  /**\n   * Destroys this base texture\n   *\n   */\n\n  BaseTexture.prototype.destroy = function destroy() {\n    if (this.imageUrl) {\n      delete _utils.TextureCache[this.imageUrl];\n      this.imageUrl = null;\n      if (!navigator.isCocoonJS) {\n        this.source.src = '';\n      }\n    }\n    this.source = null;\n    this.dispose();\n    BaseTexture.removeFromCache(this);\n    this.textureCacheIds = null;\n    this._destroyed = true;\n  };\n\n  /**\n   * Frees the texture from WebGL memory without destroying this texture object.\n   * This means you can still use the texture later which will upload it to GPU\n   * memory again.\n   *\n   * @fires PIXI.BaseTexture#dispose\n   */\n\n  BaseTexture.prototype.dispose = function dispose() {\n    this.emit('dispose', this);\n  };\n\n  /**\n   * Changes the source image of the texture.\n   * The original source must be an Image element.\n   *\n   * @param {string} newSrc - the path of the image\n   */\n\n  BaseTexture.prototype.updateSourceImage = function updateSourceImage(newSrc) {\n    this.source.src = newSrc;\n    this.loadSource(this.source);\n  };\n\n  /**\n   * Helper function that creates a base texture from the given image url.\n   * If the image is not in the base texture cache it will be created and loaded.\n   *\n   * @static\n   * @param {string} imageUrl - The image url of the texture\n   * @param {boolean} [crossorigin=(auto)] - Should use anonymous CORS? Defaults to true if the URL is not a data-URI.\n   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n   * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n   * @return {PIXI.BaseTexture} The new base texture.\n   */\n\n  BaseTexture.fromImage = function fromImage(imageUrl, crossorigin, scaleMode, sourceScale) {\n    var baseTexture = _utils.BaseTextureCache[imageUrl];\n    if (!baseTexture) {\n      // new Image() breaks tex loading in some versions of Chrome.\n      // See https://code.google.com/p/chromium/issues/detail?id=238071\n      var image = new Image(); // document.createElement('img');\n\n      if (crossorigin === undefined && imageUrl.indexOf('data:') !== 0) {\n        image.crossOrigin = (0, _determineCrossOrigin2.default)(imageUrl);\n      } else if (crossorigin) {\n        image.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';\n      }\n      baseTexture = new BaseTexture(image, scaleMode);\n      baseTexture.imageUrl = imageUrl;\n      if (sourceScale) {\n        baseTexture.sourceScale = sourceScale;\n      }\n\n      // if there is an @2x at the end of the url we are going to assume its a highres image\n      baseTexture.resolution = (0, _utils.getResolutionOfUrl)(imageUrl);\n      image.src = imageUrl; // Setting this triggers load\n\n      BaseTexture.addToCache(baseTexture, imageUrl);\n    }\n    return baseTexture;\n  };\n\n  /**\n   * Helper function that creates a base texture from the given canvas element.\n   *\n   * @static\n   * @param {HTMLCanvasElement} canvas - The canvas element source of the texture\n   * @param {number} scaleMode - See {@link PIXI.SCALE_MODES} for possible values\n   * @param {string} [origin='canvas'] - A string origin of who created the base texture\n   * @return {PIXI.BaseTexture} The new base texture.\n   */\n\n  BaseTexture.fromCanvas = function fromCanvas(canvas, scaleMode) {\n    var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'canvas';\n    if (!canvas._pixiId) {\n      canvas._pixiId = origin + '_' + (0, _utils.uid)();\n    }\n    var baseTexture = _utils.BaseTextureCache[canvas._pixiId];\n    if (!baseTexture) {\n      baseTexture = new BaseTexture(canvas, scaleMode);\n      BaseTexture.addToCache(baseTexture, canvas._pixiId);\n    }\n    return baseTexture;\n  };\n\n  /**\n   * Helper function that creates a base texture based on the source you provide.\n   * The source can be - image url, image element, canvas element. If the\n   * source is an image url or an image element and not in the base texture\n   * cache, it will be created and loaded.\n   *\n   * @static\n   * @param {string|HTMLImageElement|HTMLCanvasElement} source - The source to create base texture from.\n   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n   * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n   * @return {PIXI.BaseTexture} The new base texture.\n   */\n\n  BaseTexture.from = function from(source, scaleMode, sourceScale) {\n    if (typeof source === 'string') {\n      return BaseTexture.fromImage(source, undefined, scaleMode, sourceScale);\n    } else if (source instanceof HTMLImageElement) {\n      var imageUrl = source.src;\n      var baseTexture = _utils.BaseTextureCache[imageUrl];\n      if (!baseTexture) {\n        baseTexture = new BaseTexture(source, scaleMode);\n        baseTexture.imageUrl = imageUrl;\n        if (sourceScale) {\n          baseTexture.sourceScale = sourceScale;\n        }\n\n        // if there is an @2x at the end of the url we are going to assume its a highres image\n        baseTexture.resolution = (0, _utils.getResolutionOfUrl)(imageUrl);\n        BaseTexture.addToCache(baseTexture, imageUrl);\n      }\n      return baseTexture;\n    } else if (source instanceof HTMLCanvasElement) {\n      return BaseTexture.fromCanvas(source, scaleMode);\n    }\n\n    // lets assume its a base texture!\n    return source;\n  };\n\n  /**\n   * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n   *\n   * @static\n   * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n   * @param {string} id - The id that the BaseTexture will be stored against.\n   */\n\n  BaseTexture.addToCache = function addToCache(baseTexture, id) {\n    if (id) {\n      if (baseTexture.textureCacheIds.indexOf(id) === -1) {\n        baseTexture.textureCacheIds.push(id);\n      }\n\n      // @if DEBUG\n      /* eslint-disable no-console */\n      if (_utils.BaseTextureCache[id]) {\n        console.warn('BaseTexture added to the cache with an id [' + id + '] that already had an entry');\n      }\n      /* eslint-enable no-console */\n      // @endif\n\n      _utils.BaseTextureCache[id] = baseTexture;\n    }\n  };\n\n  /**\n   * Remove a BaseTexture from the global BaseTextureCache.\n   *\n   * @static\n   * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n   * @return {PIXI.BaseTexture|null} The BaseTexture that was removed.\n   */\n\n  BaseTexture.removeFromCache = function removeFromCache(baseTexture) {\n    if (typeof baseTexture === 'string') {\n      var baseTextureFromCache = _utils.BaseTextureCache[baseTexture];\n      if (baseTextureFromCache) {\n        var index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n        if (index > -1) {\n          baseTextureFromCache.textureCacheIds.splice(index, 1);\n        }\n        delete _utils.BaseTextureCache[baseTexture];\n        return baseTextureFromCache;\n      }\n    } else if (baseTexture && baseTexture.textureCacheIds) {\n      for (var i = 0; i < baseTexture.textureCacheIds.length; ++i) {\n        delete _utils.BaseTextureCache[baseTexture.textureCacheIds[i]];\n      }\n      baseTexture.textureCacheIds.length = 0;\n      return baseTexture;\n    }\n    return null;\n  };\n  return BaseTexture;\n}(_eventemitter2.default);\nexports.default = BaseTexture;","map":{"version":3,"names":["_utils","require","_settings","_eventemitter","_determineCrossOrigin","_bitTwiddle","BaseTexture","source","scaleMode","resolution","_classCallCheck","_this","_possibleConstructorReturn","_EventEmitter","call","uid","touched","_settings2","default","RESOLUTION","width","height","realWidth","realHeight","undefined","SCALE_MODE","hasLoaded","isLoading","origSource","imageType","sourceScale","premultipliedAlpha","imageUrl","isPowerOfTwo","mipmap","MIPMAP_TEXTURES","wrapMode","WRAP_MODE","_glTextures","_enabled","_virtalBoundId","_destroyed","textureCacheIds","loadSource","update","naturalWidth","videoWidth","naturalHeight","videoHeight","_updateDimensions","emit","_bitTwiddle2","isPow2","wasLoading","onload","onerror","firstSourceLoaded","src","complete","getContext","_updateImageType","_loadSvgSource","_sourceLoaded","scope","dataUri","decomposeDataUri","mediaType","firstSubType","subType","split","getUrlFileExtension","Error","_loadSvgSourceUsingDataUri","_loadSvgSourceUsingXhr","svgString","encoding","atob","data","_loadSvgSourceUsingString","_this2","svgXhr","XMLHttpRequest","readyState","DONE","status","response","open","send","svgSize","getSvgSize","svgWidth","svgHeight","Math","round","canvas","document","createElement","_pixiId","drawImage","addToCache","destroy","TextureCache","navigator","isCocoonJS","dispose","removeFromCache","updateSourceImage","newSrc","fromImage","crossorigin","baseTexture","BaseTextureCache","image","Image","indexOf","crossOrigin","_determineCrossOrigin2","getResolutionOfUrl","fromCanvas","origin","arguments","length","from","HTMLImageElement","HTMLCanvasElement","id","push","console","warn","baseTextureFromCache","index","splice","i"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/textures/BaseTexture.js"],"sourcesContent":["import {\n    uid, getUrlFileExtension, decomposeDataUri, getSvgSize,\n    getResolutionOfUrl, BaseTextureCache, TextureCache,\n} from '../utils';\nimport settings from '../settings';\nimport EventEmitter from 'eventemitter3';\nimport determineCrossOrigin from '../utils/determineCrossOrigin';\nimport bitTwiddle from 'bit-twiddle';\n\n/**\n * A texture stores the information that represents an image. All textures have a base texture.\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nexport default class BaseTexture extends EventEmitter\n{\n    /**\n     * @param {HTMLImageElement|HTMLCanvasElement} [source] - the source object of the texture.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture\n     */\n    constructor(source, scaleMode, resolution)\n    {\n        super();\n\n        this.uid = uid();\n\n        this.touched = 0;\n\n        /**\n         * The resolution / device pixel ratio of the texture\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = resolution || settings.RESOLUTION;\n\n        /**\n         * The width of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.width = 100;\n\n        /**\n         * The height of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.height = 100;\n\n        // TODO docs\n        // used to store the actual dimensions of the source\n        /**\n         * Used to store the actual width of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.realWidth = 100;\n        /**\n         * Used to store the actual height of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.realHeight = 100;\n\n        /**\n         * The scale mode to apply when scaling this texture\n         *\n         * @member {number}\n         * @default PIXI.settings.SCALE_MODE\n         * @see PIXI.SCALE_MODES\n         */\n        this.scaleMode = scaleMode !== undefined ? scaleMode : settings.SCALE_MODE;\n\n        /**\n         * Set to true once the base texture has successfully loaded.\n         *\n         * This is never true if the underlying source fails to load or has no texture data.\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.hasLoaded = false;\n\n        /**\n         * Set to true if the source is currently loading.\n         *\n         * If an Image source is loading the 'loaded' or 'error' event will be\n         * dispatched when the operation ends. An underyling source that is\n         * immediately-available bypasses loading entirely.\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.isLoading = false;\n\n        /**\n         * The image source that is used to create the texture.\n         *\n         * TODO: Make this a setter that calls loadSource();\n         *\n         * @readonly\n         * @member {HTMLImageElement|HTMLCanvasElement}\n         */\n        this.source = null; // set in loadSource, if at all\n\n        /**\n         * The image source that is used to create the texture. This is used to\n         * store the original Svg source when it is replaced with a canvas element.\n         *\n         * TODO: Currently not in use but could be used when re-scaling svg.\n         *\n         * @readonly\n         * @member {Image}\n         */\n        this.origSource = null; // set in loadSvg, if at all\n\n        /**\n         * Type of image defined in source, eg. `png` or `svg`\n         *\n         * @readonly\n         * @member {string}\n         */\n        this.imageType = null; // set in updateImageType\n\n        /**\n         * Scale for source image. Used with Svg images to scale them before rasterization.\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.sourceScale = 1.0;\n\n        /**\n         * Controls if RGB channels should be pre-multiplied by Alpha  (WebGL only)\n         * All blend modes, and shaders written for default value. Change it on your own risk.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.premultipliedAlpha = true;\n\n        /**\n         * The image url of the texture\n         *\n         * @member {string}\n         */\n        this.imageUrl = null;\n\n        /**\n         * Whether or not the texture is a power of two, try to use power of two textures as much\n         * as you can\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.isPowerOfTwo = false;\n\n        // used for webGL\n\n        /**\n         *\n         * Set this to true if a mipmap of this texture needs to be generated. This value needs\n         * to be set before the texture is used\n         * Also the texture must be a power of two size to work\n         *\n         * @member {boolean}\n         * @see PIXI.MIPMAP_TEXTURES\n         */\n        this.mipmap = settings.MIPMAP_TEXTURES;\n\n        /**\n         *\n         * WebGL Texture wrap mode\n         *\n         * @member {number}\n         * @see PIXI.WRAP_MODES\n         */\n        this.wrapMode = settings.WRAP_MODE;\n\n        /**\n         * A map of renderer IDs to webgl textures\n         *\n         * @private\n         * @member {object<number, WebGLTexture>}\n         */\n        this._glTextures = {};\n\n        this._enabled = 0;\n        this._virtalBoundId = -1;\n\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean}\n         * @private\n         * @readonly\n         */\n        this._destroyed = false;\n\n        /**\n         * The ids under which this BaseTexture has been added to the base texture cache. This is\n         * automatically set as long as BaseTexture.addToCache is used, but may not be set if a\n         * BaseTexture is added directly to the BaseTextureCache array.\n         *\n         * @member {string[]}\n         */\n        this.textureCacheIds = [];\n\n        // if no source passed don't try to load\n        if (source)\n        {\n            this.loadSource(source);\n        }\n\n        /**\n         * Fired when a not-immediately-available source finishes loading.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when a not-immediately-available source fails to load.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#error\n         * @param {PIXI.BaseTexture} baseTexture - Resource errored.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#update\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.\n         */\n\n        /**\n         * Fired when BaseTexture is destroyed.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#dispose\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.\n         */\n    }\n\n    /**\n     * Updates the texture on all the webgl renderers, this also assumes the src has changed.\n     *\n     * @fires PIXI.BaseTexture#update\n     */\n    update()\n    {\n        // Svg size is handled during load\n        if (this.imageType !== 'svg')\n        {\n            this.realWidth = this.source.naturalWidth || this.source.videoWidth || this.source.width;\n            this.realHeight = this.source.naturalHeight || this.source.videoHeight || this.source.height;\n\n            this._updateDimensions();\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Update dimensions from real values\n     */\n    _updateDimensions()\n    {\n        this.width = this.realWidth / this.resolution;\n        this.height = this.realHeight / this.resolution;\n\n        this.isPowerOfTwo = bitTwiddle.isPow2(this.realWidth) && bitTwiddle.isPow2(this.realHeight);\n    }\n\n    /**\n     * Load a source.\n     *\n     * If the source is not-immediately-available, such as an image that needs to be\n     * downloaded, then the 'loaded' or 'error' event will be dispatched in the future\n     * and `hasLoaded` will remain false after this call.\n     *\n     * The logic state after calling `loadSource` directly or indirectly (eg. `fromImage`, `new BaseTexture`) is:\n     *\n     *     if (texture.hasLoaded) {\n     *        // texture ready for use\n     *     } else if (texture.isLoading) {\n     *        // listen to 'loaded' and/or 'error' events on texture\n     *     } else {\n     *        // not loading, not going to load UNLESS the source is reloaded\n     *        // (it may still make sense to listen to the events)\n     *     }\n     *\n     * @protected\n     * @param {HTMLImageElement|HTMLCanvasElement} source - the source object of the texture.\n     */\n    loadSource(source)\n    {\n        const wasLoading = this.isLoading;\n\n        this.hasLoaded = false;\n        this.isLoading = false;\n\n        if (wasLoading && this.source)\n        {\n            this.source.onload = null;\n            this.source.onerror = null;\n        }\n\n        const firstSourceLoaded = !this.source;\n\n        this.source = source;\n\n        // Apply source if loaded. Otherwise setup appropriate loading monitors.\n        if (((source.src && source.complete) || source.getContext) && source.width && source.height)\n        {\n            this._updateImageType();\n\n            if (this.imageType === 'svg')\n            {\n                this._loadSvgSource();\n            }\n            else\n            {\n                this._sourceLoaded();\n            }\n\n            if (firstSourceLoaded)\n            {\n                // send loaded event if previous source was null and we have been passed a pre-loaded IMG element\n                this.emit('loaded', this);\n            }\n        }\n        else if (!source.getContext)\n        {\n            // Image fail / not ready\n            this.isLoading = true;\n\n            const scope = this;\n\n            source.onload = () =>\n            {\n                scope._updateImageType();\n                source.onload = null;\n                source.onerror = null;\n\n                if (!scope.isLoading)\n                {\n                    return;\n                }\n\n                scope.isLoading = false;\n                scope._sourceLoaded();\n\n                if (scope.imageType === 'svg')\n                {\n                    scope._loadSvgSource();\n\n                    return;\n                }\n\n                scope.emit('loaded', scope);\n            };\n\n            source.onerror = () =>\n            {\n                source.onload = null;\n                source.onerror = null;\n\n                if (!scope.isLoading)\n                {\n                    return;\n                }\n\n                scope.isLoading = false;\n                scope.emit('error', scope);\n            };\n\n            // Per http://www.w3.org/TR/html5/embedded-content-0.html#the-img-element\n            //   \"The value of `complete` can thus change while a script is executing.\"\n            // So complete needs to be re-checked after the callbacks have been added..\n            // NOTE: complete will be true if the image has no src so best to check if the src is set.\n            if (source.complete && source.src)\n            {\n                // ..and if we're complete now, no need for callbacks\n                source.onload = null;\n                source.onerror = null;\n\n                if (scope.imageType === 'svg')\n                {\n                    scope._loadSvgSource();\n\n                    return;\n                }\n\n                this.isLoading = false;\n\n                if (source.width && source.height)\n                {\n                    this._sourceLoaded();\n\n                    // If any previous subscribers possible\n                    if (wasLoading)\n                    {\n                        this.emit('loaded', this);\n                    }\n                }\n                // If any previous subscribers possible\n                else if (wasLoading)\n                {\n                    this.emit('error', this);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates type of the source image.\n     */\n    _updateImageType()\n    {\n        if (!this.imageUrl)\n        {\n            return;\n        }\n\n        const dataUri = decomposeDataUri(this.imageUrl);\n        let imageType;\n\n        if (dataUri && dataUri.mediaType === 'image')\n        {\n            // Check for subType validity\n            const firstSubType = dataUri.subType.split('+')[0];\n\n            imageType = getUrlFileExtension(`.${firstSubType}`);\n\n            if (!imageType)\n            {\n                throw new Error('Invalid image type in data URI.');\n            }\n        }\n        else\n        {\n            imageType = getUrlFileExtension(this.imageUrl);\n\n            if (!imageType)\n            {\n                imageType = 'png';\n            }\n        }\n\n        this.imageType = imageType;\n    }\n\n    /**\n     * Checks if `source` is an SVG image and whether it's loaded via a URL or a data URI. Then calls\n     * `_loadSvgSourceUsingDataUri` or `_loadSvgSourceUsingXhr`.\n     */\n    _loadSvgSource()\n    {\n        if (this.imageType !== 'svg')\n        {\n            // Do nothing if source is not svg\n            return;\n        }\n\n        const dataUri = decomposeDataUri(this.imageUrl);\n\n        if (dataUri)\n        {\n            this._loadSvgSourceUsingDataUri(dataUri);\n        }\n        else\n        {\n            // We got an URL, so we need to do an XHR to check the svg size\n            this._loadSvgSourceUsingXhr();\n        }\n    }\n\n    /**\n     * Reads an SVG string from data URI and then calls `_loadSvgSourceUsingString`.\n     *\n     * @param {string} dataUri - The data uri to load from.\n     */\n    _loadSvgSourceUsingDataUri(dataUri)\n    {\n        let svgString;\n\n        if (dataUri.encoding === 'base64')\n        {\n            if (!atob)\n            {\n                throw new Error('Your browser doesn\\'t support base64 conversions.');\n            }\n            svgString = atob(dataUri.data);\n        }\n        else\n        {\n            svgString = dataUri.data;\n        }\n\n        this._loadSvgSourceUsingString(svgString);\n    }\n\n    /**\n     * Loads an SVG string from `imageUrl` using XHR and then calls `_loadSvgSourceUsingString`.\n     */\n    _loadSvgSourceUsingXhr()\n    {\n        const svgXhr = new XMLHttpRequest();\n\n        // This throws error on IE, so SVG Document can't be used\n        // svgXhr.responseType = 'document';\n\n        // This is not needed since we load the svg as string (breaks IE too)\n        // but overrideMimeType() can be used to force the response to be parsed as XML\n        // svgXhr.overrideMimeType('image/svg+xml');\n\n        svgXhr.onload = () =>\n        {\n            if (svgXhr.readyState !== svgXhr.DONE || svgXhr.status !== 200)\n            {\n                throw new Error('Failed to load SVG using XHR.');\n            }\n\n            this._loadSvgSourceUsingString(svgXhr.response);\n        };\n\n        svgXhr.onerror = () => this.emit('error', this);\n\n        svgXhr.open('GET', this.imageUrl, true);\n        svgXhr.send();\n    }\n\n    /**\n     * Loads texture using an SVG string. The original SVG Image is stored as `origSource` and the\n     * created canvas is the new `source`. The SVG is scaled using `sourceScale`. Called by\n     * `_loadSvgSourceUsingXhr` or `_loadSvgSourceUsingDataUri`.\n     *\n     * @param  {string} svgString SVG source as string\n     *\n     * @fires PIXI.BaseTexture#loaded\n     */\n    _loadSvgSourceUsingString(svgString)\n    {\n        const svgSize = getSvgSize(svgString);\n\n        const svgWidth = svgSize.width;\n        const svgHeight = svgSize.height;\n\n        if (!svgWidth || !svgHeight)\n        {\n            throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');\n        }\n\n        // Scale realWidth and realHeight\n        this.realWidth = Math.round(svgWidth * this.sourceScale);\n        this.realHeight = Math.round(svgHeight * this.sourceScale);\n\n        this._updateDimensions();\n\n        // Create a canvas element\n        const canvas = document.createElement('canvas');\n\n        canvas.width = this.realWidth;\n        canvas.height = this.realHeight;\n        canvas._pixiId = `canvas_${uid()}`;\n\n        // Draw the Svg to the canvas\n        canvas\n            .getContext('2d')\n            .drawImage(this.source, 0, 0, svgWidth, svgHeight, 0, 0, this.realWidth, this.realHeight);\n\n        // Replace the original source image with the canvas\n        this.origSource = this.source;\n        this.source = canvas;\n\n        // Add also the canvas in cache (destroy clears by `imageUrl` and `source._pixiId`)\n        BaseTexture.addToCache(this, canvas._pixiId);\n\n        this.isLoading = false;\n        this._sourceLoaded();\n        this.emit('loaded', this);\n    }\n\n    /**\n     * Used internally to update the width, height, and some other tracking vars once\n     * a source has successfully loaded.\n     *\n     * @private\n     */\n    _sourceLoaded()\n    {\n        this.hasLoaded = true;\n        this.update();\n    }\n\n    /**\n     * Destroys this base texture\n     *\n     */\n    destroy()\n    {\n        if (this.imageUrl)\n        {\n            delete TextureCache[this.imageUrl];\n\n            this.imageUrl = null;\n\n            if (!navigator.isCocoonJS)\n            {\n                this.source.src = '';\n            }\n        }\n\n        this.source = null;\n\n        this.dispose();\n\n        BaseTexture.removeFromCache(this);\n        this.textureCacheIds = null;\n\n        this._destroyed = true;\n    }\n\n    /**\n     * Frees the texture from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     *\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose()\n    {\n        this.emit('dispose', this);\n    }\n\n    /**\n     * Changes the source image of the texture.\n     * The original source must be an Image element.\n     *\n     * @param {string} newSrc - the path of the image\n     */\n    updateSourceImage(newSrc)\n    {\n        this.source.src = newSrc;\n\n        this.loadSource(this.source);\n    }\n\n    /**\n     * Helper function that creates a base texture from the given image url.\n     * If the image is not in the base texture cache it will be created and loaded.\n     *\n     * @static\n     * @param {string} imageUrl - The image url of the texture\n     * @param {boolean} [crossorigin=(auto)] - Should use anonymous CORS? Defaults to true if the URL is not a data-URI.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static fromImage(imageUrl, crossorigin, scaleMode, sourceScale)\n    {\n        let baseTexture = BaseTextureCache[imageUrl];\n\n        if (!baseTexture)\n        {\n            // new Image() breaks tex loading in some versions of Chrome.\n            // See https://code.google.com/p/chromium/issues/detail?id=238071\n            const image = new Image();// document.createElement('img');\n\n            if (crossorigin === undefined && imageUrl.indexOf('data:') !== 0)\n            {\n                image.crossOrigin = determineCrossOrigin(imageUrl);\n            }\n            else if (crossorigin)\n            {\n                image.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';\n            }\n\n            baseTexture = new BaseTexture(image, scaleMode);\n            baseTexture.imageUrl = imageUrl;\n\n            if (sourceScale)\n            {\n                baseTexture.sourceScale = sourceScale;\n            }\n\n            // if there is an @2x at the end of the url we are going to assume its a highres image\n            baseTexture.resolution = getResolutionOfUrl(imageUrl);\n\n            image.src = imageUrl; // Setting this triggers load\n\n            BaseTexture.addToCache(baseTexture, imageUrl);\n        }\n\n        return baseTexture;\n    }\n\n    /**\n     * Helper function that creates a base texture from the given canvas element.\n     *\n     * @static\n     * @param {HTMLCanvasElement} canvas - The canvas element source of the texture\n     * @param {number} scaleMode - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {string} [origin='canvas'] - A string origin of who created the base texture\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static fromCanvas(canvas, scaleMode, origin = 'canvas')\n    {\n        if (!canvas._pixiId)\n        {\n            canvas._pixiId = `${origin}_${uid()}`;\n        }\n\n        let baseTexture = BaseTextureCache[canvas._pixiId];\n\n        if (!baseTexture)\n        {\n            baseTexture = new BaseTexture(canvas, scaleMode);\n            BaseTexture.addToCache(baseTexture, canvas._pixiId);\n        }\n\n        return baseTexture;\n    }\n\n    /**\n     * Helper function that creates a base texture based on the source you provide.\n     * The source can be - image url, image element, canvas element. If the\n     * source is an image url or an image element and not in the base texture\n     * cache, it will be created and loaded.\n     *\n     * @static\n     * @param {string|HTMLImageElement|HTMLCanvasElement} source - The source to create base texture from.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static from(source, scaleMode, sourceScale)\n    {\n        if (typeof source === 'string')\n        {\n            return BaseTexture.fromImage(source, undefined, scaleMode, sourceScale);\n        }\n        else if (source instanceof HTMLImageElement)\n        {\n            const imageUrl = source.src;\n            let baseTexture = BaseTextureCache[imageUrl];\n\n            if (!baseTexture)\n            {\n                baseTexture = new BaseTexture(source, scaleMode);\n                baseTexture.imageUrl = imageUrl;\n\n                if (sourceScale)\n                {\n                    baseTexture.sourceScale = sourceScale;\n                }\n\n                // if there is an @2x at the end of the url we are going to assume its a highres image\n                baseTexture.resolution = getResolutionOfUrl(imageUrl);\n\n                BaseTexture.addToCache(baseTexture, imageUrl);\n            }\n\n            return baseTexture;\n        }\n        else if (source instanceof HTMLCanvasElement)\n        {\n            return BaseTexture.fromCanvas(source, scaleMode);\n        }\n\n        // lets assume its a base texture!\n        return source;\n    }\n\n    /**\n     * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n     *\n     * @static\n     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n     * @param {string} id - The id that the BaseTexture will be stored against.\n     */\n    static addToCache(baseTexture, id)\n    {\n        if (id)\n        {\n            if (baseTexture.textureCacheIds.indexOf(id) === -1)\n            {\n                baseTexture.textureCacheIds.push(id);\n            }\n\n            // @if DEBUG\n            /* eslint-disable no-console */\n            if (BaseTextureCache[id])\n            {\n                console.warn(`BaseTexture added to the cache with an id [${id}] that already had an entry`);\n            }\n            /* eslint-enable no-console */\n            // @endif\n\n            BaseTextureCache[id] = baseTexture;\n        }\n    }\n\n    /**\n     * Remove a BaseTexture from the global BaseTextureCache.\n     *\n     * @static\n     * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n     * @return {PIXI.BaseTexture|null} The BaseTexture that was removed.\n     */\n    static removeFromCache(baseTexture)\n    {\n        if (typeof baseTexture === 'string')\n        {\n            const baseTextureFromCache = BaseTextureCache[baseTexture];\n\n            if (baseTextureFromCache)\n            {\n                const index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n\n                if (index > -1)\n                {\n                    baseTextureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete BaseTextureCache[baseTexture];\n\n                return baseTextureFromCache;\n            }\n        }\n        else if (baseTexture && baseTexture.textureCacheIds)\n        {\n            for (let i = 0; i < baseTexture.textureCacheIds.length; ++i)\n            {\n                delete BaseTextureCache[baseTexture.textureCacheIds[i]];\n            }\n\n            baseTexture.textureCacheIds.length = 0;\n\n            return baseTexture;\n        }\n\n        return null;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}