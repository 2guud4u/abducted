{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _math = require('../math');\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * 'Builder' pattern for bounds rectangles\n * Axis-Aligned Bounding Box\n * It is not a shape! Its mutable thing, no 'EMPTY' or that kind of problems\n *\n * @class\n * @memberof PIXI\n */\nvar Bounds = function () {\n  /**\n   *\n   */\n  function Bounds() {\n    _classCallCheck(this, Bounds);\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.minX = Infinity;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.minY = Infinity;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.maxX = -Infinity;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.maxY = -Infinity;\n    this.rect = null;\n  }\n\n  /**\n   * Checks if bounds are empty.\n   *\n   * @return {boolean} True if empty.\n   */\n\n  Bounds.prototype.isEmpty = function isEmpty() {\n    return this.minX > this.maxX || this.minY > this.maxY;\n  };\n\n  /**\n   * Clears the bounds and resets.\n   *\n   */\n\n  Bounds.prototype.clear = function clear() {\n    this.updateID++;\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = -Infinity;\n    this.maxY = -Infinity;\n  };\n\n  /**\n   * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n   * It is not guaranteed that it will return tempRect\n   *\n   * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty\n   * @returns {PIXI.Rectangle} A rectangle of the bounds\n   */\n\n  Bounds.prototype.getRectangle = function getRectangle(rect) {\n    if (this.minX > this.maxX || this.minY > this.maxY) {\n      return _math.Rectangle.EMPTY;\n    }\n    rect = rect || new _math.Rectangle(0, 0, 1, 1);\n    rect.x = this.minX;\n    rect.y = this.minY;\n    rect.width = this.maxX - this.minX;\n    rect.height = this.maxY - this.minY;\n    return rect;\n  };\n\n  /**\n   * This function should be inlined when its possible.\n   *\n   * @param {PIXI.Point} point - The point to add.\n   */\n\n  Bounds.prototype.addPoint = function addPoint(point) {\n    this.minX = Math.min(this.minX, point.x);\n    this.maxX = Math.max(this.maxX, point.x);\n    this.minY = Math.min(this.minY, point.y);\n    this.maxY = Math.max(this.maxY, point.y);\n  };\n\n  /**\n   * Adds a quad, not transformed\n   *\n   * @param {Float32Array} vertices - The verts to add.\n   */\n\n  Bounds.prototype.addQuad = function addQuad(vertices) {\n    var minX = this.minX;\n    var minY = this.minY;\n    var maxX = this.maxX;\n    var maxY = this.maxY;\n    var x = vertices[0];\n    var y = vertices[1];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = vertices[2];\n    y = vertices[3];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = vertices[4];\n    y = vertices[5];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = vertices[6];\n    y = vertices[7];\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  };\n\n  /**\n   * Adds sprite frame, transformed.\n   *\n   * @param {PIXI.TransformBase} transform - TODO\n   * @param {number} x0 - TODO\n   * @param {number} y0 - TODO\n   * @param {number} x1 - TODO\n   * @param {number} y1 - TODO\n   */\n\n  Bounds.prototype.addFrame = function addFrame(transform, x0, y0, x1, y1) {\n    var matrix = transform.worldTransform;\n    var a = matrix.a;\n    var b = matrix.b;\n    var c = matrix.c;\n    var d = matrix.d;\n    var tx = matrix.tx;\n    var ty = matrix.ty;\n    var minX = this.minX;\n    var minY = this.minY;\n    var maxX = this.maxX;\n    var maxY = this.maxY;\n    var x = a * x0 + c * y0 + tx;\n    var y = b * x0 + d * y0 + ty;\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = a * x1 + c * y0 + tx;\n    y = b * x1 + d * y0 + ty;\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = a * x0 + c * y1 + tx;\n    y = b * x0 + d * y1 + ty;\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    x = a * x1 + c * y1 + tx;\n    y = b * x1 + d * y1 + ty;\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  };\n\n  /**\n   * Add an array of vertices\n   *\n   * @param {PIXI.TransformBase} transform - TODO\n   * @param {Float32Array} vertices - TODO\n   * @param {number} beginOffset - TODO\n   * @param {number} endOffset - TODO\n   */\n\n  Bounds.prototype.addVertices = function addVertices(transform, vertices, beginOffset, endOffset) {\n    var matrix = transform.worldTransform;\n    var a = matrix.a;\n    var b = matrix.b;\n    var c = matrix.c;\n    var d = matrix.d;\n    var tx = matrix.tx;\n    var ty = matrix.ty;\n    var minX = this.minX;\n    var minY = this.minY;\n    var maxX = this.maxX;\n    var maxY = this.maxY;\n    for (var i = beginOffset; i < endOffset; i += 2) {\n      var rawX = vertices[i];\n      var rawY = vertices[i + 1];\n      var x = a * rawX + c * rawY + tx;\n      var y = d * rawY + b * rawX + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n    }\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  };\n\n  /**\n   * Adds other Bounds\n   *\n   * @param {PIXI.Bounds} bounds - TODO\n   */\n\n  Bounds.prototype.addBounds = function addBounds(bounds) {\n    var minX = this.minX;\n    var minY = this.minY;\n    var maxX = this.maxX;\n    var maxY = this.maxY;\n    this.minX = bounds.minX < minX ? bounds.minX : minX;\n    this.minY = bounds.minY < minY ? bounds.minY : minY;\n    this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n    this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n  };\n\n  /**\n   * Adds other Bounds, masked with Bounds\n   *\n   * @param {PIXI.Bounds} bounds - TODO\n   * @param {PIXI.Bounds} mask - TODO\n   */\n\n  Bounds.prototype.addBoundsMask = function addBoundsMask(bounds, mask) {\n    var _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n    var _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n    var _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n    var _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n    if (_minX <= _maxX && _minY <= _maxY) {\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      this.minX = _minX < minX ? _minX : minX;\n      this.minY = _minY < minY ? _minY : minY;\n      this.maxX = _maxX > maxX ? _maxX : maxX;\n      this.maxY = _maxY > maxY ? _maxY : maxY;\n    }\n  };\n\n  /**\n   * Adds other Bounds, masked with Rectangle\n   *\n   * @param {PIXI.Bounds} bounds - TODO\n   * @param {PIXI.Rectangle} area - TODO\n   */\n\n  Bounds.prototype.addBoundsArea = function addBoundsArea(bounds, area) {\n    var _minX = bounds.minX > area.x ? bounds.minX : area.x;\n    var _minY = bounds.minY > area.y ? bounds.minY : area.y;\n    var _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : area.x + area.width;\n    var _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : area.y + area.height;\n    if (_minX <= _maxX && _minY <= _maxY) {\n      var minX = this.minX;\n      var minY = this.minY;\n      var maxX = this.maxX;\n      var maxY = this.maxY;\n      this.minX = _minX < minX ? _minX : minX;\n      this.minY = _minY < minY ? _minY : minY;\n      this.maxX = _maxX > maxX ? _maxX : maxX;\n      this.maxY = _maxY > maxY ? _maxY : maxY;\n    }\n  };\n  return Bounds;\n}();\nexports.default = Bounds;","map":{"version":3,"names":["_math","require","Bounds","_classCallCheck","minX","Infinity","minY","maxX","maxY","rect","isEmpty","clear","updateID","getRectangle","Rectangle","EMPTY","x","y","width","height","addPoint","point","Math","min","max","addQuad","vertices","addFrame","transform","x0","y0","x1","y1","matrix","worldTransform","a","b","c","d","tx","ty","addVertices","beginOffset","endOffset","i","rawX","rawY","addBounds","bounds","addBoundsMask","mask","_minX","_minY","_maxX","_maxY","addBoundsArea","area"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/display/Bounds.js"],"sourcesContent":["import { Rectangle } from '../math';\n\n/**\n * 'Builder' pattern for bounds rectangles\n * Axis-Aligned Bounding Box\n * It is not a shape! Its mutable thing, no 'EMPTY' or that kind of problems\n *\n * @class\n * @memberof PIXI\n */\nexport default class Bounds\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minX = Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minY = Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxX = -Infinity;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxY = -Infinity;\n\n        this.rect = null;\n    }\n\n    /**\n     * Checks if bounds are empty.\n     *\n     * @return {boolean} True if empty.\n     */\n    isEmpty()\n    {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    }\n\n    /**\n     * Clears the bounds and resets.\n     *\n     */\n    clear()\n    {\n        this.updateID++;\n\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n    }\n\n    /**\n     * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n     * It is not guaranteed that it will return tempRect\n     *\n     * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty\n     * @returns {PIXI.Rectangle} A rectangle of the bounds\n     */\n    getRectangle(rect)\n    {\n        if (this.minX > this.maxX || this.minY > this.maxY)\n        {\n            return Rectangle.EMPTY;\n        }\n\n        rect = rect || new Rectangle(0, 0, 1, 1);\n\n        rect.x = this.minX;\n        rect.y = this.minY;\n        rect.width = this.maxX - this.minX;\n        rect.height = this.maxY - this.minY;\n\n        return rect;\n    }\n\n    /**\n     * This function should be inlined when its possible.\n     *\n     * @param {PIXI.Point} point - The point to add.\n     */\n    addPoint(point)\n    {\n        this.minX = Math.min(this.minX, point.x);\n        this.maxX = Math.max(this.maxX, point.x);\n        this.minY = Math.min(this.minY, point.y);\n        this.maxY = Math.max(this.maxY, point.y);\n    }\n\n    /**\n     * Adds a quad, not transformed\n     *\n     * @param {Float32Array} vertices - The verts to add.\n     */\n    addQuad(vertices)\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = vertices[0];\n        let y = vertices[1];\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[2];\n        y = vertices[3];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[4];\n        y = vertices[5];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[6];\n        y = vertices[7];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds sprite frame, transformed.\n     *\n     * @param {PIXI.TransformBase} transform - TODO\n     * @param {number} x0 - TODO\n     * @param {number} y0 - TODO\n     * @param {number} x1 - TODO\n     * @param {number} y1 - TODO\n     */\n    addFrame(transform, x0, y0, x1, y1)\n    {\n        const matrix = transform.worldTransform;\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = (a * x0) + (c * y0) + tx;\n        let y = (b * x0) + (d * y0) + ty;\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Add an array of vertices\n     *\n     * @param {PIXI.TransformBase} transform - TODO\n     * @param {Float32Array} vertices - TODO\n     * @param {number} beginOffset - TODO\n     * @param {number} endOffset - TODO\n     */\n    addVertices(transform, vertices, beginOffset, endOffset)\n    {\n        const matrix = transform.worldTransform;\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const rawX = vertices[i];\n            const rawY = vertices[i + 1];\n            const x = (a * rawX) + (c * rawY) + tx;\n            const y = (d * rawY) + (b * rawX) + ty;\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds other Bounds\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     */\n    addBounds(bounds)\n    {\n        const minX = this.minX;\n        const minY = this.minY;\n        const maxX = this.maxX;\n        const maxY = this.maxY;\n\n        this.minX = bounds.minX < minX ? bounds.minX : minX;\n        this.minY = bounds.minY < minY ? bounds.minY : minY;\n        this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n        this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n    }\n\n    /**\n     * Adds other Bounds, masked with Bounds\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     * @param {PIXI.Bounds} mask - TODO\n     */\n    addBoundsMask(bounds, mask)\n    {\n        const _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n        const _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n        const _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n        const _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n\n    /**\n     * Adds other Bounds, masked with Rectangle\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     * @param {PIXI.Rectangle} area - TODO\n     */\n    addBoundsArea(bounds, area)\n    {\n        const _minX = bounds.minX > area.x ? bounds.minX : area.x;\n        const _minY = bounds.minY > area.y ? bounds.minY : area.y;\n        const _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : (area.x + area.width);\n        const _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : (area.y + area.height);\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n}\n"],"mappings":";;;AAAA,IAAAA,KAAA,GAAAC,OAAA;;;;;;;AAEA;;;;;;;;IAQqBC,M;EAEjB;;;EAGA,SAAAA,OAAA,EACA;IAAAC,eAAA,OAAAD,MAAA;;IACI;;;;IAIA,KAAKE,IAAL,GAAYC,QAAZ;;IAEA;;;;IAIA,KAAKC,IAAL,GAAYD,QAAZ;;IAEA;;;;IAIA,KAAKE,IAAL,GAAY,CAACF,QAAb;;IAEA;;;;IAIA,KAAKG,IAAL,GAAY,CAACH,QAAb;IAEA,KAAKI,IAAL,GAAY,IAAZ;EACH;;EAED;;;;;;mBAKAC,O,sBACA;IACI,OAAO,KAAKN,IAAL,GAAY,KAAKG,IAAjB,IAAyB,KAAKD,IAAL,GAAY,KAAKE,IAAjD;EACH,C;;EAED;;;;;mBAIAG,K,oBACA;IACI,KAAKC,QAAL;IAEA,KAAKR,IAAL,GAAYC,QAAZ;IACA,KAAKC,IAAL,GAAYD,QAAZ;IACA,KAAKE,IAAL,GAAY,CAACF,QAAb;IACA,KAAKG,IAAL,GAAY,CAACH,QAAb;EACH,C;;EAED;;;;;;;;mBAOAQ,Y,yBAAaJ,I,EACb;IACI,IAAI,KAAKL,IAAL,GAAY,KAAKG,IAAjB,IAAyB,KAAKD,IAAL,GAAY,KAAKE,IAA9C,EACA;MACI,OAAOR,KAAA,CAAAc,SAAA,CAAUC,KAAjB;IACH;IAEDN,IAAA,GAAOA,IAAA,IAAQ,IAAAT,KAAA,CAAAc,SAAA,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAf;IAEAL,IAAA,CAAKO,CAAL,GAAS,KAAKZ,IAAd;IACAK,IAAA,CAAKQ,CAAL,GAAS,KAAKX,IAAd;IACAG,IAAA,CAAKS,KAAL,GAAa,KAAKX,IAAL,GAAY,KAAKH,IAA9B;IACAK,IAAA,CAAKU,MAAL,GAAc,KAAKX,IAAL,GAAY,KAAKF,IAA/B;IAEA,OAAOG,IAAP;EACH,C;;EAED;;;;;;mBAKAW,Q,qBAASC,K,EACT;IACI,KAAKjB,IAAL,GAAYkB,IAAA,CAAKC,GAAL,CAAS,KAAKnB,IAAd,EAAoBiB,KAAA,CAAML,CAA1B,CAAZ;IACA,KAAKT,IAAL,GAAYe,IAAA,CAAKE,GAAL,CAAS,KAAKjB,IAAd,EAAoBc,KAAA,CAAML,CAA1B,CAAZ;IACA,KAAKV,IAAL,GAAYgB,IAAA,CAAKC,GAAL,CAAS,KAAKjB,IAAd,EAAoBe,KAAA,CAAMJ,CAA1B,CAAZ;IACA,KAAKT,IAAL,GAAYc,IAAA,CAAKE,GAAL,CAAS,KAAKhB,IAAd,EAAoBa,KAAA,CAAMJ,CAA1B,CAAZ;EACH,C;;EAED;;;;;;mBAKAQ,O,oBAAQC,Q,EACR;IACI,IAAItB,IAAA,GAAO,KAAKA,IAAhB;IACA,IAAIE,IAAA,GAAO,KAAKA,IAAhB;IACA,IAAIC,IAAA,GAAO,KAAKA,IAAhB;IACA,IAAIC,IAAA,GAAO,KAAKA,IAAhB;IAEA,IAAIQ,CAAA,GAAIU,QAAA,CAAS,CAAT,CAAR;IACA,IAAIT,CAAA,GAAIS,QAAA,CAAS,CAAT,CAAR;IAEAtB,IAAA,GAAOY,CAAA,GAAIZ,IAAJ,GAAWY,CAAX,GAAeZ,IAAtB;IACAE,IAAA,GAAOW,CAAA,GAAIX,IAAJ,GAAWW,CAAX,GAAeX,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IAEAQ,CAAA,GAAIU,QAAA,CAAS,CAAT,CAAJ;IACAT,CAAA,GAAIS,QAAA,CAAS,CAAT,CAAJ;IACAtB,IAAA,GAAOY,CAAA,GAAIZ,IAAJ,GAAWY,CAAX,GAAeZ,IAAtB;IACAE,IAAA,GAAOW,CAAA,GAAIX,IAAJ,GAAWW,CAAX,GAAeX,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IAEAQ,CAAA,GAAIU,QAAA,CAAS,CAAT,CAAJ;IACAT,CAAA,GAAIS,QAAA,CAAS,CAAT,CAAJ;IACAtB,IAAA,GAAOY,CAAA,GAAIZ,IAAJ,GAAWY,CAAX,GAAeZ,IAAtB;IACAE,IAAA,GAAOW,CAAA,GAAIX,IAAJ,GAAWW,CAAX,GAAeX,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IAEAQ,CAAA,GAAIU,QAAA,CAAS,CAAT,CAAJ;IACAT,CAAA,GAAIS,QAAA,CAAS,CAAT,CAAJ;IACAtB,IAAA,GAAOY,CAAA,GAAIZ,IAAJ,GAAWY,CAAX,GAAeZ,IAAtB;IACAE,IAAA,GAAOW,CAAA,GAAIX,IAAJ,GAAWW,CAAX,GAAeX,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IAEA,KAAKJ,IAAL,GAAYA,IAAZ;IACA,KAAKE,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;EACH,C;;EAED;;;;;;;;;;mBASAmB,Q,qBAASC,S,EAAWC,E,EAAIC,E,EAAIC,E,EAAIC,E,EAChC;IACI,IAAMC,MAAA,GAASL,SAAA,CAAUM,cAAzB;IACA,IAAMC,CAAA,GAAIF,MAAA,CAAOE,CAAjB;IACA,IAAMC,CAAA,GAAIH,MAAA,CAAOG,CAAjB;IACA,IAAMC,CAAA,GAAIJ,MAAA,CAAOI,CAAjB;IACA,IAAMC,CAAA,GAAIL,MAAA,CAAOK,CAAjB;IACA,IAAMC,EAAA,GAAKN,MAAA,CAAOM,EAAlB;IACA,IAAMC,EAAA,GAAKP,MAAA,CAAOO,EAAlB;IAEA,IAAIpC,IAAA,GAAO,KAAKA,IAAhB;IACA,IAAIE,IAAA,GAAO,KAAKA,IAAhB;IACA,IAAIC,IAAA,GAAO,KAAKA,IAAhB;IACA,IAAIC,IAAA,GAAO,KAAKA,IAAhB;IAEA,IAAIQ,CAAA,GAAKmB,CAAA,GAAIN,EAAL,GAAYQ,CAAA,GAAIP,EAAhB,GAAsBS,EAA9B;IACA,IAAItB,CAAA,GAAKmB,CAAA,GAAIP,EAAL,GAAYS,CAAA,GAAIR,EAAhB,GAAsBU,EAA9B;IAEApC,IAAA,GAAOY,CAAA,GAAIZ,IAAJ,GAAWY,CAAX,GAAeZ,IAAtB;IACAE,IAAA,GAAOW,CAAA,GAAIX,IAAJ,GAAWW,CAAX,GAAeX,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IAEAQ,CAAA,GAAKmB,CAAA,GAAIJ,EAAL,GAAYM,CAAA,GAAIP,EAAhB,GAAsBS,EAA1B;IACAtB,CAAA,GAAKmB,CAAA,GAAIL,EAAL,GAAYO,CAAA,GAAIR,EAAhB,GAAsBU,EAA1B;IACApC,IAAA,GAAOY,CAAA,GAAIZ,IAAJ,GAAWY,CAAX,GAAeZ,IAAtB;IACAE,IAAA,GAAOW,CAAA,GAAIX,IAAJ,GAAWW,CAAX,GAAeX,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IAEAQ,CAAA,GAAKmB,CAAA,GAAIN,EAAL,GAAYQ,CAAA,GAAIL,EAAhB,GAAsBO,EAA1B;IACAtB,CAAA,GAAKmB,CAAA,GAAIP,EAAL,GAAYS,CAAA,GAAIN,EAAhB,GAAsBQ,EAA1B;IACApC,IAAA,GAAOY,CAAA,GAAIZ,IAAJ,GAAWY,CAAX,GAAeZ,IAAtB;IACAE,IAAA,GAAOW,CAAA,GAAIX,IAAJ,GAAWW,CAAX,GAAeX,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IAEAQ,CAAA,GAAKmB,CAAA,GAAIJ,EAAL,GAAYM,CAAA,GAAIL,EAAhB,GAAsBO,EAA1B;IACAtB,CAAA,GAAKmB,CAAA,GAAIL,EAAL,GAAYO,CAAA,GAAIN,EAAhB,GAAsBQ,EAA1B;IACApC,IAAA,GAAOY,CAAA,GAAIZ,IAAJ,GAAWY,CAAX,GAAeZ,IAAtB;IACAE,IAAA,GAAOW,CAAA,GAAIX,IAAJ,GAAWW,CAAX,GAAeX,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IAEA,KAAKJ,IAAL,GAAYA,IAAZ;IACA,KAAKE,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;EACH,C;;EAED;;;;;;;;;mBAQAiC,W,wBAAYb,S,EAAWF,Q,EAAUgB,W,EAAaC,S,EAC9C;IACI,IAAMV,MAAA,GAASL,SAAA,CAAUM,cAAzB;IACA,IAAMC,CAAA,GAAIF,MAAA,CAAOE,CAAjB;IACA,IAAMC,CAAA,GAAIH,MAAA,CAAOG,CAAjB;IACA,IAAMC,CAAA,GAAIJ,MAAA,CAAOI,CAAjB;IACA,IAAMC,CAAA,GAAIL,MAAA,CAAOK,CAAjB;IACA,IAAMC,EAAA,GAAKN,MAAA,CAAOM,EAAlB;IACA,IAAMC,EAAA,GAAKP,MAAA,CAAOO,EAAlB;IAEA,IAAIpC,IAAA,GAAO,KAAKA,IAAhB;IACA,IAAIE,IAAA,GAAO,KAAKA,IAAhB;IACA,IAAIC,IAAA,GAAO,KAAKA,IAAhB;IACA,IAAIC,IAAA,GAAO,KAAKA,IAAhB;IAEA,KAAK,IAAIoC,CAAA,GAAIF,WAAb,EAA0BE,CAAA,GAAID,SAA9B,EAAyCC,CAAA,IAAK,CAA9C,EACA;MACI,IAAMC,IAAA,GAAOnB,QAAA,CAASkB,CAAT,CAAb;MACA,IAAME,IAAA,GAAOpB,QAAA,CAASkB,CAAA,GAAI,CAAb,CAAb;MACA,IAAM5B,CAAA,GAAKmB,CAAA,GAAIU,IAAL,GAAcR,CAAA,GAAIS,IAAlB,GAA0BP,EAApC;MACA,IAAMtB,CAAA,GAAKqB,CAAA,GAAIQ,IAAL,GAAcV,CAAA,GAAIS,IAAlB,GAA0BL,EAApC;MAEApC,IAAA,GAAOY,CAAA,GAAIZ,IAAJ,GAAWY,CAAX,GAAeZ,IAAtB;MACAE,IAAA,GAAOW,CAAA,GAAIX,IAAJ,GAAWW,CAAX,GAAeX,IAAtB;MACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;MACAC,IAAA,GAAOS,CAAA,GAAIT,IAAJ,GAAWS,CAAX,GAAeT,IAAtB;IACH;IAED,KAAKJ,IAAL,GAAYA,IAAZ;IACA,KAAKE,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAYA,IAAZ;EACH,C;;EAED;;;;;;mBAKAuC,S,sBAAUC,M,EACV;IACI,IAAM5C,IAAA,GAAO,KAAKA,IAAlB;IACA,IAAME,IAAA,GAAO,KAAKA,IAAlB;IACA,IAAMC,IAAA,GAAO,KAAKA,IAAlB;IACA,IAAMC,IAAA,GAAO,KAAKA,IAAlB;IAEA,KAAKJ,IAAL,GAAY4C,MAAA,CAAO5C,IAAP,GAAcA,IAAd,GAAqB4C,MAAA,CAAO5C,IAA5B,GAAmCA,IAA/C;IACA,KAAKE,IAAL,GAAY0C,MAAA,CAAO1C,IAAP,GAAcA,IAAd,GAAqB0C,MAAA,CAAO1C,IAA5B,GAAmCA,IAA/C;IACA,KAAKC,IAAL,GAAYyC,MAAA,CAAOzC,IAAP,GAAcA,IAAd,GAAqByC,MAAA,CAAOzC,IAA5B,GAAmCA,IAA/C;IACA,KAAKC,IAAL,GAAYwC,MAAA,CAAOxC,IAAP,GAAcA,IAAd,GAAqBwC,MAAA,CAAOxC,IAA5B,GAAmCA,IAA/C;EACH,C;;EAED;;;;;;;mBAMAyC,a,0BAAcD,M,EAAQE,I,EACtB;IACI,IAAMC,KAAA,GAAQH,MAAA,CAAO5C,IAAP,GAAc8C,IAAA,CAAK9C,IAAnB,GAA0B4C,MAAA,CAAO5C,IAAjC,GAAwC8C,IAAA,CAAK9C,IAA3D;IACA,IAAMgD,KAAA,GAAQJ,MAAA,CAAO1C,IAAP,GAAc4C,IAAA,CAAK5C,IAAnB,GAA0B0C,MAAA,CAAO1C,IAAjC,GAAwC4C,IAAA,CAAK5C,IAA3D;IACA,IAAM+C,KAAA,GAAQL,MAAA,CAAOzC,IAAP,GAAc2C,IAAA,CAAK3C,IAAnB,GAA0ByC,MAAA,CAAOzC,IAAjC,GAAwC2C,IAAA,CAAK3C,IAA3D;IACA,IAAM+C,KAAA,GAAQN,MAAA,CAAOxC,IAAP,GAAc0C,IAAA,CAAK1C,IAAnB,GAA0BwC,MAAA,CAAOxC,IAAjC,GAAwC0C,IAAA,CAAK1C,IAA3D;IAEA,IAAI2C,KAAA,IAASE,KAAT,IAAkBD,KAAA,IAASE,KAA/B,EACA;MACI,IAAMlD,IAAA,GAAO,KAAKA,IAAlB;MACA,IAAME,IAAA,GAAO,KAAKA,IAAlB;MACA,IAAMC,IAAA,GAAO,KAAKA,IAAlB;MACA,IAAMC,IAAA,GAAO,KAAKA,IAAlB;MAEA,KAAKJ,IAAL,GAAY+C,KAAA,GAAQ/C,IAAR,GAAe+C,KAAf,GAAuB/C,IAAnC;MACA,KAAKE,IAAL,GAAY8C,KAAA,GAAQ9C,IAAR,GAAe8C,KAAf,GAAuB9C,IAAnC;MACA,KAAKC,IAAL,GAAY8C,KAAA,GAAQ9C,IAAR,GAAe8C,KAAf,GAAuB9C,IAAnC;MACA,KAAKC,IAAL,GAAY8C,KAAA,GAAQ9C,IAAR,GAAe8C,KAAf,GAAuB9C,IAAnC;IACH;EACJ,C;;EAED;;;;;;;mBAMA+C,a,0BAAcP,M,EAAQQ,I,EACtB;IACI,IAAML,KAAA,GAAQH,MAAA,CAAO5C,IAAP,GAAcoD,IAAA,CAAKxC,CAAnB,GAAuBgC,MAAA,CAAO5C,IAA9B,GAAqCoD,IAAA,CAAKxC,CAAxD;IACA,IAAMoC,KAAA,GAAQJ,MAAA,CAAO1C,IAAP,GAAckD,IAAA,CAAKvC,CAAnB,GAAuB+B,MAAA,CAAO1C,IAA9B,GAAqCkD,IAAA,CAAKvC,CAAxD;IACA,IAAMoC,KAAA,GAAQL,MAAA,CAAOzC,IAAP,GAAciD,IAAA,CAAKxC,CAAL,GAASwC,IAAA,CAAKtC,KAA5B,GAAoC8B,MAAA,CAAOzC,IAA3C,GAAmDiD,IAAA,CAAKxC,CAAL,GAASwC,IAAA,CAAKtC,KAA/E;IACA,IAAMoC,KAAA,GAAQN,MAAA,CAAOxC,IAAP,GAAcgD,IAAA,CAAKvC,CAAL,GAASuC,IAAA,CAAKrC,MAA5B,GAAqC6B,MAAA,CAAOxC,IAA5C,GAAoDgD,IAAA,CAAKvC,CAAL,GAASuC,IAAA,CAAKrC,MAAhF;IAEA,IAAIgC,KAAA,IAASE,KAAT,IAAkBD,KAAA,IAASE,KAA/B,EACA;MACI,IAAMlD,IAAA,GAAO,KAAKA,IAAlB;MACA,IAAME,IAAA,GAAO,KAAKA,IAAlB;MACA,IAAMC,IAAA,GAAO,KAAKA,IAAlB;MACA,IAAMC,IAAA,GAAO,KAAKA,IAAlB;MAEA,KAAKJ,IAAL,GAAY+C,KAAA,GAAQ/C,IAAR,GAAe+C,KAAf,GAAuB/C,IAAnC;MACA,KAAKE,IAAL,GAAY8C,KAAA,GAAQ9C,IAAR,GAAe8C,KAAf,GAAuB9C,IAAnC;MACA,KAAKC,IAAL,GAAY8C,KAAA,GAAQ9C,IAAR,GAAe8C,KAAf,GAAuB9C,IAAnC;MACA,KAAKC,IAAL,GAAY8C,KAAA,GAAQ9C,IAAR,GAAe8C,KAAf,GAAuB9C,IAAnC;IACH;EACJ,C;;;kBAzTgBN,M"},"metadata":{},"sourceType":"script","externalDependencies":[]}