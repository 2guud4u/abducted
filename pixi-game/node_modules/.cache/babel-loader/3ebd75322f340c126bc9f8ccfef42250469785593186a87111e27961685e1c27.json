{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * CountLimiter limits the number of items handled by a {@link PIXI.prepare.BasePrepare} to a specified\n * number of items per frame.\n *\n * @class\n * @memberof PIXI\n */\nvar CountLimiter = function () {\n  /**\n   * @param {number} maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n   */\n  function CountLimiter(maxItemsPerFrame) {\n    _classCallCheck(this, CountLimiter);\n\n    /**\n     * The maximum number of items that can be prepared each frame.\n     * @private\n     */\n    this.maxItemsPerFrame = maxItemsPerFrame;\n    /**\n     * The number of items that can be prepared in the current frame.\n     * @type {number}\n     * @private\n     */\n    this.itemsLeft = 0;\n  }\n\n  /**\n   * Resets any counting properties to start fresh on a new frame.\n   */\n\n  CountLimiter.prototype.beginFrame = function beginFrame() {\n    this.itemsLeft = this.maxItemsPerFrame;\n  };\n\n  /**\n   * Checks to see if another item can be uploaded. This should only be called once per item.\n   * @return {boolean} If the item is allowed to be uploaded.\n   */\n\n  CountLimiter.prototype.allowedToUpload = function allowedToUpload() {\n    return this.itemsLeft-- > 0;\n  };\n  return CountLimiter;\n}();\nexports.default = CountLimiter;","map":{"version":3,"names":["CountLimiter","maxItemsPerFrame","_classCallCheck","itemsLeft","beginFrame","allowedToUpload"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/prepare/limiters/CountLimiter.js"],"sourcesContent":["/**\n * CountLimiter limits the number of items handled by a {@link PIXI.prepare.BasePrepare} to a specified\n * number of items per frame.\n *\n * @class\n * @memberof PIXI\n */\nexport default class CountLimiter\n{\n    /**\n     * @param {number} maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n     */\n    constructor(maxItemsPerFrame)\n    {\n        /**\n         * The maximum number of items that can be prepared each frame.\n         * @private\n         */\n        this.maxItemsPerFrame = maxItemsPerFrame;\n        /**\n         * The number of items that can be prepared in the current frame.\n         * @type {number}\n         * @private\n         */\n        this.itemsLeft = 0;\n    }\n\n    /**\n     * Resets any counting properties to start fresh on a new frame.\n     */\n    beginFrame()\n    {\n        this.itemsLeft = this.maxItemsPerFrame;\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @return {boolean} If the item is allowed to be uploaded.\n     */\n    allowedToUpload()\n    {\n        return this.itemsLeft-- > 0;\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;;;;;;IAOqBA,Y;EAEjB;;;EAGA,SAAAA,aAAYC,gBAAZ,EACA;IAAAC,eAAA,OAAAF,YAAA;;IACI;;;;IAIA,KAAKC,gBAAL,GAAwBA,gBAAxB;IACA;;;;;IAKA,KAAKE,SAAL,GAAiB,CAAjB;EACH;;EAED;;;;yBAGAC,U,yBACA;IACI,KAAKD,SAAL,GAAiB,KAAKF,gBAAtB;EACH,C;;EAED;;;;;yBAIAI,e,8BACA;IACI,OAAO,KAAKF,SAAL,KAAmB,CAA1B;EACH,C;;;kBAnCgBH,Y"},"metadata":{},"sourceType":"script","externalDependencies":[]}