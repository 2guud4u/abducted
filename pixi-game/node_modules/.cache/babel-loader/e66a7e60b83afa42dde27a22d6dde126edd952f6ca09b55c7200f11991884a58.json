{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = extractUniformsFromSrc;\nvar _pixiGlCore = require('pixi-gl-core');\nvar _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar defaultValue = _pixiGlCore2.default.shader.defaultValue;\nfunction extractUniformsFromSrc(vertexSrc, fragmentSrc, mask) {\n  var vertUniforms = extractUniformsFromString(vertexSrc, mask);\n  var fragUniforms = extractUniformsFromString(fragmentSrc, mask);\n  return Object.assign(vertUniforms, fragUniforms);\n}\nfunction extractUniformsFromString(string) {\n  var maskRegex = new RegExp('^(projectionMatrix|uSampler|filterArea|filterClamp)$');\n  var uniforms = {};\n  var nameSplit = void 0;\n\n  // clean the lines a little - remove extra spaces / tabs etc\n  // then split along ';'\n  var lines = string.replace(/\\s+/g, ' ').split(/\\s*;\\s*/);\n\n  // loop through..\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (line.indexOf('uniform') > -1) {\n      var splitLine = line.split(' ');\n      var type = splitLine[1];\n      var name = splitLine[2];\n      var size = 1;\n      if (name.indexOf('[') > -1) {\n        // array!\n        nameSplit = name.split(/\\[|]/);\n        name = nameSplit[0];\n        size *= Number(nameSplit[1]);\n      }\n      if (!name.match(maskRegex)) {\n        uniforms[name] = {\n          value: defaultValue(type, size),\n          name: name,\n          type: type\n        };\n      }\n    }\n  }\n  return uniforms;\n}","map":{"version":3,"names":["extractUniformsFromSrc","_pixiGlCore","require","defaultValue","_pixiGlCore2","default","shader","vertexSrc","fragmentSrc","mask","vertUniforms","extractUniformsFromString","fragUniforms","Object","assign","string","maskRegex","RegExp","uniforms","nameSplit","lines","replace","split","i","length","line","trim","indexOf","splitLine","type","name","size","Number","match","value"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/renderers/webgl/filters/extractUniformsFromSrc.js"],"sourcesContent":["import glCore from 'pixi-gl-core';\n\nconst defaultValue = glCore.shader.defaultValue;\n\nexport default function extractUniformsFromSrc(vertexSrc, fragmentSrc, mask)\n{\n    const vertUniforms = extractUniformsFromString(vertexSrc, mask);\n    const fragUniforms = extractUniformsFromString(fragmentSrc, mask);\n\n    return Object.assign(vertUniforms, fragUniforms);\n}\n\nfunction extractUniformsFromString(string)\n{\n    const maskRegex = new RegExp('^(projectionMatrix|uSampler|filterArea|filterClamp)$');\n\n    const uniforms = {};\n    let nameSplit;\n\n    // clean the lines a little - remove extra spaces / tabs etc\n    // then split along ';'\n    const lines = string.replace(/\\s+/g, ' ')\n                .split(/\\s*;\\s*/);\n\n    // loop through..\n    for (let i = 0; i < lines.length; i++)\n    {\n        const line = lines[i].trim();\n\n        if (line.indexOf('uniform') > -1)\n        {\n            const splitLine = line.split(' ');\n            const type = splitLine[1];\n\n            let name = splitLine[2];\n            let size = 1;\n\n            if (name.indexOf('[') > -1)\n            {\n                // array!\n                nameSplit = name.split(/\\[|]/);\n                name = nameSplit[0];\n                size *= Number(nameSplit[1]);\n            }\n\n            if (!name.match(maskRegex))\n            {\n                uniforms[name] = {\n                    value: defaultValue(type, size),\n                    name,\n                    type,\n                };\n            }\n        }\n    }\n\n    return uniforms;\n}\n"],"mappings":";;;kBAIwBA,sB;AAJxB,IAAAC,WAAA,GAAAC,OAAA;;;;;;;AAEA,IAAMC,YAAA,GAAeC,YAAA,CAAAC,OAAA,CAAOC,MAAP,CAAcH,YAAnC;AAEe,SAASH,sBAATA,CAAgCO,SAAhC,EAA2CC,WAA3C,EAAwDC,IAAxD,EACf;EACI,IAAMC,YAAA,GAAeC,yBAAA,CAA0BJ,SAA1B,EAAqCE,IAArC,CAArB;EACA,IAAMG,YAAA,GAAeD,yBAAA,CAA0BH,WAA1B,EAAuCC,IAAvC,CAArB;EAEA,OAAOI,MAAA,CAAOC,MAAP,CAAcJ,YAAd,EAA4BE,YAA5B,CAAP;AACH;AAED,SAASD,yBAATA,CAAmCI,MAAnC,EACA;EACI,IAAMC,SAAA,GAAY,IAAIC,MAAJ,CAAW,sDAAX,CAAlB;EAEA,IAAMC,QAAA,GAAW,EAAjB;EACA,IAAIC,SAAA,SAAJ;;EAEA;EACA;EACA,IAAMC,KAAA,GAAQL,MAAA,CAAOM,OAAP,CAAe,MAAf,EAAuB,GAAvB,EACDC,KADC,CACK,SADL,CAAd;;EAGA;EACA,KAAK,IAAIC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIH,KAAA,CAAMI,MAA1B,EAAkCD,CAAA,EAAlC,EACA;IACI,IAAME,IAAA,GAAOL,KAAA,CAAMG,CAAN,EAASG,IAAT,EAAb;IAEA,IAAID,IAAA,CAAKE,OAAL,CAAa,SAAb,IAA0B,CAAC,CAA/B,EACA;MACI,IAAMC,SAAA,GAAYH,IAAA,CAAKH,KAAL,CAAW,GAAX,CAAlB;MACA,IAAMO,IAAA,GAAOD,SAAA,CAAU,CAAV,CAAb;MAEA,IAAIE,IAAA,GAAOF,SAAA,CAAU,CAAV,CAAX;MACA,IAAIG,IAAA,GAAO,CAAX;MAEA,IAAID,IAAA,CAAKH,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EACA;QACI;QACAR,SAAA,GAAYW,IAAA,CAAKR,KAAL,CAAW,MAAX,CAAZ;QACAQ,IAAA,GAAOX,SAAA,CAAU,CAAV,CAAP;QACAY,IAAA,IAAQC,MAAA,CAAOb,SAAA,CAAU,CAAV,CAAP,CAAR;MACH;MAED,IAAI,CAACW,IAAA,CAAKG,KAAL,CAAWjB,SAAX,CAAL,EACA;QACIE,QAAA,CAASY,IAAT,IAAiB;UACbI,KAAA,EAAO/B,YAAA,CAAa0B,IAAb,EAAmBE,IAAnB,CADM;UAEbD,IAAA,EAAAA,IAFa;UAGbD,IAAA,EAAAA;QAHa,CAAjB;MAKH;IACJ;EACJ;EAED,OAAOX,QAAP;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}