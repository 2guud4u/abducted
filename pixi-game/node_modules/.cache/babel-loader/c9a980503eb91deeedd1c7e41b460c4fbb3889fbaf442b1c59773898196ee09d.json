{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar noise = require('./noise.js');\nclass NoiseFilter extends core.Filter {\n  constructor() {\n    let noise$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n    let seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.random();\n    super(core.defaultFilterVertex, noise[\"default\"], {\n      uNoise: 0,\n      uSeed: 0\n    });\n    this.noise = noise$1;\n    this.seed = seed;\n  }\n  get noise() {\n    return this.uniforms.uNoise;\n  }\n  set noise(value) {\n    this.uniforms.uNoise = value;\n  }\n  get seed() {\n    return this.uniforms.uSeed;\n  }\n  set seed(value) {\n    this.uniforms.uSeed = value;\n  }\n}\nexports.NoiseFilter = NoiseFilter;","map":{"version":3,"names":["NoiseFilter","core","Filter","constructor","noise$1","arguments","length","undefined","seed","Math","random","defaultFilterVertex","noise","uNoise","uSeed","uniforms","value"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/filter-noise/src/NoiseFilter.ts"],"sourcesContent":["import { defaultFilterVertex, Filter } from '@pixi/core';\nimport fragment from './noise.frag';\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof PIXI\n * @author Vico @vicocotea\n */\nexport class NoiseFilter extends Filter\n{\n    /**\n     * @param {number} [noise=0.5] - The noise intensity, should be a normalized value in the range [0, 1].\n     * @param {number} [seed] - A random seed for the noise generation. Default is `Math.random()`.\n     */\n    constructor(noise = 0.5, seed = Math.random())\n    {\n        super(defaultFilterVertex, fragment, {\n            uNoise: 0,\n            uSeed: 0,\n        });\n\n        this.noise = noise;\n        this.seed = seed;\n    }\n\n    /**\n     * The amount of noise to apply, this value should be in the range (0, 1].\n     * @default 0.5\n     */\n    get noise(): number\n    {\n        return this.uniforms.uNoise;\n    }\n\n    set noise(value: number)\n    {\n        this.uniforms.uNoise = value;\n    }\n\n    /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n    get seed(): number\n    {\n        return this.uniforms.uSeed;\n    }\n\n    set seed(value: number)\n    {\n        this.uniforms.uSeed = value;\n    }\n}\n"],"mappings":";;;;;;;AAUO,MAAMA,WAAA,SAAoBC,IAAA,CAAAC,MACjC;EAKIC,YAAA,EACA;IAAA,IADYC,OAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA;IAAA,IAAKG,IAAO,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAAI,IAAA,CAAKC,MAAA,EACrC;IACI,MAAMT,IAAA,CAAAU,mBAAA,EAAqBC,KAAA,WAAU;MACjCC,MAAQ;MACRC,KAAO;IAAA,CACV;IAED,KAAKF,KAAQ,GAAAR,OAAA;IACb,KAAKI,IAAO,GAAAA,IAAA;EAAA;EAOhB,IAAII,KACJA,CAAA;IACI,OAAO,KAAKG,QAAS,CAAAF,MAAA;EAAA;EAGzB,IAAID,MAAMI,KACV;IACI,KAAKD,QAAA,CAASF,MAAS,GAAAG,KAAA;EAAA;EAI3B,IAAIR,IACJA,CAAA;IACI,OAAO,KAAKO,QAAS,CAAAD,KAAA;EAAA;EAGzB,IAAIN,KAAKQ,KACT;IACI,KAAKD,QAAA,CAASD,KAAQ,GAAAE,KAAA;EAAA;AAE9B"},"metadata":{},"sourceType":"script","externalDependencies":[]}