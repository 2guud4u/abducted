{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _core = require('../core');\nvar core = _interopRequireWildcard(_core);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @typedef PIXI.extras.AnimatedSprite~FrameObject\n * @type {object}\n * @property {PIXI.Texture} texture - The {@link PIXI.Texture} of the frame\n * @property {number} time - the duration of the frame in ms\n */\n\n/**\n * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * let alienImages = [\"image_sequence_01.png\",\"image_sequence_02.png\",\"image_sequence_03.png\",\"image_sequence_04.png\"];\n * let textureArray = [];\n *\n * for (let i=0; i < 4; i++)\n * {\n *      let texture = PIXI.Texture.fromImage(alienImages[i]);\n *      textureArray.push(texture);\n * };\n *\n * let animatedSprite = new PIXI.extras.AnimatedSprite(textureArray);\n * ```\n *\n * The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}\n * containing the animation definitions:\n *\n * ```js\n * PIXI.loader.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.loader.resources[\"assets/spritesheet.json\"].spritesheet;\n *   animatedSprite = new PIXI.extras.AnimatedSprite(sheet.animations[\"image_sequence\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI.extras\n */\nvar AnimatedSprite = function (_core$Sprite) {\n  _inherits(AnimatedSprite, _core$Sprite);\n\n  /**\n   * @param {PIXI.Texture[]|PIXI.extras.AnimatedSprite~FrameObject[]} textures - an array of {@link PIXI.Texture} or frame\n   *  objects that make up the animation\n   * @param {boolean} [autoUpdate=true] - Whether to use PIXI.ticker.shared to auto update animation time.\n   */\n  function AnimatedSprite(textures, autoUpdate) {\n    _classCallCheck(this, AnimatedSprite);\n\n    /**\n     * @private\n     */\n    var _this = _possibleConstructorReturn(this, _core$Sprite.call(this, textures[0] instanceof core.Texture ? textures[0] : textures[0].texture));\n    _this._textures = null;\n\n    /**\n     * @private\n     */\n    _this._durations = null;\n    _this.textures = textures;\n\n    /**\n     * `true` uses PIXI.ticker.shared to auto update animation time.\n     * @type {boolean}\n     * @default true\n     * @private\n     */\n    _this._autoUpdate = autoUpdate !== false;\n\n    /**\n     * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower\n     *\n     * @member {number}\n     * @default 1\n     */\n    _this.animationSpeed = 1;\n\n    /**\n     * Whether or not the animate sprite repeats after playing.\n     *\n     * @member {boolean}\n     * @default true\n     */\n    _this.loop = true;\n\n    /**\n     * Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.\n     *\n     * Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.\n     * Changing anchor for each frame allows to pin sprite origin to certain moving feature\n     * of the frame (e.g. left foot).\n     *\n     * Note: Enabling this will override any previously set `anchor` on each frame change.\n     *\n     * @member {boolean}\n     * @default false\n     */\n    _this.updateAnchor = false;\n\n    /**\n     * Function to call when a AnimatedSprite finishes playing\n     *\n     * @member {Function}\n     */\n    _this.onComplete = null;\n\n    /**\n     * Function to call when a AnimatedSprite changes which texture is being rendered\n     *\n     * @member {Function}\n     */\n    _this.onFrameChange = null;\n\n    /**\n    * Function to call when 'loop' is true, and an AnimatedSprite is played and loops around to start again\n    *\n    * @member {Function}\n    */\n    _this.onLoop = null;\n\n    /**\n     * Elapsed time since animation has been started, used internally to display current texture\n     *\n     * @member {number}\n     * @private\n     */\n    _this._currentTime = 0;\n\n    /**\n     * Indicates if the AnimatedSprite is currently playing\n     *\n     * @member {boolean}\n     * @readonly\n     */\n    _this.playing = false;\n    return _this;\n  }\n\n  /**\n   * Stops the AnimatedSprite\n   *\n   */\n\n  AnimatedSprite.prototype.stop = function stop() {\n    if (!this.playing) {\n      return;\n    }\n    this.playing = false;\n    if (this._autoUpdate) {\n      core.ticker.shared.remove(this.update, this);\n    }\n  };\n\n  /**\n   * Plays the AnimatedSprite\n   *\n   */\n\n  AnimatedSprite.prototype.play = function play() {\n    if (this.playing) {\n      return;\n    }\n    this.playing = true;\n    if (this._autoUpdate) {\n      core.ticker.shared.add(this.update, this, core.UPDATE_PRIORITY.HIGH);\n    }\n  };\n\n  /**\n   * Stops the AnimatedSprite and goes to a specific frame\n   *\n   * @param {number} frameNumber - frame index to stop at\n   */\n\n  AnimatedSprite.prototype.gotoAndStop = function gotoAndStop(frameNumber) {\n    this.stop();\n    var previousFrame = this.currentFrame;\n    this._currentTime = frameNumber;\n    if (previousFrame !== this.currentFrame) {\n      this.updateTexture();\n    }\n  };\n\n  /**\n   * Goes to a specific frame and begins playing the AnimatedSprite\n   *\n   * @param {number} frameNumber - frame index to start at\n   */\n\n  AnimatedSprite.prototype.gotoAndPlay = function gotoAndPlay(frameNumber) {\n    var previousFrame = this.currentFrame;\n    this._currentTime = frameNumber;\n    if (previousFrame !== this.currentFrame) {\n      this.updateTexture();\n    }\n    this.play();\n  };\n\n  /**\n   * Updates the object transform for rendering.\n   *\n   * @private\n   * @param {number} deltaTime - Time since last tick.\n   */\n\n  AnimatedSprite.prototype.update = function update(deltaTime) {\n    var elapsed = this.animationSpeed * deltaTime;\n    var previousFrame = this.currentFrame;\n    if (this._durations !== null) {\n      var lag = this._currentTime % 1 * this._durations[this.currentFrame];\n      lag += elapsed / 60 * 1000;\n      while (lag < 0) {\n        this._currentTime--;\n        lag += this._durations[this.currentFrame];\n      }\n      var sign = Math.sign(this.animationSpeed * deltaTime);\n      this._currentTime = Math.floor(this._currentTime);\n      while (lag >= this._durations[this.currentFrame]) {\n        lag -= this._durations[this.currentFrame] * sign;\n        this._currentTime += sign;\n      }\n      this._currentTime += lag / this._durations[this.currentFrame];\n    } else {\n      this._currentTime += elapsed;\n    }\n    if (this._currentTime < 0 && !this.loop) {\n      this.gotoAndStop(0);\n      if (this.onComplete) {\n        this.onComplete();\n      }\n    } else if (this._currentTime >= this._textures.length && !this.loop) {\n      this.gotoAndStop(this._textures.length - 1);\n      if (this.onComplete) {\n        this.onComplete();\n      }\n    } else if (previousFrame !== this.currentFrame) {\n      if (this.loop && this.onLoop) {\n        if (this.animationSpeed > 0 && this.currentFrame < previousFrame) {\n          this.onLoop();\n        } else if (this.animationSpeed < 0 && this.currentFrame > previousFrame) {\n          this.onLoop();\n        }\n      }\n      this.updateTexture();\n    }\n  };\n\n  /**\n   * Updates the displayed texture to match the current frame index\n   *\n   * @private\n   */\n\n  AnimatedSprite.prototype.updateTexture = function updateTexture() {\n    this._texture = this._textures[this.currentFrame];\n    this._textureID = -1;\n    this.cachedTint = 0xFFFFFF;\n    if (this.updateAnchor) {\n      this._anchor.copy(this._texture.defaultAnchor);\n    }\n    if (this.onFrameChange) {\n      this.onFrameChange(this.currentFrame);\n    }\n  };\n\n  /**\n   * Stops the AnimatedSprite and destroys it\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n   *      method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n   * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n   */\n\n  AnimatedSprite.prototype.destroy = function destroy(options) {\n    this.stop();\n    _core$Sprite.prototype.destroy.call(this, options);\n  };\n\n  /**\n   * A short hand way of creating a movieclip from an array of frame ids\n   *\n   * @static\n   * @param {string[]} frames - The array of frames ids the movieclip will use as its texture frames\n   * @return {AnimatedSprite} The new animated sprite with the specified frames.\n   */\n\n  AnimatedSprite.fromFrames = function fromFrames(frames) {\n    var textures = [];\n    for (var i = 0; i < frames.length; ++i) {\n      textures.push(core.Texture.fromFrame(frames[i]));\n    }\n    return new AnimatedSprite(textures);\n  };\n\n  /**\n   * A short hand way of creating a movieclip from an array of image ids\n   *\n   * @static\n   * @param {string[]} images - the array of image urls the movieclip will use as its texture frames\n   * @return {AnimatedSprite} The new animate sprite with the specified images as frames.\n   */\n\n  AnimatedSprite.fromImages = function fromImages(images) {\n    var textures = [];\n    for (var i = 0; i < images.length; ++i) {\n      textures.push(core.Texture.fromImage(images[i]));\n    }\n    return new AnimatedSprite(textures);\n  };\n\n  /**\n   * totalFrames is the total number of frames in the AnimatedSprite. This is the same as number of textures\n   * assigned to the AnimatedSprite.\n   *\n   * @readonly\n   * @member {number}\n   * @default 0\n   */\n\n  _createClass(AnimatedSprite, [{\n    key: 'totalFrames',\n    get: function get() {\n      return this._textures.length;\n    }\n\n    /**\n     * The array of textures used for this AnimatedSprite\n     *\n     * @member {PIXI.Texture[]}\n     */\n  }, {\n    key: 'textures',\n    get: function get() {\n      return this._textures;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      if (value[0] instanceof core.Texture) {\n        this._textures = value;\n        this._durations = null;\n      } else {\n        this._textures = [];\n        this._durations = [];\n        for (var i = 0; i < value.length; i++) {\n          this._textures.push(value[i].texture);\n          this._durations.push(value[i].time);\n        }\n      }\n      this.gotoAndStop(0);\n      this.updateTexture();\n    }\n\n    /**\n    * The AnimatedSprites current frame index\n    *\n    * @member {number}\n    * @readonly\n    */\n  }, {\n    key: 'currentFrame',\n    get: function get() {\n      var currentFrame = Math.floor(this._currentTime) % this._textures.length;\n      if (currentFrame < 0) {\n        currentFrame += this._textures.length;\n      }\n      return currentFrame;\n    }\n  }]);\n  return AnimatedSprite;\n}(core.Sprite);\nexports.default = AnimatedSprite;","map":{"version":3,"names":["_core","require","core","AnimatedSprite","textures","autoUpdate","_classCallCheck","_this","_possibleConstructorReturn","_core$Sprite","call","Texture","texture","_textures","_durations","_autoUpdate","animationSpeed","loop","updateAnchor","onComplete","onFrameChange","onLoop","_currentTime","playing","stop","ticker","shared","remove","update","play","add","UPDATE_PRIORITY","HIGH","gotoAndStop","frameNumber","previousFrame","currentFrame","updateTexture","gotoAndPlay","deltaTime","elapsed","lag","sign","Math","floor","length","_texture","_textureID","cachedTint","_anchor","copy","defaultAnchor","destroy","options","prototype","fromFrames","frames","i","push","fromFrame","fromImages","images","fromImage","value","time","Sprite"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/extras/AnimatedSprite.js"],"sourcesContent":["import * as core from '../core';\n\n/**\n * @typedef PIXI.extras.AnimatedSprite~FrameObject\n * @type {object}\n * @property {PIXI.Texture} texture - The {@link PIXI.Texture} of the frame\n * @property {number} time - the duration of the frame in ms\n */\n\n/**\n * An AnimatedSprite is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * let alienImages = [\"image_sequence_01.png\",\"image_sequence_02.png\",\"image_sequence_03.png\",\"image_sequence_04.png\"];\n * let textureArray = [];\n *\n * for (let i=0; i < 4; i++)\n * {\n *      let texture = PIXI.Texture.fromImage(alienImages[i]);\n *      textureArray.push(texture);\n * };\n *\n * let animatedSprite = new PIXI.extras.AnimatedSprite(textureArray);\n * ```\n *\n * The more efficient and simpler way to create an animated sprite is using a {@link PIXI.Spritesheet}\n * containing the animation definitions:\n *\n * ```js\n * PIXI.loader.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.loader.resources[\"assets/spritesheet.json\"].spritesheet;\n *   animatedSprite = new PIXI.extras.AnimatedSprite(sheet.animations[\"image_sequence\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI.extras\n */\nexport default class AnimatedSprite extends core.Sprite\n{\n    /**\n     * @param {PIXI.Texture[]|PIXI.extras.AnimatedSprite~FrameObject[]} textures - an array of {@link PIXI.Texture} or frame\n     *  objects that make up the animation\n     * @param {boolean} [autoUpdate=true] - Whether to use PIXI.ticker.shared to auto update animation time.\n     */\n    constructor(textures, autoUpdate)\n    {\n        super(textures[0] instanceof core.Texture ? textures[0] : textures[0].texture);\n\n        /**\n         * @private\n         */\n        this._textures = null;\n\n        /**\n         * @private\n         */\n        this._durations = null;\n\n        this.textures = textures;\n\n        /**\n         * `true` uses PIXI.ticker.shared to auto update animation time.\n         * @type {boolean}\n         * @default true\n         * @private\n         */\n        this._autoUpdate = autoUpdate !== false;\n\n        /**\n         * The speed that the AnimatedSprite will play at. Higher is faster, lower is slower\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.animationSpeed = 1;\n\n        /**\n         * Whether or not the animate sprite repeats after playing.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.loop = true;\n\n        /**\n         * Update anchor to [Texture's defaultAnchor]{@link PIXI.Texture#defaultAnchor} when frame changes.\n         *\n         * Useful with [sprite sheet animations]{@link PIXI.Spritesheet#animations} created with tools.\n         * Changing anchor for each frame allows to pin sprite origin to certain moving feature\n         * of the frame (e.g. left foot).\n         *\n         * Note: Enabling this will override any previously set `anchor` on each frame change.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.updateAnchor = false;\n\n        /**\n         * Function to call when a AnimatedSprite finishes playing\n         *\n         * @member {Function}\n         */\n        this.onComplete = null;\n\n        /**\n         * Function to call when a AnimatedSprite changes which texture is being rendered\n         *\n         * @member {Function}\n         */\n        this.onFrameChange = null;\n\n         /**\n         * Function to call when 'loop' is true, and an AnimatedSprite is played and loops around to start again\n         *\n         * @member {Function}\n         */\n        this.onLoop = null;\n\n        /**\n         * Elapsed time since animation has been started, used internally to display current texture\n         *\n         * @member {number}\n         * @private\n         */\n        this._currentTime = 0;\n\n        /**\n         * Indicates if the AnimatedSprite is currently playing\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        this.playing = false;\n    }\n\n    /**\n     * Stops the AnimatedSprite\n     *\n     */\n    stop()\n    {\n        if (!this.playing)\n        {\n            return;\n        }\n\n        this.playing = false;\n        if (this._autoUpdate)\n        {\n            core.ticker.shared.remove(this.update, this);\n        }\n    }\n\n    /**\n     * Plays the AnimatedSprite\n     *\n     */\n    play()\n    {\n        if (this.playing)\n        {\n            return;\n        }\n\n        this.playing = true;\n        if (this._autoUpdate)\n        {\n            core.ticker.shared.add(this.update, this, core.UPDATE_PRIORITY.HIGH);\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and goes to a specific frame\n     *\n     * @param {number} frameNumber - frame index to stop at\n     */\n    gotoAndStop(frameNumber)\n    {\n        this.stop();\n\n        const previousFrame = this.currentFrame;\n\n        this._currentTime = frameNumber;\n\n        if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Goes to a specific frame and begins playing the AnimatedSprite\n     *\n     * @param {number} frameNumber - frame index to start at\n     */\n    gotoAndPlay(frameNumber)\n    {\n        const previousFrame = this.currentFrame;\n\n        this._currentTime = frameNumber;\n\n        if (previousFrame !== this.currentFrame)\n        {\n            this.updateTexture();\n        }\n\n        this.play();\n    }\n\n    /**\n     * Updates the object transform for rendering.\n     *\n     * @private\n     * @param {number} deltaTime - Time since last tick.\n     */\n    update(deltaTime)\n    {\n        const elapsed = this.animationSpeed * deltaTime;\n        const previousFrame = this.currentFrame;\n\n        if (this._durations !== null)\n        {\n            let lag = this._currentTime % 1 * this._durations[this.currentFrame];\n\n            lag += elapsed / 60 * 1000;\n\n            while (lag < 0)\n            {\n                this._currentTime--;\n                lag += this._durations[this.currentFrame];\n            }\n\n            const sign = Math.sign(this.animationSpeed * deltaTime);\n\n            this._currentTime = Math.floor(this._currentTime);\n\n            while (lag >= this._durations[this.currentFrame])\n            {\n                lag -= this._durations[this.currentFrame] * sign;\n                this._currentTime += sign;\n            }\n\n            this._currentTime += lag / this._durations[this.currentFrame];\n        }\n        else\n        {\n            this._currentTime += elapsed;\n        }\n\n        if (this._currentTime < 0 && !this.loop)\n        {\n            this.gotoAndStop(0);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (this._currentTime >= this._textures.length && !this.loop)\n        {\n            this.gotoAndStop(this._textures.length - 1);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n        else if (previousFrame !== this.currentFrame)\n        {\n            if (this.loop && this.onLoop)\n            {\n                if (this.animationSpeed > 0 && this.currentFrame < previousFrame)\n                {\n                    this.onLoop();\n                }\n                else if (this.animationSpeed < 0 && this.currentFrame > previousFrame)\n                {\n                    this.onLoop();\n                }\n            }\n\n            this.updateTexture();\n        }\n    }\n\n    /**\n     * Updates the displayed texture to match the current frame index\n     *\n     * @private\n     */\n    updateTexture()\n    {\n        this._texture = this._textures[this.currentFrame];\n        this._textureID = -1;\n        this.cachedTint = 0xFFFFFF;\n\n        if (this.updateAnchor)\n        {\n            this._anchor.copy(this._texture.defaultAnchor);\n        }\n\n        if (this.onFrameChange)\n        {\n            this.onFrameChange(this.currentFrame);\n        }\n    }\n\n    /**\n     * Stops the AnimatedSprite and destroys it\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    destroy(options)\n    {\n        this.stop();\n        super.destroy(options);\n    }\n\n    /**\n     * A short hand way of creating a movieclip from an array of frame ids\n     *\n     * @static\n     * @param {string[]} frames - The array of frames ids the movieclip will use as its texture frames\n     * @return {AnimatedSprite} The new animated sprite with the specified frames.\n     */\n    static fromFrames(frames)\n    {\n        const textures = [];\n\n        for (let i = 0; i < frames.length; ++i)\n        {\n            textures.push(core.Texture.fromFrame(frames[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * A short hand way of creating a movieclip from an array of image ids\n     *\n     * @static\n     * @param {string[]} images - the array of image urls the movieclip will use as its texture frames\n     * @return {AnimatedSprite} The new animate sprite with the specified images as frames.\n     */\n    static fromImages(images)\n    {\n        const textures = [];\n\n        for (let i = 0; i < images.length; ++i)\n        {\n            textures.push(core.Texture.fromImage(images[i]));\n        }\n\n        return new AnimatedSprite(textures);\n    }\n\n    /**\n     * totalFrames is the total number of frames in the AnimatedSprite. This is the same as number of textures\n     * assigned to the AnimatedSprite.\n     *\n     * @readonly\n     * @member {number}\n     * @default 0\n     */\n    get totalFrames()\n    {\n        return this._textures.length;\n    }\n\n    /**\n     * The array of textures used for this AnimatedSprite\n     *\n     * @member {PIXI.Texture[]}\n     */\n    get textures()\n    {\n        return this._textures;\n    }\n\n    set textures(value) // eslint-disable-line require-jsdoc\n    {\n        if (value[0] instanceof core.Texture)\n        {\n            this._textures = value;\n            this._durations = null;\n        }\n        else\n        {\n            this._textures = [];\n            this._durations = [];\n\n            for (let i = 0; i < value.length; i++)\n            {\n                this._textures.push(value[i].texture);\n                this._durations.push(value[i].time);\n            }\n        }\n        this.gotoAndStop(0);\n        this.updateTexture();\n    }\n\n    /**\n    * The AnimatedSprites current frame index\n    *\n    * @member {number}\n    * @readonly\n    */\n    get currentFrame()\n    {\n        let currentFrame = Math.floor(this._currentTime) % this._textures.length;\n\n        if (currentFrame < 0)\n        {\n            currentFrame += this._textures.length;\n        }\n\n        return currentFrame;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}