{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _core = require('../core');\nvar core = _interopRequireWildcard(_core);\nvar _InteractionData = require('./InteractionData');\nvar _InteractionData2 = _interopRequireDefault(_InteractionData);\nvar _InteractionEvent = require('./InteractionEvent');\nvar _InteractionEvent2 = _interopRequireDefault(_InteractionEvent);\nvar _InteractionTrackingData = require('./InteractionTrackingData');\nvar _InteractionTrackingData2 = _interopRequireDefault(_InteractionTrackingData);\nvar _eventemitter = require('eventemitter3');\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\nvar _interactiveTarget = require('./interactiveTarget');\nvar _interactiveTarget2 = _interopRequireDefault(_interactiveTarget);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n// Mix interactiveTarget into core.DisplayObject.prototype, after deprecation has been handled\ncore.utils.mixins.delayMixin(core.DisplayObject.prototype, _interactiveTarget2.default);\nvar MOUSE_POINTER_ID = 1;\n\n// helpers for hitTest() - only used inside hitTest()\nvar hitTestEvent = {\n  target: null,\n  data: {\n    global: null\n  }\n};\n\n/**\n * The interaction manager deals with mouse, touch and pointer events. Any DisplayObject can be interactive\n * if its interactive parameter is set to true\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.interaction\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI.interaction\n */\n\nvar InteractionManager = function (_EventEmitter) {\n  _inherits(InteractionManager, _EventEmitter);\n\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - A reference to the current renderer\n   * @param {object} [options] - The options for the manager.\n   * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n   * @param {number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.\n   */\n  function InteractionManager(renderer, options) {\n    _classCallCheck(this, InteractionManager);\n    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));\n    options = options || {};\n\n    /**\n     * The renderer this interaction manager works for.\n     *\n     * @member {PIXI.SystemRenderer}\n     */\n    _this.renderer = renderer;\n\n    /**\n     * Should default browser actions automatically be prevented.\n     * Does not apply to pointer events for backwards compatibility\n     * preventDefault on pointer events stops mouse events from firing\n     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n     *\n     * @member {boolean}\n     * @default true\n     */\n    _this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n\n    /**\n     * Frequency in milliseconds that the mousemove, moveover & mouseout interaction events will be checked.\n     *\n     * @member {number}\n     * @default 10\n     */\n    _this.interactionFrequency = options.interactionFrequency || 10;\n\n    /**\n     * The mouse data\n     *\n     * @member {PIXI.interaction.InteractionData}\n     */\n    _this.mouse = new _InteractionData2.default();\n    _this.mouse.identifier = MOUSE_POINTER_ID;\n\n    // setting the mouse to start off far off screen will mean that mouse over does\n    //  not get called before we even move the mouse.\n    _this.mouse.global.set(-999999);\n\n    /**\n     * Actively tracked InteractionData\n     *\n     * @private\n     * @member {Object.<number,PIXI.interation.InteractionData>}\n     */\n    _this.activeInteractionData = {};\n    _this.activeInteractionData[MOUSE_POINTER_ID] = _this.mouse;\n\n    /**\n     * Pool of unused InteractionData\n     *\n     * @private\n     * @member {PIXI.interation.InteractionData[]}\n     */\n    _this.interactionDataPool = [];\n\n    /**\n     * An event data object to handle all the event tracking/dispatching\n     *\n     * @member {object}\n     */\n    _this.eventData = new _InteractionEvent2.default();\n\n    /**\n     * The DOM element to bind to.\n     *\n     * @private\n     * @member {HTMLElement}\n     */\n    _this.interactionDOMElement = null;\n\n    /**\n     * This property determines if mousemove and touchmove events are fired only when the cursor\n     * is over the object.\n     * Setting to true will make things work more in line with how the DOM verison works.\n     * Setting to false can make things easier for things like dragging\n     * It is currently set to false as this is how PixiJS used to work. This will be set to true in\n     * future versions of pixi.\n     *\n     * @member {boolean}\n     * @default false\n     */\n    _this.moveWhenInside = false;\n\n    /**\n     * Have events been attached to the dom element?\n     *\n     * @private\n     * @member {boolean}\n     */\n    _this.eventsAdded = false;\n\n    /**\n     * Is the mouse hovering over the renderer?\n     *\n     * @private\n     * @member {boolean}\n     */\n    _this.mouseOverRenderer = false;\n\n    /**\n     * Does the device support touch events\n     * https://www.w3.org/TR/touch-events/\n     *\n     * @readonly\n     * @member {boolean}\n     */\n    _this.supportsTouchEvents = 'ontouchstart' in window;\n\n    /**\n     * Does the device support pointer events\n     * https://www.w3.org/Submission/pointer-events/\n     *\n     * @readonly\n     * @member {boolean}\n     */\n    _this.supportsPointerEvents = !!window.PointerEvent;\n\n    // this will make it so that you don't have to call bind all the time\n\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerUp = _this.onPointerUp.bind(_this);\n    _this.processPointerUp = _this.processPointerUp.bind(_this);\n\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerCancel = _this.onPointerCancel.bind(_this);\n    _this.processPointerCancel = _this.processPointerCancel.bind(_this);\n\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerDown = _this.onPointerDown.bind(_this);\n    _this.processPointerDown = _this.processPointerDown.bind(_this);\n\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerMove = _this.onPointerMove.bind(_this);\n    _this.processPointerMove = _this.processPointerMove.bind(_this);\n\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerOut = _this.onPointerOut.bind(_this);\n    _this.processPointerOverOut = _this.processPointerOverOut.bind(_this);\n\n    /**\n     * @private\n     * @member {Function}\n     */\n    _this.onPointerOver = _this.onPointerOver.bind(_this);\n\n    /**\n     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n     * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n     * and functions are called instead of changing the CSS.\n     * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n     * @member {Object.<string, (string|Function|Object.<string, string>)>}\n     */\n    _this.cursorStyles = {\n      default: 'inherit',\n      pointer: 'pointer'\n    };\n\n    /**\n     * The mode of the cursor that is being used.\n     * The value of this is a key from the cursorStyles dictionary.\n     *\n     * @member {string}\n     */\n    _this.currentCursorMode = null;\n\n    /**\n     * Internal cached let.\n     *\n     * @private\n     * @member {string}\n     */\n    _this.cursor = null;\n\n    /**\n     * Internal cached let.\n     *\n     * @private\n     * @member {PIXI.Point}\n     */\n    _this._tempPoint = new core.Point();\n\n    /**\n     * The current resolution / device pixel ratio.\n     *\n     * @member {number}\n     * @default 1\n     */\n    _this.resolution = 1;\n    _this.setTargetElement(_this.renderer.view, _this.renderer.resolution);\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n     * object.\n     *\n     * @event PIXI.interaction.InteractionManager#mousedown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * on the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#rightdown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released over the display\n     * object.\n     *\n     * @event PIXI.interaction.InteractionManager#mouseup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * over the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#rightup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n     * the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#click\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * and released on the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#rightclick\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released outside the\n     * display object that initially registered a\n     * [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown}.\n     *\n     * @event PIXI.interaction.InteractionManager#mouseupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * outside the display object that initially registered a\n     * [rightdown]{@link PIXI.interaction.InteractionManager#event:rightdown}.\n     *\n     * @event PIXI.interaction.InteractionManager#rightupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved while over the display object\n     *\n     * @event PIXI.interaction.InteractionManager#mousemove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved onto the display object\n     *\n     * @event PIXI.interaction.InteractionManager#mouseover\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved off the display object\n     *\n     * @event PIXI.interaction.InteractionManager#mouseout\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed on the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#pointerdown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released over the display object.\n     * Not always fired when some buttons are held down while others are released. In those cases,\n     * use [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown} and\n     * [mouseup]{@link PIXI.interaction.InteractionManager#event:mouseup} instead.\n     *\n     * @event PIXI.interaction.InteractionManager#pointerup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a pointer event\n     *\n     * @event PIXI.interaction.InteractionManager#pointercancel\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed and released on the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#pointertap\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released outside the display object that initially\n     * registered a [pointerdown]{@link PIXI.interaction.InteractionManager#event:pointerdown}.\n     *\n     * @event PIXI.interaction.InteractionManager#pointerupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved while over the display object\n     *\n     * @event PIXI.interaction.InteractionManager#pointermove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved onto the display object\n     *\n     * @event PIXI.interaction.InteractionManager#pointerover\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved off the display object\n     *\n     * @event PIXI.interaction.InteractionManager#pointerout\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed on the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#touchstart\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed from the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#touchend\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a touch\n     *\n     * @event PIXI.interaction.InteractionManager#touchcancel\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed and removed from the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#tap\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed outside of the display object that initially\n     * registered a [touchstart]{@link PIXI.interaction.InteractionManager#event:touchstart}.\n     *\n     * @event PIXI.interaction.InteractionManager#touchendoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is moved along the display object.\n     *\n     * @event PIXI.interaction.InteractionManager#touchmove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n     * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mousedown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightdown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released over the display\n     * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n     * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#click\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightclick\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released outside the\n     * display object that initially registered a\n     * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * outside the display object that initially registered a\n     * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#rightupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved while over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mousemove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved onto the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseover\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved off the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#mouseout\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerdown\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerup\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a pointer event.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointercancel\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed and released on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointertap\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released outside the display object that initially\n     * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerupoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved while over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointermove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved onto the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerover\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved off the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#pointerout\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchstart\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed from the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchend\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a touch.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchcancel\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed and removed from the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#tap\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed outside of the display object that initially\n     * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchendoutside\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is moved along the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * @event PIXI.DisplayObject#touchmove\n     * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n     */\n    return _this;\n  }\n\n  /**\n   * Hit tests a point against the display tree, returning the first interactive object that is hit.\n   *\n   * @param {PIXI.Point} globalPoint - A point to hit test with, in global space.\n   * @param {PIXI.Container} [root] - The root display object to start from. If omitted, defaults\n   * to the last rendered root of the associated renderer.\n   * @return {PIXI.DisplayObject} The hit display object, if any.\n   */\n\n  InteractionManager.prototype.hitTest = function hitTest(globalPoint, root) {\n    // clear the target for our hit test\n    hitTestEvent.target = null;\n    // assign the global point\n    hitTestEvent.data.global = globalPoint;\n    // ensure safety of the root\n    if (!root) {\n      root = this.renderer._lastObjectRendered;\n    }\n    // run the hit test\n    this.processInteractive(hitTestEvent, root, null, true);\n    // return our found object - it'll be null if we didn't hit anything\n\n    return hitTestEvent.target;\n  };\n\n  /**\n   * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n   * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate\n   * another DOM element to receive those events.\n   *\n   * @param {HTMLCanvasElement} element - the DOM element which will receive mouse and touch events.\n   * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n   */\n\n  InteractionManager.prototype.setTargetElement = function setTargetElement(element) {\n    var resolution = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.removeEvents();\n    this.interactionDOMElement = element;\n    this.resolution = resolution;\n    this.addEvents();\n  };\n\n  /**\n   * Registers all the DOM events\n   *\n   * @private\n   */\n\n  InteractionManager.prototype.addEvents = function addEvents() {\n    if (!this.interactionDOMElement) {\n      return;\n    }\n    core.ticker.shared.add(this.update, this, core.UPDATE_PRIORITY.INTERACTION);\n    if (window.navigator.msPointerEnabled) {\n      this.interactionDOMElement.style['-ms-content-zooming'] = 'none';\n      this.interactionDOMElement.style['-ms-touch-action'] = 'none';\n    } else if (this.supportsPointerEvents) {\n      this.interactionDOMElement.style['touch-action'] = 'none';\n    }\n\n    /**\n     * These events are added first, so that if pointer events are normalised, they are fired\n     * in the same order as non-normalised events. ie. pointer event 1st, mouse / touch 2nd\n     */\n    if (this.supportsPointerEvents) {\n      window.document.addEventListener('pointermove', this.onPointerMove, true);\n      this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);\n      // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n      // we already handle those, so for the purposes of what we do in onPointerOut, we only\n      // care about the pointerleave event\n      this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, true);\n      this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);\n      window.addEventListener('pointercancel', this.onPointerCancel, true);\n      window.addEventListener('pointerup', this.onPointerUp, true);\n    } else {\n      window.document.addEventListener('mousemove', this.onPointerMove, true);\n      this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);\n      this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);\n      this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);\n      window.addEventListener('mouseup', this.onPointerUp, true);\n    }\n\n    // always look directly for touch events so that we can provide original data\n    // In a future version we should change this to being just a fallback and rely solely on\n    // PointerEvents whenever available\n    if (this.supportsTouchEvents) {\n      this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);\n      this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, true);\n      this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);\n      this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);\n    }\n    this.eventsAdded = true;\n  };\n\n  /**\n   * Removes all the DOM events that were previously registered\n   *\n   * @private\n   */\n\n  InteractionManager.prototype.removeEvents = function removeEvents() {\n    if (!this.interactionDOMElement) {\n      return;\n    }\n    core.ticker.shared.remove(this.update, this);\n    if (window.navigator.msPointerEnabled) {\n      this.interactionDOMElement.style['-ms-content-zooming'] = '';\n      this.interactionDOMElement.style['-ms-touch-action'] = '';\n    } else if (this.supportsPointerEvents) {\n      this.interactionDOMElement.style['touch-action'] = '';\n    }\n    if (this.supportsPointerEvents) {\n      window.document.removeEventListener('pointermove', this.onPointerMove, true);\n      this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);\n      this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, true);\n      this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);\n      window.removeEventListener('pointercancel', this.onPointerCancel, true);\n      window.removeEventListener('pointerup', this.onPointerUp, true);\n    } else {\n      window.document.removeEventListener('mousemove', this.onPointerMove, true);\n      this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);\n      this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);\n      this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);\n      window.removeEventListener('mouseup', this.onPointerUp, true);\n    }\n    if (this.supportsTouchEvents) {\n      this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);\n      this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n      this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);\n      this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);\n    }\n    this.interactionDOMElement = null;\n    this.eventsAdded = false;\n  };\n\n  /**\n   * Updates the state of interactive objects.\n   * Invoked by a throttled ticker update from {@link PIXI.ticker.shared}.\n   *\n   * @param {number} deltaTime - time delta since last tick\n   */\n\n  InteractionManager.prototype.update = function update(deltaTime) {\n    this._deltaTime += deltaTime;\n    if (this._deltaTime < this.interactionFrequency) {\n      return;\n    }\n    this._deltaTime = 0;\n    if (!this.interactionDOMElement) {\n      return;\n    }\n\n    // if the user move the mouse this check has already been done using the mouse move!\n    if (this.didMove) {\n      this.didMove = false;\n      return;\n    }\n    this.cursor = null;\n\n    // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n    // but there was a scenario of a display object moving under a static mouse cursor.\n    // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n    for (var k in this.activeInteractionData) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.activeInteractionData.hasOwnProperty(k)) {\n        var interactionData = this.activeInteractionData[k];\n        if (interactionData.originalEvent && interactionData.pointerType !== 'touch') {\n          var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, interactionData.originalEvent, interactionData);\n          this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerOverOut, true);\n        }\n      }\n    }\n    this.setCursorMode(this.cursor);\n\n    // TODO\n  };\n\n  /**\n   * Sets the current cursor mode, handling any callbacks or CSS style changes.\n   *\n   * @param {string} mode - cursor mode, a key from the cursorStyles dictionary\n   */\n\n  InteractionManager.prototype.setCursorMode = function setCursorMode(mode) {\n    mode = mode || 'default';\n    // if the mode didn't actually change, bail early\n    if (this.currentCursorMode === mode) {\n      return;\n    }\n    this.currentCursorMode = mode;\n    var style = this.cursorStyles[mode];\n\n    // only do things if there is a cursor style for it\n    if (style) {\n      switch (typeof style === 'undefined' ? 'undefined' : _typeof(style)) {\n        case 'string':\n          // string styles are handled as cursor CSS\n          this.interactionDOMElement.style.cursor = style;\n          break;\n        case 'function':\n          // functions are just called, and passed the cursor mode\n          style(mode);\n          break;\n        case 'object':\n          // if it is an object, assume that it is a dictionary of CSS styles,\n          // apply it to the interactionDOMElement\n          Object.assign(this.interactionDOMElement.style, style);\n          break;\n      }\n    } else if (typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode)) {\n      // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n      // for the mode, then assume that the dev wants it to be CSS for the cursor.\n      this.interactionDOMElement.style.cursor = mode;\n    }\n  };\n\n  /**\n   * Dispatches an event on the display object that was interacted with\n   *\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the display object in question\n   * @param {string} eventString - the name of the event (e.g, mousedown)\n   * @param {object} eventData - the event data object\n   * @private\n   */\n\n  InteractionManager.prototype.dispatchEvent = function dispatchEvent(displayObject, eventString, eventData) {\n    if (!eventData.stopped) {\n      eventData.currentTarget = displayObject;\n      eventData.type = eventString;\n      displayObject.emit(eventString, eventData);\n      if (displayObject[eventString]) {\n        displayObject[eventString](eventData);\n      }\n    }\n  };\n\n  /**\n   * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n   * resulting value is stored in the point. This takes into account the fact that the DOM\n   * element could be scaled and positioned anywhere on the screen.\n   *\n   * @param  {PIXI.Point} point - the point that the result will be stored in\n   * @param  {number} x - the x coord of the position to map\n   * @param  {number} y - the y coord of the position to map\n   */\n\n  InteractionManager.prototype.mapPositionToPoint = function mapPositionToPoint(point, x, y) {\n    var rect = void 0;\n\n    // IE 11 fix\n    if (!this.interactionDOMElement.parentElement) {\n      rect = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    } else {\n      rect = this.interactionDOMElement.getBoundingClientRect();\n    }\n    var resolutionMultiplier = navigator.isCocoonJS ? this.resolution : 1.0 / this.resolution;\n    point.x = (x - rect.left) * (this.interactionDOMElement.width / rect.width) * resolutionMultiplier;\n    point.y = (y - rect.top) * (this.interactionDOMElement.height / rect.height) * resolutionMultiplier;\n  };\n\n  /**\n   * This function is provides a neat way of crawling through the scene graph and running a\n   * specified function on all interactive objects it finds. It will also take care of hit\n   * testing the interactive objects and passes the hit across in the function.\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - event containing the point that\n   *  is tested for collision\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the displayObject\n   *  that will be hit test (recursively crawls its children)\n   * @param {Function} [func] - the function that will be called on each interactive object. The\n   *  interactionEvent, displayObject and hit will be passed to the function\n   * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n   * @param {boolean} [interactive] - Whether the displayObject is interactive\n   * @return {boolean} returns true if the displayObject hit the point\n   */\n\n  InteractionManager.prototype.processInteractive = function processInteractive(interactionEvent, displayObject, func, hitTest, interactive) {\n    if (!displayObject || !displayObject.visible) {\n      return false;\n    }\n    var point = interactionEvent.data.global;\n\n    // Took a little while to rework this function correctly! But now it is done and nice and optimised. ^_^\n    //\n    // This function will now loop through all objects and then only hit test the objects it HAS\n    // to, not all of them. MUCH faster..\n    // An object will be hit test if the following is true:\n    //\n    // 1: It is interactive.\n    // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n    //\n    // As another little optimisation once an interactive object has been hit we can carry on\n    // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n    // A final optimisation is that an object is not hit test directly if a child has already been hit.\n\n    interactive = displayObject.interactive || interactive;\n    var hit = false;\n    var interactiveParent = interactive;\n\n    // Flag here can set to false if the event is outside the parents hitArea or mask\n    var hitTestChildren = true;\n\n    // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n    // There is also no longer a need to hitTest children.\n    if (displayObject.hitArea) {\n      if (hitTest) {\n        displayObject.worldTransform.applyInverse(point, this._tempPoint);\n        if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y)) {\n          hitTest = false;\n          hitTestChildren = false;\n        } else {\n          hit = true;\n        }\n      }\n      interactiveParent = false;\n    }\n    // If there is a mask, no need to test against anything else if the pointer is not within the mask\n    else if (displayObject._mask) {\n      if (hitTest) {\n        if (!displayObject._mask.containsPoint(point)) {\n          hitTest = false;\n          hitTestChildren = false;\n        }\n      }\n    }\n\n    // ** FREE TIP **! If an object is not interactive or has no buttons in it\n    // (such as a game scene!) set interactiveChildren to false for that displayObject.\n    // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n    if (hitTestChildren && displayObject.interactiveChildren && displayObject.children) {\n      var children = displayObject.children;\n      for (var i = children.length - 1; i >= 0; i--) {\n        var child = children[i];\n\n        // time to get recursive.. if this function will return if something is hit..\n        var childHit = this.processInteractive(interactionEvent, child, func, hitTest, interactiveParent);\n        if (childHit) {\n          // its a good idea to check if a child has lost its parent.\n          // this means it has been removed whilst looping so its best\n          if (!child.parent) {\n            continue;\n          }\n\n          // we no longer need to hit test any more objects in this container as we we\n          // now know the parent has been hit\n          interactiveParent = false;\n\n          // If the child is interactive , that means that the object hit was actually\n          // interactive and not just the child of an interactive object.\n          // This means we no longer need to hit test anything else. We still need to run\n          // through all objects, but we don't need to perform any hit tests.\n\n          if (childHit) {\n            if (interactionEvent.target) {\n              hitTest = false;\n            }\n            hit = true;\n          }\n        }\n      }\n    }\n\n    // no point running this if the item is not interactive or does not have an interactive parent.\n    if (interactive) {\n      // if we are hit testing (as in we have no hit any objects yet)\n      // We also don't need to worry about hit testing if once of the displayObjects children\n      // has already been hit - but only if it was interactive, otherwise we need to keep\n      // looking for an interactive child, just in case we hit one\n      if (hitTest && !interactionEvent.target) {\n        // already tested against hitArea if it is defined\n        if (!displayObject.hitArea && displayObject.containsPoint) {\n          if (displayObject.containsPoint(point)) {\n            hit = true;\n          }\n        }\n      }\n      if (displayObject.interactive) {\n        if (hit && !interactionEvent.target) {\n          interactionEvent.target = displayObject;\n        }\n        if (func) {\n          func(interactionEvent, displayObject, !!hit);\n        }\n      }\n    }\n    return hit;\n  };\n\n  /**\n   * Is called when the pointer button is pressed down on the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down\n   */\n\n  InteractionManager.prototype.onPointerDown = function onPointerDown(originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n    var events = this.normalizeToPointerData(originalEvent);\n\n    /**\n     * No need to prevent default on natural pointer events, as there are no side effects\n     * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n     * so still need to be prevented.\n     */\n\n    // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n    if (this.autoPreventDefault && events[0].isNormalized) {\n      originalEvent.preventDefault();\n    }\n    var eventLen = events.length;\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerDown, true);\n      this.emit('pointerdown', interactionEvent);\n      if (event.pointerType === 'touch') {\n        this.emit('touchstart', interactionEvent);\n      }\n      // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n      else if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        var isRightButton = event.button === 2;\n        this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n      }\n    }\n  };\n\n  /**\n   * Processes the result of the pointer down check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n\n  InteractionManager.prototype.processPointerDown = function processPointerDown(interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    if (hit) {\n      if (!displayObject.trackedPointers[id]) {\n        displayObject.trackedPointers[id] = new _InteractionTrackingData2.default(id);\n      }\n      this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n      if (data.pointerType === 'touch') {\n        this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n      } else if (data.pointerType === 'mouse' || data.pointerType === 'pen') {\n        var isRightButton = data.button === 2;\n        if (isRightButton) {\n          displayObject.trackedPointers[id].rightDown = true;\n        } else {\n          displayObject.trackedPointers[id].leftDown = true;\n        }\n        this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n      }\n    }\n  };\n\n  /**\n   * Is called when the pointer button is released on the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released\n   * @param {boolean} cancelled - true if the pointer is cancelled\n   * @param {Function} func - Function passed to {@link processInteractive}\n   */\n\n  InteractionManager.prototype.onPointerComplete = function onPointerComplete(originalEvent, cancelled, func) {\n    var events = this.normalizeToPointerData(originalEvent);\n    var eventLen = events.length;\n\n    // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n    // in all cases (unless it was a pointercancel)\n    var eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n\n      // perform hit testing for events targeting our canvas or cancel events\n      this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, func, cancelled || !eventAppend);\n      this.emit(cancelled ? 'pointercancel' : 'pointerup' + eventAppend, interactionEvent);\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        var isRightButton = event.button === 2;\n        this.emit(isRightButton ? 'rightup' + eventAppend : 'mouseup' + eventAppend, interactionEvent);\n      } else if (event.pointerType === 'touch') {\n        this.emit(cancelled ? 'touchcancel' : 'touchend' + eventAppend, interactionEvent);\n        this.releaseInteractionDataForPointerId(event.pointerId, interactionData);\n      }\n    }\n  };\n\n  /**\n   * Is called when the pointer button is cancelled\n   *\n   * @private\n   * @param {PointerEvent} event - The DOM event of a pointer button being released\n   */\n\n  InteractionManager.prototype.onPointerCancel = function onPointerCancel(event) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n    this.onPointerComplete(event, true, this.processPointerCancel);\n  };\n\n  /**\n   * Processes the result of the pointer cancel check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n   */\n\n  InteractionManager.prototype.processPointerCancel = function processPointerCancel(interactionEvent, displayObject) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    if (displayObject.trackedPointers[id] !== undefined) {\n      delete displayObject.trackedPointers[id];\n      this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n      if (data.pointerType === 'touch') {\n        this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n      }\n    }\n  };\n\n  /**\n   * Is called when the pointer button is released on the renderer element\n   *\n   * @private\n   * @param {PointerEvent} event - The DOM event of a pointer button being released\n   */\n\n  InteractionManager.prototype.onPointerUp = function onPointerUp(event) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n    this.onPointerComplete(event, false, this.processPointerUp);\n  };\n\n  /**\n   * Processes the result of the pointer up check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n\n  InteractionManager.prototype.processPointerUp = function processPointerUp(interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    var trackingData = displayObject.trackedPointers[id];\n    var isTouch = data.pointerType === 'touch';\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n    // need to track mouse down status in the mouse block so that we can emit\n    // event in a later block\n    var isMouseTap = false;\n\n    // Mouse only\n    if (isMouse) {\n      var isRightButton = data.button === 2;\n      var flags = _InteractionTrackingData2.default.FLAGS;\n      var test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n      var isDown = trackingData !== undefined && trackingData.flags & test;\n      if (hit) {\n        this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n        if (isDown) {\n          this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent);\n          // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n          isMouseTap = true;\n        }\n      } else if (isDown) {\n        this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n      }\n      // update the down state of the tracking data\n      if (trackingData) {\n        if (isRightButton) {\n          trackingData.rightDown = false;\n        } else {\n          trackingData.leftDown = false;\n        }\n      }\n    }\n\n    // Pointers and Touches, and Mouse\n    if (hit) {\n      this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n      if (isTouch) this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n      if (trackingData) {\n        // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n        if (!isMouse || isMouseTap) {\n          this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n        }\n        if (isTouch) {\n          this.dispatchEvent(displayObject, 'tap', interactionEvent);\n          // touches are no longer over (if they ever were) when we get the touchend\n          // so we should ensure that we don't keep pretending that they are\n          trackingData.over = false;\n        }\n      }\n    } else if (trackingData) {\n      this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n      if (isTouch) this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n    }\n    // Only remove the tracking data if there is no over/down state still associated with it\n    if (trackingData && trackingData.none) {\n      delete displayObject.trackedPointers[id];\n    }\n  };\n\n  /**\n   * Is called when the pointer moves across the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer moving\n   */\n\n  InteractionManager.prototype.onPointerMove = function onPointerMove(originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n    var events = this.normalizeToPointerData(originalEvent);\n    if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen') {\n      this.didMove = true;\n      this.cursor = null;\n    }\n    var eventLen = events.length;\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      var interactive = event.pointerType === 'touch' ? this.moveWhenInside : true;\n      this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerMove, interactive);\n      this.emit('pointermove', interactionEvent);\n      if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') this.emit('mousemove', interactionEvent);\n    }\n    if (events[0].pointerType === 'mouse') {\n      this.setCursorMode(this.cursor);\n\n      // TODO BUG for parents interactive object (border order issue)\n    }\n  };\n\n  /**\n   * Processes the result of the pointer move check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n\n  InteractionManager.prototype.processPointerMove = function processPointerMove(interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var isTouch = data.pointerType === 'touch';\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n    if (isMouse) {\n      this.processPointerOverOut(interactionEvent, displayObject, hit);\n    }\n    if (!this.moveWhenInside || hit) {\n      this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n      if (isTouch) this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n      if (isMouse) this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n    }\n  };\n\n  /**\n   * Is called when the pointer is moved out of the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n   */\n\n  InteractionManager.prototype.onPointerOut = function onPointerOut(originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n    var events = this.normalizeToPointerData(originalEvent);\n\n    // Only mouse and pointer can call onPointerOut, so events will always be length 1\n    var event = events[0];\n    if (event.pointerType === 'mouse') {\n      this.mouseOverRenderer = false;\n      this.setCursorMode(null);\n    }\n    var interactionData = this.getInteractionDataForPointerId(event);\n    var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n    interactionEvent.data.originalEvent = event;\n    this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerOverOut, false);\n    this.emit('pointerout', interactionEvent);\n    if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n      this.emit('mouseout', interactionEvent);\n    } else {\n      // we can get touchleave events after touchend, so we want to make sure we don't\n      // introduce memory leaks\n      this.releaseInteractionDataForPointerId(interactionData.identifier);\n    }\n  };\n\n  /**\n   * Processes the result of the pointer over/out check and dispatches the event if need be\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n   * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n   * @param {boolean} hit - the result of the hit test on the display object\n   */\n\n  InteractionManager.prototype.processPointerOverOut = function processPointerOverOut(interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n    var trackingData = displayObject.trackedPointers[id];\n\n    // if we just moused over the display object, then we need to track that state\n    if (hit && !trackingData) {\n      trackingData = displayObject.trackedPointers[id] = new _InteractionTrackingData2.default(id);\n    }\n    if (trackingData === undefined) return;\n    if (hit && this.mouseOverRenderer) {\n      if (!trackingData.over) {\n        trackingData.over = true;\n        this.dispatchEvent(displayObject, 'pointerover', interactionEvent);\n        if (isMouse) {\n          this.dispatchEvent(displayObject, 'mouseover', interactionEvent);\n        }\n      }\n\n      // only change the cursor if it has not already been changed (by something deeper in the\n      // display tree)\n      if (isMouse && this.cursor === null) {\n        this.cursor = displayObject.cursor;\n      }\n    } else if (trackingData.over) {\n      trackingData.over = false;\n      this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n      if (isMouse) {\n        this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n      }\n      // if there is no mouse down information for the pointer, then it is safe to delete\n      if (trackingData.none) {\n        delete displayObject.trackedPointers[id];\n      }\n    }\n  };\n\n  /**\n   * Is called when the pointer is moved into the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view\n   */\n\n  InteractionManager.prototype.onPointerOver = function onPointerOver(originalEvent) {\n    var events = this.normalizeToPointerData(originalEvent);\n\n    // Only mouse and pointer can call onPointerOver, so events will always be length 1\n    var event = events[0];\n    var interactionData = this.getInteractionDataForPointerId(event);\n    var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n    interactionEvent.data.originalEvent = event;\n    if (event.pointerType === 'mouse') {\n      this.mouseOverRenderer = true;\n    }\n    this.emit('pointerover', interactionEvent);\n    if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n      this.emit('mouseover', interactionEvent);\n    }\n  };\n\n  /**\n   * Get InteractionData for a given pointerId. Store that data as well\n   *\n   * @private\n   * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData\n   * @return {PIXI.interaction.InteractionData} - Interaction data for the given pointer identifier\n   */\n\n  InteractionManager.prototype.getInteractionDataForPointerId = function getInteractionDataForPointerId(event) {\n    var pointerId = event.pointerId;\n    var interactionData = void 0;\n    if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse') {\n      interactionData = this.mouse;\n    } else if (this.activeInteractionData[pointerId]) {\n      interactionData = this.activeInteractionData[pointerId];\n    } else {\n      interactionData = this.interactionDataPool.pop() || new _InteractionData2.default();\n      interactionData.identifier = pointerId;\n      this.activeInteractionData[pointerId] = interactionData;\n    }\n    // copy properties from the event, so that we can make sure that touch/pointer specific\n    // data is available\n    interactionData.copyEvent(event);\n    return interactionData;\n  };\n\n  /**\n   * Return unused InteractionData to the pool, for a given pointerId\n   *\n   * @private\n   * @param {number} pointerId - Identifier from a pointer event\n   */\n\n  InteractionManager.prototype.releaseInteractionDataForPointerId = function releaseInteractionDataForPointerId(pointerId) {\n    var interactionData = this.activeInteractionData[pointerId];\n    if (interactionData) {\n      delete this.activeInteractionData[pointerId];\n      interactionData.reset();\n      this.interactionDataPool.push(interactionData);\n    }\n  };\n\n  /**\n   * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n   *\n   * @private\n   * @param {PIXI.interaction.InteractionEvent} interactionEvent - The event to be configured\n   * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent\n   * @param {PIXI.interaction.InteractionData} interactionData - The InteractionData that will be paired\n   *        with the InteractionEvent\n   * @return {PIXI.interaction.InteractionEvent} the interaction event that was passed in\n   */\n\n  InteractionManager.prototype.configureInteractionEventForDOMEvent = function configureInteractionEventForDOMEvent(interactionEvent, pointerEvent, interactionData) {\n    interactionEvent.data = interactionData;\n    this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);\n\n    // This is the way InteractionManager processed touch events before the refactoring, so I've kept\n    // it here. But it doesn't make that much sense to me, since mapPositionToPoint already factors\n    // in this.resolution, so this just divides by this.resolution twice for touch events...\n    if (navigator.isCocoonJS && pointerEvent.pointerType === 'touch') {\n      interactionData.global.x = interactionData.global.x / this.resolution;\n      interactionData.global.y = interactionData.global.y / this.resolution;\n    }\n\n    // Not really sure why this is happening, but it's how a previous version handled things\n    if (pointerEvent.pointerType === 'touch') {\n      pointerEvent.globalX = interactionData.global.x;\n      pointerEvent.globalY = interactionData.global.y;\n    }\n    interactionData.originalEvent = pointerEvent;\n    interactionEvent.reset();\n    return interactionEvent;\n  };\n\n  /**\n   * Ensures that the original event object contains all data that a regular pointer event would have\n   *\n   * @private\n   * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n   * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer\n   *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n   */\n\n  InteractionManager.prototype.normalizeToPointerData = function normalizeToPointerData(event) {\n    var normalizedEvents = [];\n    if (this.supportsTouchEvents && event instanceof TouchEvent) {\n      for (var i = 0, li = event.changedTouches.length; i < li; i++) {\n        var touch = event.changedTouches[i];\n        if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;\n        if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;\n        if (typeof touch.isPrimary === 'undefined') {\n          touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n        }\n        if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n        if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n        if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n        if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n        if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n        if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n        if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n        if (typeof touch.twist === 'undefined') touch.twist = 0;\n        if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n        // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n        // support, and the fill ins are not quite the same\n        // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n        // left is not 0,0 on the page\n        if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n        if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n        // mark the touch as normalized, just so that we know we did it\n        touch.isNormalized = true;\n        normalizedEvents.push(touch);\n      }\n    }\n    // apparently PointerEvent subclasses MouseEvent, so yay\n    else if (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof window.PointerEvent))) {\n      if (typeof event.isPrimary === 'undefined') event.isPrimary = true;\n      if (typeof event.width === 'undefined') event.width = 1;\n      if (typeof event.height === 'undefined') event.height = 1;\n      if (typeof event.tiltX === 'undefined') event.tiltX = 0;\n      if (typeof event.tiltY === 'undefined') event.tiltY = 0;\n      if (typeof event.pointerType === 'undefined') event.pointerType = 'mouse';\n      if (typeof event.pointerId === 'undefined') event.pointerId = MOUSE_POINTER_ID;\n      if (typeof event.pressure === 'undefined') event.pressure = 0.5;\n      if (typeof event.twist === 'undefined') event.twist = 0;\n      if (typeof event.tangentialPressure === 'undefined') event.tangentialPressure = 0;\n\n      // mark the mouse event as normalized, just so that we know we did it\n      event.isNormalized = true;\n      normalizedEvents.push(event);\n    } else {\n      normalizedEvents.push(event);\n    }\n    return normalizedEvents;\n  };\n\n  /**\n   * Destroys the interaction manager\n   *\n   */\n\n  InteractionManager.prototype.destroy = function destroy() {\n    this.removeEvents();\n    this.removeAllListeners();\n    this.renderer = null;\n    this.mouse = null;\n    this.eventData = null;\n    this.interactionDOMElement = null;\n    this.onPointerDown = null;\n    this.processPointerDown = null;\n    this.onPointerUp = null;\n    this.processPointerUp = null;\n    this.onPointerCancel = null;\n    this.processPointerCancel = null;\n    this.onPointerMove = null;\n    this.processPointerMove = null;\n    this.onPointerOut = null;\n    this.processPointerOverOut = null;\n    this.onPointerOver = null;\n    this._tempPoint = null;\n  };\n  return InteractionManager;\n}(_eventemitter2.default);\nexports.default = InteractionManager;\ncore.WebGLRenderer.registerPlugin('interaction', InteractionManager);\ncore.CanvasRenderer.registerPlugin('interaction', InteractionManager);","map":{"version":3,"names":["_core","require","core","_InteractionData","_InteractionEvent","_InteractionTrackingData","_eventemitter","_interactiveTarget","utils","mixins","delayMixin","DisplayObject","prototype","_interactiveTarget2","default","MOUSE_POINTER_ID","hitTestEvent","target","data","global","InteractionManager","renderer","options","_classCallCheck","_this","_possibleConstructorReturn","_EventEmitter","call","autoPreventDefault","undefined","interactionFrequency","mouse","_InteractionData2","identifier","set","activeInteractionData","interactionDataPool","eventData","_InteractionEvent2","interactionDOMElement","moveWhenInside","eventsAdded","mouseOverRenderer","supportsTouchEvents","window","supportsPointerEvents","PointerEvent","onPointerUp","bind","processPointerUp","onPointerCancel","processPointerCancel","onPointerDown","processPointerDown","onPointerMove","processPointerMove","onPointerOut","processPointerOverOut","onPointerOver","cursorStyles","pointer","currentCursorMode","cursor","_tempPoint","Point","resolution","setTargetElement","view","hitTest","globalPoint","root","_lastObjectRendered","processInteractive","element","arguments","length","removeEvents","addEvents","ticker","shared","add","update","UPDATE_PRIORITY","INTERACTION","navigator","msPointerEnabled","style","document","addEventListener","remove","removeEventListener","deltaTime","_deltaTime","didMove","k","hasOwnProperty","interactionData","originalEvent","pointerType","interactionEvent","configureInteractionEventForDOMEvent","setCursorMode","mode","_typeof","Object","assign","dispatchEvent","displayObject","eventString","stopped","currentTarget","type","emit","mapPositionToPoint","point","x","y","rect","parentElement","width","height","getBoundingClientRect","resolutionMultiplier","isCocoonJS","left","top","func","interactive","visible","hit","interactiveParent","hitTestChildren","hitArea","worldTransform","applyInverse","contains","_mask","containsPoint","interactiveChildren","children","i","child","childHit","parent","events","normalizeToPointerData","isNormalized","preventDefault","eventLen","event","getInteractionDataForPointerId","isRightButton","button","id","trackedPointers","_InteractionTrackingData2","rightDown","leftDown","onPointerComplete","cancelled","eventAppend","releaseInteractionDataForPointerId","pointerId","trackingData","isTouch","isMouse","isMouseTap","flags","FLAGS","test","RIGHT_DOWN","LEFT_DOWN","isDown","over","none","pop","copyEvent","reset","push","pointerEvent","clientX","clientY","globalX","globalY","normalizedEvents","TouchEvent","li","changedTouches","touch","touches","buttons","isPrimary","radiusX","radiusY","tiltX","tiltY","pressure","force","twist","tangentialPressure","layerX","offsetX","layerY","offsetY","MouseEvent","destroy","removeAllListeners","WebGLRenderer","registerPlugin","CanvasRenderer"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/interaction/InteractionManager.js"],"sourcesContent":["import * as core from '../core';\nimport InteractionData from './InteractionData';\nimport InteractionEvent from './InteractionEvent';\nimport InteractionTrackingData from './InteractionTrackingData';\nimport EventEmitter from 'eventemitter3';\nimport interactiveTarget from './interactiveTarget';\n\n// Mix interactiveTarget into core.DisplayObject.prototype, after deprecation has been handled\ncore.utils.mixins.delayMixin(\n    core.DisplayObject.prototype,\n    interactiveTarget\n);\n\nconst MOUSE_POINTER_ID = 1;\n\n// helpers for hitTest() - only used inside hitTest()\nconst hitTestEvent = {\n    target: null,\n    data: {\n        global: null,\n    },\n};\n\n/**\n * The interaction manager deals with mouse, touch and pointer events. Any DisplayObject can be interactive\n * if its interactive parameter is set to true\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.interaction\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI.interaction\n */\nexport default class InteractionManager extends EventEmitter\n{\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     * @param {object} [options] - The options for the manager.\n     * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n     * @param {number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.\n     */\n    constructor(renderer, options)\n    {\n        super();\n\n        options = options || {};\n\n        /**\n         * The renderer this interaction manager works for.\n         *\n         * @member {PIXI.SystemRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * Should default browser actions automatically be prevented.\n         * Does not apply to pointer events for backwards compatibility\n         * preventDefault on pointer events stops mouse events from firing\n         * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n\n        /**\n         * Frequency in milliseconds that the mousemove, moveover & mouseout interaction events will be checked.\n         *\n         * @member {number}\n         * @default 10\n         */\n        this.interactionFrequency = options.interactionFrequency || 10;\n\n        /**\n         * The mouse data\n         *\n         * @member {PIXI.interaction.InteractionData}\n         */\n        this.mouse = new InteractionData();\n        this.mouse.identifier = MOUSE_POINTER_ID;\n\n        // setting the mouse to start off far off screen will mean that mouse over does\n        //  not get called before we even move the mouse.\n        this.mouse.global.set(-999999);\n\n        /**\n         * Actively tracked InteractionData\n         *\n         * @private\n         * @member {Object.<number,PIXI.interation.InteractionData>}\n         */\n        this.activeInteractionData = {};\n        this.activeInteractionData[MOUSE_POINTER_ID] = this.mouse;\n\n        /**\n         * Pool of unused InteractionData\n         *\n         * @private\n         * @member {PIXI.interation.InteractionData[]}\n         */\n        this.interactionDataPool = [];\n\n        /**\n         * An event data object to handle all the event tracking/dispatching\n         *\n         * @member {object}\n         */\n        this.eventData = new InteractionEvent();\n\n        /**\n         * The DOM element to bind to.\n         *\n         * @private\n         * @member {HTMLElement}\n         */\n        this.interactionDOMElement = null;\n\n        /**\n         * This property determines if mousemove and touchmove events are fired only when the cursor\n         * is over the object.\n         * Setting to true will make things work more in line with how the DOM verison works.\n         * Setting to false can make things easier for things like dragging\n         * It is currently set to false as this is how PixiJS used to work. This will be set to true in\n         * future versions of pixi.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.moveWhenInside = false;\n\n        /**\n         * Have events been attached to the dom element?\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.eventsAdded = false;\n\n        /**\n         * Is the mouse hovering over the renderer?\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.mouseOverRenderer = false;\n\n        /**\n         * Does the device support touch events\n         * https://www.w3.org/TR/touch-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsTouchEvents = 'ontouchstart' in window;\n\n        /**\n         * Does the device support pointer events\n         * https://www.w3.org/Submission/pointer-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsPointerEvents = !!window.PointerEvent;\n\n        // this will make it so that you don't have to call bind all the time\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.processPointerUp = this.processPointerUp.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerCancel = this.onPointerCancel.bind(this);\n        this.processPointerCancel = this.processPointerCancel.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.processPointerDown = this.processPointerDown.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.processPointerMove = this.processPointerMove.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOut = this.onPointerOut.bind(this);\n        this.processPointerOverOut = this.processPointerOverOut.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOver = this.onPointerOver.bind(this);\n\n        /**\n         * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n         * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n         * and functions are called instead of changing the CSS.\n         * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n         * @member {Object.<string, (string|Function|Object.<string, string>)>}\n         */\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        /**\n         * The mode of the cursor that is being used.\n         * The value of this is a key from the cursorStyles dictionary.\n         *\n         * @member {string}\n         */\n        this.currentCursorMode = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {string}\n         */\n        this.cursor = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {PIXI.Point}\n         */\n        this._tempPoint = new core.Point();\n\n        /**\n         * The current resolution / device pixel ratio.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = 1;\n\n        this.setTargetElement(this.renderer.view, this.renderer.resolution);\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n         * object.\n         *\n         * @event PIXI.interaction.InteractionManager#mousedown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object.\n         *\n         * @event PIXI.interaction.InteractionManager#mouseup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#click\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightclick\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown}.\n         *\n         * @event PIXI.interaction.InteractionManager#mouseupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.interaction.InteractionManager#event:rightdown}.\n         *\n         * @event PIXI.interaction.InteractionManager#rightupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mousemove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mouseover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mouseout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * Not always fired when some buttons are held down while others are released. In those cases,\n         * use [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown} and\n         * [mouseup]{@link PIXI.interaction.InteractionManager#event:mouseup} instead.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event\n         *\n         * @event PIXI.interaction.InteractionManager#pointercancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#pointertap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.interaction.InteractionManager#event:pointerdown}.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointermove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointerover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointerout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchstart\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchend\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch\n         *\n         * @event PIXI.interaction.InteractionManager#touchcancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#tap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.interaction.InteractionManager#event:touchstart}.\n         *\n         * @event PIXI.interaction.InteractionManager#touchendoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchmove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mousedown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#click\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightclick\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mousemove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointercancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointertap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointermove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchstart\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchend\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchcancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#tap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchendoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchmove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n    }\n\n    /**\n     * Hit tests a point against the display tree, returning the first interactive object that is hit.\n     *\n     * @param {PIXI.Point} globalPoint - A point to hit test with, in global space.\n     * @param {PIXI.Container} [root] - The root display object to start from. If omitted, defaults\n     * to the last rendered root of the associated renderer.\n     * @return {PIXI.DisplayObject} The hit display object, if any.\n     */\n    hitTest(globalPoint, root)\n    {\n        // clear the target for our hit test\n        hitTestEvent.target = null;\n        // assign the global point\n        hitTestEvent.data.global = globalPoint;\n        // ensure safety of the root\n        if (!root)\n        {\n            root = this.renderer._lastObjectRendered;\n        }\n        // run the hit test\n        this.processInteractive(hitTestEvent, root, null, true);\n        // return our found object - it'll be null if we didn't hit anything\n\n        return hitTestEvent.target;\n    }\n\n    /**\n     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate\n     * another DOM element to receive those events.\n     *\n     * @param {HTMLCanvasElement} element - the DOM element which will receive mouse and touch events.\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n     */\n    setTargetElement(element, resolution = 1)\n    {\n        this.removeEvents();\n\n        this.interactionDOMElement = element;\n\n        this.resolution = resolution;\n\n        this.addEvents();\n    }\n\n    /**\n     * Registers all the DOM events\n     *\n     * @private\n     */\n    addEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        core.ticker.shared.add(this.update, this, core.UPDATE_PRIORITY.INTERACTION);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = 'none';\n            this.interactionDOMElement.style['-ms-touch-action'] = 'none';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = 'none';\n        }\n\n        /**\n         * These events are added first, so that if pointer events are normalised, they are fired\n         * in the same order as non-normalised events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            window.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);\n            window.addEventListener('pointercancel', this.onPointerCancel, true);\n            window.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            window.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);\n            window.addEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        // always look directly for touch events so that we can provide original data\n        // In a future version we should change this to being just a fallback and rely solely on\n        // PointerEvents whenever available\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, true);\n            this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);\n            this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.eventsAdded = true;\n    }\n\n    /**\n     * Removes all the DOM events that were previously registered\n     *\n     * @private\n     */\n    removeEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        core.ticker.shared.remove(this.update, this);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = '';\n            this.interactionDOMElement.style['-ms-touch-action'] = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            window.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);\n            window.removeEventListener('pointercancel', this.onPointerCancel, true);\n            window.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            window.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);\n            window.removeEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n            this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);\n            this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.interactionDOMElement = null;\n\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Updates the state of interactive objects.\n     * Invoked by a throttled ticker update from {@link PIXI.ticker.shared}.\n     *\n     * @param {number} deltaTime - time delta since last tick\n     */\n    update(deltaTime)\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this.didMove)\n        {\n            this.didMove = false;\n\n            return;\n        }\n\n        this.cursor = null;\n\n        // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n        // but there was a scenario of a display object moving under a static mouse cursor.\n        // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n        for (const k in this.activeInteractionData)\n        {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.activeInteractionData.hasOwnProperty(k))\n            {\n                const interactionData = this.activeInteractionData[k];\n\n                if (interactionData.originalEvent && interactionData.pointerType !== 'touch')\n                {\n                    const interactionEvent = this.configureInteractionEventForDOMEvent(\n                        this.eventData,\n                        interactionData.originalEvent,\n                        interactionData\n                    );\n\n                    this.processInteractive(\n                        interactionEvent,\n                        this.renderer._lastObjectRendered,\n                        this.processPointerOverOut,\n                        true\n                    );\n                }\n            }\n        }\n\n        this.setCursorMode(this.cursor);\n\n        // TODO\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     *\n     * @param {string} mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    setCursorMode(mode)\n    {\n        mode = mode || 'default';\n        // if the mode didn't actually change, bail early\n        if (this.currentCursorMode === mode)\n        {\n            return;\n        }\n        this.currentCursorMode = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    this.interactionDOMElement.style.cursor = style;\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    Object.assign(this.interactionDOMElement.style, style);\n                    break;\n            }\n        }\n        else if (typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.interactionDOMElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * Dispatches an event on the display object that was interacted with\n     *\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the display object in question\n     * @param {string} eventString - the name of the event (e.g, mousedown)\n     * @param {object} eventData - the event data object\n     * @private\n     */\n    dispatchEvent(displayObject, eventString, eventData)\n    {\n        if (!eventData.stopped)\n        {\n            eventData.currentTarget = displayObject;\n            eventData.type = eventString;\n\n            displayObject.emit(eventString, eventData);\n\n            if (displayObject[eventString])\n            {\n                displayObject[eventString](eventData);\n            }\n        }\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     *\n     * @param  {PIXI.Point} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    mapPositionToPoint(point, x, y)\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.interactionDOMElement.parentElement)\n        {\n            rect = { x: 0, y: 0, width: 0, height: 0 };\n        }\n        else\n        {\n            rect = this.interactionDOMElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = navigator.isCocoonJS ? this.resolution : (1.0 / this.resolution);\n\n        point.x = ((x - rect.left) * (this.interactionDOMElement.width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * (this.interactionDOMElement.height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n     * @param {boolean} [interactive] - Whether the displayObject is interactive\n     * @return {boolean} returns true if the displayObject hit the point\n     */\n    processInteractive(interactionEvent, displayObject, func, hitTest, interactive)\n    {\n        if (!displayObject || !displayObject.visible)\n        {\n            return false;\n        }\n\n        const point = interactionEvent.data.global;\n\n        // Took a little while to rework this function correctly! But now it is done and nice and optimised. ^_^\n        //\n        // This function will now loop through all objects and then only hit test the objects it HAS\n        // to, not all of them. MUCH faster..\n        // An object will be hit test if the following is true:\n        //\n        // 1: It is interactive.\n        // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n        //\n        // As another little optimisation once an interactive object has been hit we can carry on\n        // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n        // A final optimisation is that an object is not hit test directly if a child has already been hit.\n\n        interactive = displayObject.interactive || interactive;\n\n        let hit = false;\n        let interactiveParent = interactive;\n\n        // Flag here can set to false if the event is outside the parents hitArea or mask\n        let hitTestChildren = true;\n\n        // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n        // There is also no longer a need to hitTest children.\n        if (displayObject.hitArea)\n        {\n            if (hitTest)\n            {\n                displayObject.worldTransform.applyInverse(point, this._tempPoint);\n                if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y))\n                {\n                    hitTest = false;\n                    hitTestChildren = false;\n                }\n                else\n                {\n                    hit = true;\n                }\n            }\n            interactiveParent = false;\n        }\n        // If there is a mask, no need to test against anything else if the pointer is not within the mask\n        else if (displayObject._mask)\n        {\n            if (hitTest)\n            {\n                if (!displayObject._mask.containsPoint(point))\n                {\n                    hitTest = false;\n                    hitTestChildren = false;\n                }\n            }\n        }\n\n        // ** FREE TIP **! If an object is not interactive or has no buttons in it\n        // (such as a game scene!) set interactiveChildren to false for that displayObject.\n        // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n        if (hitTestChildren && displayObject.interactiveChildren && displayObject.children)\n        {\n            const children = displayObject.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i];\n\n                // time to get recursive.. if this function will return if something is hit..\n                const childHit = this.processInteractive(interactionEvent, child, func, hitTest, interactiveParent);\n\n                if (childHit)\n                {\n                    // its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (!child.parent)\n                    {\n                        continue;\n                    }\n\n                    // we no longer need to hit test any more objects in this container as we we\n                    // now know the parent has been hit\n                    interactiveParent = false;\n\n                    // If the child is interactive , that means that the object hit was actually\n                    // interactive and not just the child of an interactive object.\n                    // This means we no longer need to hit test anything else. We still need to run\n                    // through all objects, but we don't need to perform any hit tests.\n\n                    if (childHit)\n                    {\n                        if (interactionEvent.target)\n                        {\n                            hitTest = false;\n                        }\n                        hit = true;\n                    }\n                }\n            }\n        }\n\n        // no point running this if the item is not interactive or does not have an interactive parent.\n        if (interactive)\n        {\n            // if we are hit testing (as in we have no hit any objects yet)\n            // We also don't need to worry about hit testing if once of the displayObjects children\n            // has already been hit - but only if it was interactive, otherwise we need to keep\n            // looking for an interactive child, just in case we hit one\n            if (hitTest && !interactionEvent.target)\n            {\n                // already tested against hitArea if it is defined\n                if (!displayObject.hitArea && displayObject.containsPoint)\n                {\n                    if (displayObject.containsPoint(point))\n                    {\n                        hit = true;\n                    }\n                }\n            }\n\n            if (displayObject.interactive)\n            {\n                if (hit && !interactionEvent.target)\n                {\n                    interactionEvent.target = displayObject;\n                }\n\n                if (func)\n                {\n                    func(interactionEvent, displayObject, !!hit);\n                }\n            }\n        }\n\n        return hit;\n    }\n\n    /**\n     * Is called when the pointer button is pressed down on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down\n     */\n    onPointerDown(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        /**\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && events[0].isNormalized)\n        {\n            originalEvent.preventDefault();\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerDown, true);\n\n            this.emit('pointerdown', interactionEvent);\n            if (event.pointerType === 'touch')\n            {\n                this.emit('touchstart', interactionEvent);\n            }\n            // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n            else if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n            }\n        }\n    }\n\n    /**\n     * Processes the result of the pointer down check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerDown(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n        const id = interactionEvent.data.identifier;\n\n        if (hit)\n        {\n            if (!displayObject.trackedPointers[id])\n            {\n                displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n            }\n            this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n            }\n            else if (data.pointerType === 'mouse' || data.pointerType === 'pen')\n            {\n                const isRightButton = data.button === 2;\n\n                if (isRightButton)\n                {\n                    displayObject.trackedPointers[id].rightDown = true;\n                }\n                else\n                {\n                    displayObject.trackedPointers[id].leftDown = true;\n                }\n\n                this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released\n     * @param {boolean} cancelled - true if the pointer is cancelled\n     * @param {Function} func - Function passed to {@link processInteractive}\n     */\n    onPointerComplete(originalEvent, cancelled, func)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        const eventLen = events.length;\n\n        // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n        // in all cases (unless it was a pointercancel)\n        const eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            // perform hit testing for events targeting our canvas or cancel events\n            this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, func, cancelled || !eventAppend);\n\n            this.emit(cancelled ? 'pointercancel' : `pointerup${eventAppend}`, interactionEvent);\n\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? `rightup${eventAppend}` : `mouseup${eventAppend}`, interactionEvent);\n            }\n            else if (event.pointerType === 'touch')\n            {\n                this.emit(cancelled ? 'touchcancel' : `touchend${eventAppend}`, interactionEvent);\n                this.releaseInteractionDataForPointerId(event.pointerId, interactionData);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is cancelled\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    onPointerCancel(event)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n\n        this.onPointerComplete(event, true, this.processPointerCancel);\n    }\n\n    /**\n     * Processes the result of the pointer cancel check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     */\n    processPointerCancel(interactionEvent, displayObject)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        if (displayObject.trackedPointers[id] !== undefined)\n        {\n            delete displayObject.trackedPointers[id];\n            this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    onPointerUp(event)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n\n        this.onPointerComplete(event, false, this.processPointerUp);\n    }\n\n    /**\n     * Processes the result of the pointer up check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerUp(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const trackingData = displayObject.trackedPointers[id];\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n        // need to track mouse down status in the mouse block so that we can emit\n        // event in a later block\n        let isMouseTap = false;\n\n        // Mouse only\n        if (isMouse)\n        {\n            const isRightButton = data.button === 2;\n\n            const flags = InteractionTrackingData.FLAGS;\n\n            const test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n\n            const isDown = trackingData !== undefined && (trackingData.flags & test);\n\n            if (hit)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n\n                if (isDown)\n                {\n                    this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent);\n                    // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n                    isMouseTap = true;\n                }\n            }\n            else if (isDown)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n            }\n            // update the down state of the tracking data\n            if (trackingData)\n            {\n                if (isRightButton)\n                {\n                    trackingData.rightDown = false;\n                }\n                else\n                {\n                    trackingData.leftDown = false;\n                }\n            }\n        }\n\n        // Pointers and Touches, and Mouse\n        if (hit)\n        {\n            this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n\n            if (trackingData)\n            {\n                // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n                if (!isMouse || isMouseTap)\n                {\n                    this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n                }\n                if (isTouch)\n                {\n                    this.dispatchEvent(displayObject, 'tap', interactionEvent);\n                    // touches are no longer over (if they ever were) when we get the touchend\n                    // so we should ensure that we don't keep pretending that they are\n                    trackingData.over = false;\n                }\n            }\n        }\n        else if (trackingData)\n        {\n            this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n        }\n        // Only remove the tracking data if there is no over/down state still associated with it\n        if (trackingData && trackingData.none)\n        {\n            delete displayObject.trackedPointers[id];\n        }\n    }\n\n    /**\n     * Is called when the pointer moves across the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer moving\n     */\n    onPointerMove(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen')\n        {\n            this.didMove = true;\n\n            this.cursor = null;\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            const interactive = event.pointerType === 'touch' ? this.moveWhenInside : true;\n\n            this.processInteractive(\n                interactionEvent,\n                this.renderer._lastObjectRendered,\n                this.processPointerMove,\n                interactive\n            );\n            this.emit('pointermove', interactionEvent);\n            if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen') this.emit('mousemove', interactionEvent);\n        }\n\n        if (events[0].pointerType === 'mouse')\n        {\n            this.setCursorMode(this.cursor);\n\n            // TODO BUG for parents interactive object (border order issue)\n        }\n    }\n\n    /**\n     * Processes the result of the pointer move check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerMove(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        if (isMouse)\n        {\n            this.processPointerOverOut(interactionEvent, displayObject, hit);\n        }\n\n        if (!this.moveWhenInside || hit)\n        {\n            this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n            if (isMouse) this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved out of the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n     */\n    onPointerOut(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOut, so events will always be length 1\n        const event = events[0];\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = false;\n            this.setCursorMode(null);\n        }\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerOverOut, false);\n\n        this.emit('pointerout', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseout', interactionEvent);\n        }\n        else\n        {\n            // we can get touchleave events after touchend, so we want to make sure we don't\n            // introduce memory leaks\n            this.releaseInteractionDataForPointerId(interactionData.identifier);\n        }\n    }\n\n    /**\n     * Processes the result of the pointer over/out check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerOverOut(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        let trackingData = displayObject.trackedPointers[id];\n\n        // if we just moused over the display object, then we need to track that state\n        if (hit && !trackingData)\n        {\n            trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n        }\n\n        if (trackingData === undefined) return;\n\n        if (hit && this.mouseOverRenderer)\n        {\n            if (!trackingData.over)\n            {\n                trackingData.over = true;\n                this.dispatchEvent(displayObject, 'pointerover', interactionEvent);\n                if (isMouse)\n                {\n                    this.dispatchEvent(displayObject, 'mouseover', interactionEvent);\n                }\n            }\n\n            // only change the cursor if it has not already been changed (by something deeper in the\n            // display tree)\n            if (isMouse && this.cursor === null)\n            {\n                this.cursor = displayObject.cursor;\n            }\n        }\n        else if (trackingData.over)\n        {\n            trackingData.over = false;\n            this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n            if (isMouse)\n            {\n                this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n            }\n            // if there is no mouse down information for the pointer, then it is safe to delete\n            if (trackingData.none)\n            {\n                delete displayObject.trackedPointers[id];\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved into the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view\n     */\n    onPointerOver(originalEvent)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOver, so events will always be length 1\n        const event = events[0];\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = true;\n        }\n\n        this.emit('pointerover', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseover', interactionEvent);\n        }\n    }\n\n    /**\n     * Get InteractionData for a given pointerId. Store that data as well\n     *\n     * @private\n     * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData\n     * @return {PIXI.interaction.InteractionData} - Interaction data for the given pointer identifier\n     */\n    getInteractionDataForPointerId(event)\n    {\n        const pointerId = event.pointerId;\n\n        let interactionData;\n\n        if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse')\n        {\n            interactionData = this.mouse;\n        }\n        else if (this.activeInteractionData[pointerId])\n        {\n            interactionData = this.activeInteractionData[pointerId];\n        }\n        else\n        {\n            interactionData = this.interactionDataPool.pop() || new InteractionData();\n            interactionData.identifier = pointerId;\n            this.activeInteractionData[pointerId] = interactionData;\n        }\n        // copy properties from the event, so that we can make sure that touch/pointer specific\n        // data is available\n        interactionData.copyEvent(event);\n\n        return interactionData;\n    }\n\n    /**\n     * Return unused InteractionData to the pool, for a given pointerId\n     *\n     * @private\n     * @param {number} pointerId - Identifier from a pointer event\n     */\n    releaseInteractionDataForPointerId(pointerId)\n    {\n        const interactionData = this.activeInteractionData[pointerId];\n\n        if (interactionData)\n        {\n            delete this.activeInteractionData[pointerId];\n            interactionData.reset();\n            this.interactionDataPool.push(interactionData);\n        }\n    }\n\n    /**\n     * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The event to be configured\n     * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent\n     * @param {PIXI.interaction.InteractionData} interactionData - The InteractionData that will be paired\n     *        with the InteractionEvent\n     * @return {PIXI.interaction.InteractionEvent} the interaction event that was passed in\n     */\n    configureInteractionEventForDOMEvent(interactionEvent, pointerEvent, interactionData)\n    {\n        interactionEvent.data = interactionData;\n\n        this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);\n\n        // This is the way InteractionManager processed touch events before the refactoring, so I've kept\n        // it here. But it doesn't make that much sense to me, since mapPositionToPoint already factors\n        // in this.resolution, so this just divides by this.resolution twice for touch events...\n        if (navigator.isCocoonJS && pointerEvent.pointerType === 'touch')\n        {\n            interactionData.global.x = interactionData.global.x / this.resolution;\n            interactionData.global.y = interactionData.global.y / this.resolution;\n        }\n\n        // Not really sure why this is happening, but it's how a previous version handled things\n        if (pointerEvent.pointerType === 'touch')\n        {\n            pointerEvent.globalX = interactionData.global.x;\n            pointerEvent.globalY = interactionData.global.y;\n        }\n\n        interactionData.originalEvent = pointerEvent;\n        interactionEvent.reset();\n\n        return interactionEvent;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     *\n     * @private\n     * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n     * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    normalizeToPointerData(event)\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i];\n\n                if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof window.PointerEvent)))\n        {\n            if (typeof event.isPrimary === 'undefined') event.isPrimary = true;\n            if (typeof event.width === 'undefined') event.width = 1;\n            if (typeof event.height === 'undefined') event.height = 1;\n            if (typeof event.tiltX === 'undefined') event.tiltX = 0;\n            if (typeof event.tiltY === 'undefined') event.tiltY = 0;\n            if (typeof event.pointerType === 'undefined') event.pointerType = 'mouse';\n            if (typeof event.pointerId === 'undefined') event.pointerId = MOUSE_POINTER_ID;\n            if (typeof event.pressure === 'undefined') event.pressure = 0.5;\n            if (typeof event.twist === 'undefined') event.twist = 0;\n            if (typeof event.tangentialPressure === 'undefined') event.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            event.isNormalized = true;\n\n            normalizedEvents.push(event);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents;\n    }\n\n    /**\n     * Destroys the interaction manager\n     *\n     */\n    destroy()\n    {\n        this.removeEvents();\n\n        this.removeAllListeners();\n\n        this.renderer = null;\n\n        this.mouse = null;\n\n        this.eventData = null;\n\n        this.interactionDOMElement = null;\n\n        this.onPointerDown = null;\n        this.processPointerDown = null;\n\n        this.onPointerUp = null;\n        this.processPointerUp = null;\n\n        this.onPointerCancel = null;\n        this.processPointerCancel = null;\n\n        this.onPointerMove = null;\n        this.processPointerMove = null;\n\n        this.onPointerOut = null;\n        this.processPointerOverOut = null;\n\n        this.onPointerOver = null;\n\n        this._tempPoint = null;\n    }\n}\n\ncore.WebGLRenderer.registerPlugin('interaction', InteractionManager);\ncore.CanvasRenderer.registerPlugin('interaction', InteractionManager);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}