{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nconst resolveCompressedTextureUrl = {\n  extension: core.ExtensionType.ResolveParser,\n  test: value => {\n    const temp = value.split(\"?\")[0];\n    const extension = temp.split(\".\").pop();\n    return [\"basis\", \"ktx\", \"dds\"].includes(extension);\n  },\n  parse: value => {\n    const temp = value.split(\"?\")[0];\n    const extension = temp.split(\".\").pop();\n    if (extension === \"ktx\") {\n      const extensions2 = [\".s3tc.ktx\", \".s3tc_sRGB.ktx\", \".etc.ktx\", \".etc1.ktx\", \".pvrt.ktx\", \".atc.ktx\", \".astc.ktx\"];\n      if (extensions2.some(ext => value.endsWith(ext))) {\n        return {\n          resolution: parseFloat(core.settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n          format: extensions2.find(ext => value.endsWith(ext)),\n          src: value\n        };\n      }\n    }\n    return {\n      resolution: parseFloat(core.settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n      format: value.split(\".\").pop(),\n      src: value\n    };\n  }\n};\ncore.extensions.add(resolveCompressedTextureUrl);\nexports.resolveCompressedTextureUrl = resolveCompressedTextureUrl;","map":{"version":3,"names":["resolveCompressedTextureUrl","extension","core","ExtensionType","ResolveParser","test","value","temp","split","pop","includes","parse","extensions2","some","ext","endsWith","resolution","parseFloat","settings","RETINA_PREFIX","exec","format","find","src","extensions","add"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/compressed-textures/src/loaders/resolveCompressedTextureUrl.ts"],"sourcesContent":["import { extensions, ExtensionType, settings } from '@pixi/core';\n\nimport type { ResolveAsset, ResolveURLParser } from '@pixi/assets';\n\nexport const resolveCompressedTextureUrl = {\n    extension: ExtensionType.ResolveParser,\n    test: (value: string) =>\n    {\n        const temp = value.split('?')[0];\n        const extension = temp.split('.').pop();\n\n        return ['basis', 'ktx', 'dds'].includes(extension);\n    },\n    parse: (value: string): ResolveAsset =>\n    {\n        const temp = value.split('?')[0];\n        const extension = temp.split('.').pop();\n\n        if (extension === 'ktx')\n        {\n            const extensions = [\n                '.s3tc.ktx',\n                '.s3tc_sRGB.ktx',\n                '.etc.ktx',\n                '.etc1.ktx',\n                '.pvrt.ktx',\n                '.atc.ktx',\n                '.astc.ktx'\n            ];\n\n            // check if value ends with one of the extensions\n            if (extensions.some((ext) => value.endsWith(ext)))\n            {\n                return {\n                    resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                    format: extensions.find((ext) => value.endsWith(ext)),\n                    src: value,\n                };\n            }\n        }\n\n        return {\n            resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n            format: value.split('.').pop(),\n            src: value,\n        };\n    },\n} as ResolveURLParser;\n\nextensions.add(resolveCompressedTextureUrl);\n"],"mappings":";;;;;;AAIO,MAAMA,2BAA8B;EACvCC,SAAA,EAAWC,IAAA,CAAAC,aAAc,CAAAC,aAAA;EACzBC,IAAA,EAAOC,KACP;IACI,MAAMC,IAAO,GAAAD,KAAA,CAAME,KAAM,IAAG,CAAE;IAC9B,MAAMP,SAAY,GAAAM,IAAA,CAAKC,KAAM,IAAG,EAAEC,GAAI;IAEtC,OAAO,CAAC,OAAS,SAAO,KAAK,EAAEC,QAAA,CAAST,SAAS;EAAA,CACrD;EACAU,KAAA,EAAQL,KACR;IACI,MAAMC,IAAO,GAAAD,KAAA,CAAME,KAAM,IAAG,CAAE;IAC9B,MAAMP,SAAY,GAAAM,IAAA,CAAKC,KAAM,IAAG,EAAEC,GAAI;IAEtC,IAAIR,SAAA,KAAc,KAClB;MACI,MAAMW,WAAa,IACf,aACA,kBACA,YACA,aACA,aACA,YACA,YACJ;MAGI,IAAAA,WAAA,CAAWC,IAAA,CAAMC,GAAA,IAAQR,KAAA,CAAMS,QAAS,CAAAD,GAAG,CAAC,CAChD;QACW;UACHE,UAAA,EAAYC,UAAA,CAAWf,IAAA,CAAAgB,QAAS,CAAAC,aAAA,CAAcC,IAAA,CAAKd,KAAK,IAAI,MAAM,GAAG;UACrEe,MAAA,EAAQT,WAAA,CAAWU,IAAK,CAACR,GAAA,IAAQR,KAAM,CAAAS,QAAA,CAASD,GAAG,CAAC;UACpDS,GAAK,EAAAjB;QAAA,CACT;MAAA;IACJ;IAGG;MACHU,UAAA,EAAYC,UAAA,CAAWf,IAAA,CAAAgB,QAAS,CAAAC,aAAA,CAAcC,IAAA,CAAKd,KAAK,IAAI,MAAM,GAAG;MACrEe,MAAQ,EAAAf,KAAA,CAAME,KAAM,IAAG,EAAEC,GAAI;MAC7Bc,GAAK,EAAAjB;IAAA,CACT;EAAA;AAER;AAEAJ,IAAA,CAAAsB,UAAA,CAAWC,GAAA,CAAIzB,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}