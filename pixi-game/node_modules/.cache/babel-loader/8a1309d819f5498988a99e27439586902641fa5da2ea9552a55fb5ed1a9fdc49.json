{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _pixiGlCore = require('pixi-gl-core');\nvar _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);\nvar _createIndicesForQuads = require('../../../utils/createIndicesForQuads');\nvar _createIndicesForQuads2 = _interopRequireDefault(_createIndicesForQuads);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Helper class to create a quad\n *\n * @class\n * @memberof PIXI\n */\nvar Quad = function () {\n  /**\n   * @param {WebGLRenderingContext} gl - The gl context for this quad to use.\n   * @param {object} state - TODO: Description\n   */\n  function Quad(gl, state) {\n    _classCallCheck(this, Quad);\n\n    /**\n     * the current WebGL drawing context\n     *\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    /**\n     * An array of vertices\n     *\n     * @member {Float32Array}\n     */\n    this.vertices = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]);\n\n    /**\n     * The Uvs of the quad\n     *\n     * @member {Float32Array}\n     */\n    this.uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    this.interleaved = new Float32Array(8 * 2);\n    for (var i = 0; i < 4; i++) {\n      this.interleaved[i * 4] = this.vertices[i * 2];\n      this.interleaved[i * 4 + 1] = this.vertices[i * 2 + 1];\n      this.interleaved[i * 4 + 2] = this.uvs[i * 2];\n      this.interleaved[i * 4 + 3] = this.uvs[i * 2 + 1];\n    }\n\n    /**\n     * An array containing the indices of the vertices\n     *\n     * @member {Uint16Array}\n     */\n    this.indices = (0, _createIndicesForQuads2.default)(1);\n\n    /**\n     * The vertex buffer\n     *\n     * @member {glCore.GLBuffer}\n     */\n    this.vertexBuffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, this.interleaved, gl.STATIC_DRAW);\n\n    /**\n     * The index buffer\n     *\n     * @member {glCore.GLBuffer}\n     */\n    this.indexBuffer = _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n    /**\n     * The vertex array object\n     *\n     * @member {glCore.VertexArrayObject}\n     */\n    this.vao = new _pixiGlCore2.default.VertexArrayObject(gl, state);\n  }\n\n  /**\n   * Initialises the vaos and uses the shader.\n   *\n   * @param {PIXI.Shader} shader - the shader to use\n   */\n\n  Quad.prototype.initVao = function initVao(shader) {\n    this.vao.clear().addIndex(this.indexBuffer).addAttribute(this.vertexBuffer, shader.attributes.aVertexPosition, this.gl.FLOAT, false, 4 * 4, 0).addAttribute(this.vertexBuffer, shader.attributes.aTextureCoord, this.gl.FLOAT, false, 4 * 4, 2 * 4);\n  };\n\n  /**\n   * Maps two Rectangle to the quad.\n   *\n   * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle\n   * @param {PIXI.Rectangle} destinationFrame - the second rectangle\n   * @return {PIXI.Quad} Returns itself.\n   */\n\n  Quad.prototype.map = function map(targetTextureFrame, destinationFrame) {\n    var x = 0; // destinationFrame.x / targetTextureFrame.width;\n    var y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n    this.uvs[0] = x;\n    this.uvs[1] = y;\n    this.uvs[2] = x + destinationFrame.width / targetTextureFrame.width;\n    this.uvs[3] = y;\n    this.uvs[4] = x + destinationFrame.width / targetTextureFrame.width;\n    this.uvs[5] = y + destinationFrame.height / targetTextureFrame.height;\n    this.uvs[6] = x;\n    this.uvs[7] = y + destinationFrame.height / targetTextureFrame.height;\n    x = destinationFrame.x;\n    y = destinationFrame.y;\n    this.vertices[0] = x;\n    this.vertices[1] = y;\n    this.vertices[2] = x + destinationFrame.width;\n    this.vertices[3] = y;\n    this.vertices[4] = x + destinationFrame.width;\n    this.vertices[5] = y + destinationFrame.height;\n    this.vertices[6] = x;\n    this.vertices[7] = y + destinationFrame.height;\n    return this;\n  };\n\n  /**\n   * Binds the buffer and uploads the data\n   *\n   * @return {PIXI.Quad} Returns itself.\n   */\n\n  Quad.prototype.upload = function upload() {\n    for (var i = 0; i < 4; i++) {\n      this.interleaved[i * 4] = this.vertices[i * 2];\n      this.interleaved[i * 4 + 1] = this.vertices[i * 2 + 1];\n      this.interleaved[i * 4 + 2] = this.uvs[i * 2];\n      this.interleaved[i * 4 + 3] = this.uvs[i * 2 + 1];\n    }\n    this.vertexBuffer.upload(this.interleaved);\n    return this;\n  };\n\n  /**\n   * Removes this quad from WebGL\n   */\n\n  Quad.prototype.destroy = function destroy() {\n    var gl = this.gl;\n    gl.deleteBuffer(this.vertexBuffer);\n    gl.deleteBuffer(this.indexBuffer);\n  };\n  return Quad;\n}();\nexports.default = Quad;","map":{"version":3,"names":["_pixiGlCore","require","_createIndicesForQuads","Quad","gl","state","_classCallCheck","vertices","Float32Array","uvs","interleaved","i","indices","_createIndicesForQuads2","default","vertexBuffer","_pixiGlCore2","GLBuffer","createVertexBuffer","STATIC_DRAW","indexBuffer","createIndexBuffer","vao","VertexArrayObject","initVao","shader","clear","addIndex","addAttribute","attributes","aVertexPosition","FLOAT","aTextureCoord","map","targetTextureFrame","destinationFrame","x","y","width","height","upload","destroy","deleteBuffer"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/renderers/webgl/utils/Quad.js"],"sourcesContent":["import glCore from 'pixi-gl-core';\nimport createIndicesForQuads from '../../../utils/createIndicesForQuads';\n\n/**\n * Helper class to create a quad\n *\n * @class\n * @memberof PIXI\n */\nexport default class Quad\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The gl context for this quad to use.\n     * @param {object} state - TODO: Description\n     */\n    constructor(gl, state)\n    {\n        /**\n         * the current WebGL drawing context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        /**\n         * An array of vertices\n         *\n         * @member {Float32Array}\n         */\n        this.vertices = new Float32Array([\n            -1, -1,\n            1, -1,\n            1, 1,\n            -1, 1,\n        ]);\n\n        /**\n         * The Uvs of the quad\n         *\n         * @member {Float32Array}\n         */\n        this.uvs = new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ]);\n\n        this.interleaved = new Float32Array(8 * 2);\n\n        for (let i = 0; i < 4; i++)\n        {\n            this.interleaved[i * 4] = this.vertices[(i * 2)];\n            this.interleaved[(i * 4) + 1] = this.vertices[(i * 2) + 1];\n            this.interleaved[(i * 4) + 2] = this.uvs[i * 2];\n            this.interleaved[(i * 4) + 3] = this.uvs[(i * 2) + 1];\n        }\n\n        /**\n         * An array containing the indices of the vertices\n         *\n         * @member {Uint16Array}\n         */\n        this.indices = createIndicesForQuads(1);\n\n        /**\n         * The vertex buffer\n         *\n         * @member {glCore.GLBuffer}\n         */\n        this.vertexBuffer = glCore.GLBuffer.createVertexBuffer(gl, this.interleaved, gl.STATIC_DRAW);\n\n        /**\n         * The index buffer\n         *\n         * @member {glCore.GLBuffer}\n         */\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n        /**\n         * The vertex array object\n         *\n         * @member {glCore.VertexArrayObject}\n         */\n        this.vao = new glCore.VertexArrayObject(gl, state);\n    }\n\n    /**\n     * Initialises the vaos and uses the shader.\n     *\n     * @param {PIXI.Shader} shader - the shader to use\n     */\n    initVao(shader)\n    {\n        this.vao.clear()\n        .addIndex(this.indexBuffer)\n        .addAttribute(this.vertexBuffer, shader.attributes.aVertexPosition, this.gl.FLOAT, false, 4 * 4, 0)\n        .addAttribute(this.vertexBuffer, shader.attributes.aTextureCoord, this.gl.FLOAT, false, 4 * 4, 2 * 4);\n    }\n\n    /**\n     * Maps two Rectangle to the quad.\n     *\n     * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle\n     * @param {PIXI.Rectangle} destinationFrame - the second rectangle\n     * @return {PIXI.Quad} Returns itself.\n     */\n    map(targetTextureFrame, destinationFrame)\n    {\n        let x = 0; // destinationFrame.x / targetTextureFrame.width;\n        let y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n        this.uvs[0] = x;\n        this.uvs[1] = y;\n\n        this.uvs[2] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[3] = y;\n\n        this.uvs[4] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[5] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        this.uvs[6] = x;\n        this.uvs[7] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        x = destinationFrame.x;\n        y = destinationFrame.y;\n\n        this.vertices[0] = x;\n        this.vertices[1] = y;\n\n        this.vertices[2] = x + destinationFrame.width;\n        this.vertices[3] = y;\n\n        this.vertices[4] = x + destinationFrame.width;\n        this.vertices[5] = y + destinationFrame.height;\n\n        this.vertices[6] = x;\n        this.vertices[7] = y + destinationFrame.height;\n\n        return this;\n    }\n\n    /**\n     * Binds the buffer and uploads the data\n     *\n     * @return {PIXI.Quad} Returns itself.\n     */\n    upload()\n    {\n        for (let i = 0; i < 4; i++)\n        {\n            this.interleaved[i * 4] = this.vertices[(i * 2)];\n            this.interleaved[(i * 4) + 1] = this.vertices[(i * 2) + 1];\n            this.interleaved[(i * 4) + 2] = this.uvs[i * 2];\n            this.interleaved[(i * 4) + 3] = this.uvs[(i * 2) + 1];\n        }\n\n        this.vertexBuffer.upload(this.interleaved);\n\n        return this;\n    }\n\n    /**\n     * Removes this quad from WebGL\n     */\n    destroy()\n    {\n        const gl = this.gl;\n\n        gl.deleteBuffer(this.vertexBuffer);\n        gl.deleteBuffer(this.indexBuffer);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}