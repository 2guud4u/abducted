{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}(); // disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nvar _const = require('../const');\nvar _utils = require('../utils');\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar defaultStyle = {\n  align: 'left',\n  breakWords: false,\n  dropShadow: false,\n  dropShadowAlpha: 1,\n  dropShadowAngle: Math.PI / 6,\n  dropShadowBlur: 0,\n  dropShadowColor: 'black',\n  dropShadowDistance: 5,\n  fill: 'black',\n  fillGradientType: _const.TEXT_GRADIENT.LINEAR_VERTICAL,\n  fillGradientStops: [],\n  fontFamily: 'Arial',\n  fontSize: 26,\n  fontStyle: 'normal',\n  fontVariant: 'normal',\n  fontWeight: 'normal',\n  letterSpacing: 0,\n  lineHeight: 0,\n  lineJoin: 'miter',\n  miterLimit: 10,\n  padding: 0,\n  stroke: 'black',\n  strokeThickness: 0,\n  textBaseline: 'alphabetic',\n  trim: false,\n  whiteSpace: 'pre',\n  wordWrap: false,\n  wordWrapWidth: 100,\n  leading: 0\n};\nvar genericFontFamilies = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui'];\n\n/**\n * A TextStyle Object decorates a Text Object. It can be shared between\n * multiple Text objects. Changing the style will update all text objects using it.\n * It can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * @class\n * @memberof PIXI\n */\n\nvar TextStyle = function () {\n  /**\n   * @param {object} [style] - The style parameters\n   * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n   *  does not affect single line text\n   * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n   *  needs wordWrap to be set to true\n   * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n   * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n   * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n   * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n   * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n   * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n   * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n   *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n   *  eg ['#000000','#FFFFFF']\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n   * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n   *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n   * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n   * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n   * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n   * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n   *  equivalents are '26px','20pt','160%' or '1.6em')\n   * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n   * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n   * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n   *  '200', '300', '400', '500', '600', '700', 800' or '900')\n   * @param {number} [style.leading=0] - The space between lines\n   * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n   * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n   * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n   *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n   *      (creates a squared corner).\n   * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n   *      or increase the spikiness of rendered text.\n   * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n   *     happening by adding padding to all sides of the text.\n   * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n   *  e.g 'blue', '#FCFF00'\n   * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n   *  Default is 0 (no stroke)\n   * @param {boolean} [style.trim=false] - Trim transparent borders\n   * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n   * @param {boolean} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n   *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n   * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n   * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n   */\n  function TextStyle(style) {\n    _classCallCheck(this, TextStyle);\n    this.styleID = 0;\n    this.reset();\n    deepCopyProperties(this, style, style);\n  }\n\n  /**\n   * Creates a new TextStyle object with the same values as this one.\n   * Note that the only the properties of the object are cloned.\n   *\n   * @return {PIXI.TextStyle} New cloned TextStyle object\n   */\n\n  TextStyle.prototype.clone = function clone() {\n    var clonedProperties = {};\n    deepCopyProperties(clonedProperties, this, defaultStyle);\n    return new TextStyle(clonedProperties);\n  };\n\n  /**\n   * Resets all properties to the defaults specified in TextStyle.prototype._default\n   */\n\n  TextStyle.prototype.reset = function reset() {\n    deepCopyProperties(this, defaultStyle, defaultStyle);\n  };\n\n  /**\n   * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n   *\n   * @member {string}\n   */\n\n  /**\n   * Generates a font style string to use for `TextMetrics.measureFont()`.\n   *\n   * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n   */\n  TextStyle.prototype.toFontString = function toFontString() {\n    // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n    var fontSizeString = typeof this.fontSize === 'number' ? this.fontSize + 'px' : this.fontSize;\n\n    // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n    var fontFamilies = this.fontFamily;\n    if (!Array.isArray(this.fontFamily)) {\n      fontFamilies = this.fontFamily.split(',');\n    }\n    for (var i = fontFamilies.length - 1; i >= 0; i--) {\n      // Trim any extra white-space\n      var fontFamily = fontFamilies[i].trim();\n\n      // Check if font is already escaped in quotes except for CSS generic fonts\n      if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0) {\n        fontFamily = '\"' + fontFamily + '\"';\n      }\n      fontFamilies[i] = fontFamily;\n    }\n    return this.fontStyle + ' ' + this.fontVariant + ' ' + this.fontWeight + ' ' + fontSizeString + ' ' + fontFamilies.join(',');\n  };\n  _createClass(TextStyle, [{\n    key: 'align',\n    get: function get() {\n      return this._align;\n    },\n    set: function set(align)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._align !== align) {\n        this._align = align;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n     *\n     * @member {boolean}\n     */\n  }, {\n    key: 'breakWords',\n    get: function get() {\n      return this._breakWords;\n    },\n    set: function set(breakWords)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._breakWords !== breakWords) {\n        this._breakWords = breakWords;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * Set a drop shadow for the text\n     *\n     * @member {boolean}\n     */\n  }, {\n    key: 'dropShadow',\n    get: function get() {\n      return this._dropShadow;\n    },\n    set: function set(dropShadow)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._dropShadow !== dropShadow) {\n        this._dropShadow = dropShadow;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * Set alpha for the drop shadow\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'dropShadowAlpha',\n    get: function get() {\n      return this._dropShadowAlpha;\n    },\n    set: function set(dropShadowAlpha)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._dropShadowAlpha !== dropShadowAlpha) {\n        this._dropShadowAlpha = dropShadowAlpha;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * Set a angle of the drop shadow\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'dropShadowAngle',\n    get: function get() {\n      return this._dropShadowAngle;\n    },\n    set: function set(dropShadowAngle)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._dropShadowAngle !== dropShadowAngle) {\n        this._dropShadowAngle = dropShadowAngle;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * Set a shadow blur radius\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'dropShadowBlur',\n    get: function get() {\n      return this._dropShadowBlur;\n    },\n    set: function set(dropShadowBlur)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._dropShadowBlur !== dropShadowBlur) {\n        this._dropShadowBlur = dropShadowBlur;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     *\n     * @member {string|number}\n     */\n  }, {\n    key: 'dropShadowColor',\n    get: function get() {\n      return this._dropShadowColor;\n    },\n    set: function set(dropShadowColor)\n    // eslint-disable-line require-jsdoc\n    {\n      var outputColor = getColor(dropShadowColor);\n      if (this._dropShadowColor !== outputColor) {\n        this._dropShadowColor = outputColor;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * Set a distance of the drop shadow\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'dropShadowDistance',\n    get: function get() {\n      return this._dropShadowDistance;\n    },\n    set: function set(dropShadowDistance)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._dropShadowDistance !== dropShadowDistance) {\n        this._dropShadowDistance = dropShadowDistance;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n  }, {\n    key: 'fill',\n    get: function get() {\n      return this._fill;\n    },\n    set: function set(fill)\n    // eslint-disable-line require-jsdoc\n    {\n      var outputColor = getColor(fill);\n      if (this._fill !== outputColor) {\n        this._fill = outputColor;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     * See {@link PIXI.TEXT_GRADIENT}\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'fillGradientType',\n    get: function get() {\n      return this._fillGradientType;\n    },\n    set: function set(fillGradientType)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._fillGradientType !== fillGradientType) {\n        this._fillGradientType = fillGradientType;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     *\n     * @member {number[]}\n     */\n  }, {\n    key: 'fillGradientStops',\n    get: function get() {\n      return this._fillGradientStops;\n    },\n    set: function set(fillGradientStops)\n    // eslint-disable-line require-jsdoc\n    {\n      if (!areArraysEqual(this._fillGradientStops, fillGradientStops)) {\n        this._fillGradientStops = fillGradientStops;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The font family\n     *\n     * @member {string|string[]}\n     */\n  }, {\n    key: 'fontFamily',\n    get: function get() {\n      return this._fontFamily;\n    },\n    set: function set(fontFamily)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this.fontFamily !== fontFamily) {\n        this._fontFamily = fontFamily;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     *\n     * @member {number|string}\n     */\n  }, {\n    key: 'fontSize',\n    get: function get() {\n      return this._fontSize;\n    },\n    set: function set(fontSize)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._fontSize !== fontSize) {\n        this._fontSize = fontSize;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n  }, {\n    key: 'fontStyle',\n    get: function get() {\n      return this._fontStyle;\n    },\n    set: function set(fontStyle)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._fontStyle !== fontStyle) {\n        this._fontStyle = fontStyle;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n  }, {\n    key: 'fontVariant',\n    get: function get() {\n      return this._fontVariant;\n    },\n    set: function set(fontVariant)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._fontVariant !== fontVariant) {\n        this._fontVariant = fontVariant;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n  }, {\n    key: 'fontWeight',\n    get: function get() {\n      return this._fontWeight;\n    },\n    set: function set(fontWeight)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._fontWeight !== fontWeight) {\n        this._fontWeight = fontWeight;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The amount of spacing between letters, default is 0\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'letterSpacing',\n    get: function get() {\n      return this._letterSpacing;\n    },\n    set: function set(letterSpacing)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._letterSpacing !== letterSpacing) {\n        this._letterSpacing = letterSpacing;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The line height, a number that represents the vertical space that a letter uses\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'lineHeight',\n    get: function get() {\n      return this._lineHeight;\n    },\n    set: function set(lineHeight)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._lineHeight !== lineHeight) {\n        this._lineHeight = lineHeight;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The space between lines\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'leading',\n    get: function get() {\n      return this._leading;\n    },\n    set: function set(leading)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._leading !== leading) {\n        this._leading = leading;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n  }, {\n    key: 'lineJoin',\n    get: function get() {\n      return this._lineJoin;\n    },\n    set: function set(lineJoin)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._lineJoin !== lineJoin) {\n        this._lineJoin = lineJoin;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode\n     * This can reduce or increase the spikiness of rendered text.\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'miterLimit',\n    get: function get() {\n      return this._miterLimit;\n    },\n    set: function set(miterLimit)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._miterLimit !== miterLimit) {\n        this._miterLimit = miterLimit;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'padding',\n    get: function get() {\n      return this._padding;\n    },\n    set: function set(padding)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._padding !== padding) {\n        this._padding = padding;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     *\n     * @member {string|number}\n     */\n  }, {\n    key: 'stroke',\n    get: function get() {\n      return this._stroke;\n    },\n    set: function set(stroke)\n    // eslint-disable-line require-jsdoc\n    {\n      var outputColor = getColor(stroke);\n      if (this._stroke !== outputColor) {\n        this._stroke = outputColor;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     * Default is 0 (no stroke)\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'strokeThickness',\n    get: function get() {\n      return this._strokeThickness;\n    },\n    set: function set(strokeThickness)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._strokeThickness !== strokeThickness) {\n        this._strokeThickness = strokeThickness;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n  }, {\n    key: 'textBaseline',\n    get: function get() {\n      return this._textBaseline;\n    },\n    set: function set(textBaseline)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._textBaseline !== textBaseline) {\n        this._textBaseline = textBaseline;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * Trim transparent borders\n     *\n     * @member {boolean}\n     */\n  }, {\n    key: 'trim',\n    get: function get() {\n      return this._trim;\n    },\n    set: function set(trim)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._trim !== trim) {\n        this._trim = trim;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n  }, {\n    key: 'whiteSpace',\n    get: function get() {\n      return this._whiteSpace;\n    },\n    set: function set(whiteSpace)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._whiteSpace !== whiteSpace) {\n        this._whiteSpace = whiteSpace;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * Indicates if word wrap should be used\n     *\n     * @member {boolean}\n     */\n  }, {\n    key: 'wordWrap',\n    get: function get() {\n      return this._wordWrap;\n    },\n    set: function set(wordWrap)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._wordWrap !== wordWrap) {\n        this._wordWrap = wordWrap;\n        this.styleID++;\n      }\n    }\n\n    /**\n     * The width at which text will wrap, it needs wordWrap to be set to true\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'wordWrapWidth',\n    get: function get() {\n      return this._wordWrapWidth;\n    },\n    set: function set(wordWrapWidth)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._wordWrapWidth !== wordWrapWidth) {\n        this._wordWrapWidth = wordWrapWidth;\n        this.styleID++;\n      }\n    }\n  }]);\n  return TextStyle;\n}();\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\n\nexports.default = TextStyle;\nfunction getSingleColor(color) {\n  if (typeof color === 'number') {\n    return (0, _utils.hex2string)(color);\n  } else if (typeof color === 'string') {\n    if (color.indexOf('0x') === 0) {\n      color = color.replace('0x', '#');\n    }\n  }\n  return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getColor(color) {\n  if (!Array.isArray(color)) {\n    return getSingleColor(color);\n  } else {\n    for (var i = 0; i < color.length; ++i) {\n      color[i] = getSingleColor(color[i]);\n    }\n    return color;\n  }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {Array} array1 First array to compare\n * @param {Array} array2 Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual(array1, array2) {\n  if (!Array.isArray(array1) || !Array.isArray(array2)) {\n    return false;\n  }\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  for (var i = 0; i < array1.length; ++i) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param {Object} target Target object to copy properties into\n * @param {Object} source Source object for the proporties to copy\n * @param {string} propertyObj Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target, source, propertyObj) {\n  for (var prop in propertyObj) {\n    if (Array.isArray(source[prop])) {\n      target[prop] = source[prop].slice();\n    } else {\n      target[prop] = source[prop];\n    }\n  }\n}","map":{"version":3,"names":["_const","require","_utils","defaultStyle","align","breakWords","dropShadow","dropShadowAlpha","dropShadowAngle","Math","PI","dropShadowBlur","dropShadowColor","dropShadowDistance","fill","fillGradientType","TEXT_GRADIENT","LINEAR_VERTICAL","fillGradientStops","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","lineJoin","miterLimit","padding","stroke","strokeThickness","textBaseline","trim","whiteSpace","wordWrap","wordWrapWidth","leading","genericFontFamilies","TextStyle","style","_classCallCheck","styleID","reset","deepCopyProperties","clone","clonedProperties","toFontString","fontSizeString","fontFamilies","Array","isArray","split","i","length","test","indexOf","join","_align","_breakWords","_dropShadow","_dropShadowAlpha","_dropShadowAngle","_dropShadowBlur","_dropShadowColor","outputColor","getColor","_dropShadowDistance","_fill","_fillGradientType","_fillGradientStops","areArraysEqual","_fontFamily","_fontSize","_fontStyle","_fontVariant","_fontWeight","_letterSpacing","_lineHeight","_leading","_lineJoin","_miterLimit","_padding","_stroke","_strokeThickness","_textBaseline","_trim","_whiteSpace","_wordWrap","_wordWrapWidth","getSingleColor","color","hex2string","replace","array1","array2","target","source","propertyObj","prop","slice"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/text/TextStyle.js"],"sourcesContent":["// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from '../const';\nimport { hex2string } from '../utils';\n\nconst defaultStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n]\n\n/**\n * A TextStyle Object decorates a Text Object. It can be shared between\n * multiple Text objects. Changing the style will update all text objects using it.\n * It can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * @class\n * @memberof PIXI\n */\nexport default class TextStyle\n{\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', 800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {boolean} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return {PIXI.TextStyle} New cloned TextStyle object\n     */\n    clone()\n    {\n        const clonedProperties = {};\n\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /**\n     * Resets all properties to the defaults specified in TextStyle.prototype._default\n     */\n    reset()\n    {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align()\n    {\n        return this._align;\n    }\n    set align(align) // eslint-disable-line require-jsdoc\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n     *\n     * @member {boolean}\n     */\n    get breakWords()\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords) // eslint-disable-line require-jsdoc\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a drop shadow for the text\n     *\n     * @member {boolean}\n     */\n    get dropShadow()\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set alpha for the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAlpha()\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a angle of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAngle()\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a shadow blur radius\n     *\n     * @member {number}\n     */\n    get dropShadowBlur()\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     *\n     * @member {string|number}\n     */\n    get dropShadowColor()\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a distance of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowDistance()\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill()\n    {\n        return this._fill;\n    }\n    set fill(fill) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(fill);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     * See {@link PIXI.TEXT_GRADIENT}\n     *\n     * @member {number}\n     */\n    get fillGradientType()\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType) // eslint-disable-line require-jsdoc\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     *\n     * @member {number[]}\n     */\n    get fillGradientStops()\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops) // eslint-disable-line require-jsdoc\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font family\n     *\n     * @member {string|string[]}\n     */\n    get fontFamily()\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily) // eslint-disable-line require-jsdoc\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     *\n     * @member {number|string}\n     */\n    get fontSize()\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle()\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant()\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight()\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The amount of spacing between letters, default is 0\n     *\n     * @member {number}\n     */\n    get letterSpacing()\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing) // eslint-disable-line require-jsdoc\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The line height, a number that represents the vertical space that a letter uses\n     *\n     * @member {number}\n     */\n    get lineHeight()\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The space between lines\n     *\n     * @member {number}\n     */\n    get leading()\n    {\n        return this._leading;\n    }\n    set leading(leading) // eslint-disable-line require-jsdoc\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin()\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode\n     * This can reduce or increase the spikiness of rendered text.\n     *\n     * @member {number}\n     */\n    get miterLimit()\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit) // eslint-disable-line require-jsdoc\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     *\n     * @member {number}\n     */\n    get padding()\n    {\n        return this._padding;\n    }\n    set padding(padding) // eslint-disable-line require-jsdoc\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     *\n     * @member {string|number}\n     */\n    get stroke()\n    {\n        return this._stroke;\n    }\n    set stroke(stroke) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     * Default is 0 (no stroke)\n     *\n     * @member {number}\n     */\n    get strokeThickness()\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness) // eslint-disable-line require-jsdoc\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline()\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline) // eslint-disable-line require-jsdoc\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Trim transparent borders\n     *\n     * @member {boolean}\n     */\n    get trim()\n    {\n        return this._trim;\n    }\n    set trim(trim) // eslint-disable-line require-jsdoc\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace()\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace) // eslint-disable-line require-jsdoc\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if word wrap should be used\n     *\n     * @member {boolean}\n     */\n    get wordWrap()\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The width at which text will wrap, it needs wordWrap to be set to true\n     *\n     * @member {number}\n     */\n    get wordWrapWidth()\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    toFontString()\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font is already escaped in quotes except for CSS generic fonts\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0)\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            fontFamilies[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${fontFamilies.join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getSingleColor(color)\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if ( typeof color === 'string' )\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getColor(color)\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {Array} array1 First array to compare\n * @param {Array} array2 Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual(array1, array2)\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param {Object} target Target object to copy properties into\n * @param {Object} source Source object for the proporties to copy\n * @param {string} propertyObj Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target, source, propertyObj) {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;KAAA;AACA;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;;;;;;AAEA,IAAME,YAAA,GAAe;EACjBC,KAAA,EAAO,MADU;EAEjBC,UAAA,EAAY,KAFK;EAGjBC,UAAA,EAAY,KAHK;EAIjBC,eAAA,EAAiB,CAJA;EAKjBC,eAAA,EAAiBC,IAAA,CAAKC,EAAL,GAAU,CALV;EAMjBC,cAAA,EAAgB,CANC;EAOjBC,eAAA,EAAiB,OAPA;EAQjBC,kBAAA,EAAoB,CARH;EASjBC,IAAA,EAAM,OATW;EAUjBC,gBAAA,EAAkBf,MAAA,CAAAgB,aAAA,CAAcC,eAVf;EAWjBC,iBAAA,EAAmB,EAXF;EAYjBC,UAAA,EAAY,OAZK;EAajBC,QAAA,EAAU,EAbO;EAcjBC,SAAA,EAAW,QAdM;EAejBC,WAAA,EAAa,QAfI;EAgBjBC,UAAA,EAAY,QAhBK;EAiBjBC,aAAA,EAAe,CAjBE;EAkBjBC,UAAA,EAAY,CAlBK;EAmBjBC,QAAA,EAAU,OAnBO;EAoBjBC,UAAA,EAAY,EApBK;EAqBjBC,OAAA,EAAS,CArBQ;EAsBjBC,MAAA,EAAQ,OAtBS;EAuBjBC,eAAA,EAAiB,CAvBA;EAwBjBC,YAAA,EAAc,YAxBG;EAyBjBC,IAAA,EAAM,KAzBW;EA0BjBC,UAAA,EAAY,KA1BK;EA2BjBC,QAAA,EAAU,KA3BO;EA4BjBC,aAAA,EAAe,GA5BE;EA6BjBC,OAAA,EAAS;AA7BQ,CAArB;AAgCA,IAAMC,mBAAA,GAAsB,CACxB,OADwB,EAExB,YAFwB,EAGxB,WAHwB,EAIxB,SAJwB,EAKxB,SALwB,EAMxB,WANwB,CAA5B;;AASA;;;;;;;;;IAQqBC,S;EAEjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgDA,SAAAA,UAAYC,KAAZ,EACA;IAAAC,eAAA,OAAAF,SAAA;IACI,KAAKG,OAAL,GAAe,CAAf;IAEA,KAAKC,KAAL;IAEAC,kBAAA,CAAmB,IAAnB,EAAyBJ,KAAzB,EAAgCA,KAAhC;EACH;;EAED;;;;;;;sBAMAK,K,oBACA;IACI,IAAMC,gBAAA,GAAmB,EAAzB;IAEAF,kBAAA,CAAmBE,gBAAnB,EAAqC,IAArC,EAA2C1C,YAA3C;IAEA,OAAO,IAAImC,SAAJ,CAAcO,gBAAd,CAAP;EACH,C;;EAED;;;;sBAGAH,K,oBACA;IACIC,kBAAA,CAAmB,IAAnB,EAAyBxC,YAAzB,EAAuCA,YAAvC;EACH,C;;EAED;;;;;;EAiiBA;;;;;sBAKA2C,Y,2BACA;IACI;IACA,IAAMC,cAAA,GAAkB,OAAO,KAAK3B,QAAZ,KAAyB,QAA1B,GAAyC,KAAKA,QAA9C,UAA6D,KAAKA,QAAzF;;IAEA;IACA;IACA,IAAI4B,YAAA,GAAe,KAAK7B,UAAxB;IAEA,IAAI,CAAC8B,KAAA,CAAMC,OAAN,CAAc,KAAK/B,UAAnB,CAAL,EACA;MACI6B,YAAA,GAAe,KAAK7B,UAAL,CAAgBgC,KAAhB,CAAsB,GAAtB,CAAf;IACH;IAED,KAAK,IAAIC,CAAA,GAAIJ,YAAA,CAAaK,MAAb,GAAsB,CAAnC,EAAsCD,CAAA,IAAK,CAA3C,EAA8CA,CAAA,EAA9C,EACA;MACI;MACA,IAAIjC,UAAA,GAAa6B,YAAA,CAAaI,CAAb,EAAgBpB,IAAhB,EAAjB;;MAEA;MACA,IAAI,CAAE,oBAAD,CAAuBsB,IAAvB,CAA4BnC,UAA5B,CAAD,IAA4CkB,mBAAA,CAAoBkB,OAApB,CAA4BpC,UAA5B,IAA0C,CAA1F,EACA;QACIA,UAAA,SAAiBA,UAAjB;MACH;MACD6B,YAAA,CAAaI,CAAb,IAAkBjC,UAAlB;IACH;IAED,OAAU,KAAKE,SAAf,SAA4B,KAAKC,WAAjC,SAAgD,KAAKC,UAArD,SAAmEwB,cAAnE,SAAqFC,YAAA,CAAaQ,IAAb,CAAkB,GAAlB,CAArF;EACH,C;;;wBA5jBD;MACI,OAAO,KAAKC,MAAZ;IACH,C;sBACSrD,K;IAAO;IACjB;MACI,IAAI,KAAKqD,MAAL,KAAgBrD,KAApB,EACA;QACI,KAAKqD,MAAL,GAAcrD,KAAd;QACA,KAAKqC,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKiB,WAAZ;IACH,C;sBACcrD,U;IAAY;IAC3B;MACI,IAAI,KAAKqD,WAAL,KAAqBrD,UAAzB,EACA;QACI,KAAKqD,WAAL,GAAmBrD,UAAnB;QACA,KAAKoC,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKkB,WAAZ;IACH,C;sBACcrD,U;IAAY;IAC3B;MACI,IAAI,KAAKqD,WAAL,KAAqBrD,UAAzB,EACA;QACI,KAAKqD,WAAL,GAAmBrD,UAAnB;QACA,KAAKmC,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKmB,gBAAZ;IACH,C;sBACmBrD,e;IAAiB;IACrC;MACI,IAAI,KAAKqD,gBAAL,KAA0BrD,eAA9B,EACA;QACI,KAAKqD,gBAAL,GAAwBrD,eAAxB;QACA,KAAKkC,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKoB,gBAAZ;IACH,C;sBACmBrD,e;IAAiB;IACrC;MACI,IAAI,KAAKqD,gBAAL,KAA0BrD,eAA9B,EACA;QACI,KAAKqD,gBAAL,GAAwBrD,eAAxB;QACA,KAAKiC,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKqB,eAAZ;IACH,C;sBACkBnD,c;IAAgB;IACnC;MACI,IAAI,KAAKmD,eAAL,KAAyBnD,cAA7B,EACA;QACI,KAAKmD,eAAL,GAAuBnD,cAAvB;QACA,KAAK8B,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKsB,gBAAZ;IACH,C;sBACmBnD,e;IAAiB;IACrC;MACI,IAAMoD,WAAA,GAAcC,QAAA,CAASrD,eAAT,CAApB;MACA,IAAI,KAAKmD,gBAAL,KAA0BC,WAA9B,EACA;QACI,KAAKD,gBAAL,GAAwBC,WAAxB;QACA,KAAKvB,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKyB,mBAAZ;IACH,C;sBACsBrD,kB;IAAoB;IAC3C;MACI,IAAI,KAAKqD,mBAAL,KAA6BrD,kBAAjC,EACA;QACI,KAAKqD,mBAAL,GAA2BrD,kBAA3B;QACA,KAAK4B,OAAL;MACH;IACJ;;IAED;;;;;;;;;wBAQA;MACI,OAAO,KAAK0B,KAAZ;IACH,C;sBACQrD,I;IAAM;IACf;MACI,IAAMkD,WAAA,GAAcC,QAAA,CAASnD,IAAT,CAApB;MACA,IAAI,KAAKqD,KAAL,KAAeH,WAAnB,EACA;QACI,KAAKG,KAAL,GAAaH,WAAb;QACA,KAAKvB,OAAL;MACH;IACJ;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAK2B,iBAAZ;IACH,C;sBACoBrD,gB;IAAkB;IACvC;MACI,IAAI,KAAKqD,iBAAL,KAA2BrD,gBAA/B,EACA;QACI,KAAKqD,iBAAL,GAAyBrD,gBAAzB;QACA,KAAK0B,OAAL;MACH;IACJ;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAK4B,kBAAZ;IACH,C;sBACqBnD,iB;IAAmB;IACzC;MACI,IAAI,CAACoD,cAAA,CAAe,KAAKD,kBAApB,EAAuCnD,iBAAvC,CAAL,EACA;QACI,KAAKmD,kBAAL,GAA0BnD,iBAA1B;QACA,KAAKuB,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAK8B,WAAZ;IACH,C;sBACcpD,U;IAAY;IAC3B;MACI,IAAI,KAAKA,UAAL,KAAoBA,UAAxB,EACA;QACI,KAAKoD,WAAL,GAAmBpD,UAAnB;QACA,KAAKsB,OAAL;MACH;IACJ;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAK+B,SAAZ;IACH,C;sBACYpD,Q;IAAU;IACvB;MACI,IAAI,KAAKoD,SAAL,KAAmBpD,QAAvB,EACA;QACI,KAAKoD,SAAL,GAAiBpD,QAAjB;QACA,KAAKqB,OAAL;MACH;IACJ;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAKgC,UAAZ;IACH,C;sBACapD,S;IAAW;IACzB;MACI,IAAI,KAAKoD,UAAL,KAAoBpD,SAAxB,EACA;QACI,KAAKoD,UAAL,GAAkBpD,SAAlB;QACA,KAAKoB,OAAL;MACH;IACJ;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAKiC,YAAZ;IACH,C;sBACepD,W;IAAa;IAC7B;MACI,IAAI,KAAKoD,YAAL,KAAsBpD,WAA1B,EACA;QACI,KAAKoD,YAAL,GAAoBpD,WAApB;QACA,KAAKmB,OAAL;MACH;IACJ;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAKkC,WAAZ;IACH,C;sBACcpD,U;IAAY;IAC3B;MACI,IAAI,KAAKoD,WAAL,KAAqBpD,UAAzB,EACA;QACI,KAAKoD,WAAL,GAAmBpD,UAAnB;QACA,KAAKkB,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKmC,cAAZ;IACH,C;sBACiBpD,a;IAAe;IACjC;MACI,IAAI,KAAKoD,cAAL,KAAwBpD,aAA5B,EACA;QACI,KAAKoD,cAAL,GAAsBpD,aAAtB;QACA,KAAKiB,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKoC,WAAZ;IACH,C;sBACcpD,U;IAAY;IAC3B;MACI,IAAI,KAAKoD,WAAL,KAAqBpD,UAAzB,EACA;QACI,KAAKoD,WAAL,GAAmBpD,UAAnB;QACA,KAAKgB,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKqC,QAAZ;IACH,C;sBACW1C,O;IAAS;IACrB;MACI,IAAI,KAAK0C,QAAL,KAAkB1C,OAAtB,EACA;QACI,KAAK0C,QAAL,GAAgB1C,OAAhB;QACA,KAAKK,OAAL;MACH;IACJ;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAKsC,SAAZ;IACH,C;sBACYrD,Q;IAAU;IACvB;MACI,IAAI,KAAKqD,SAAL,KAAmBrD,QAAvB,EACA;QACI,KAAKqD,SAAL,GAAiBrD,QAAjB;QACA,KAAKe,OAAL;MACH;IACJ;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAKuC,WAAZ;IACH,C;sBACcrD,U;IAAY;IAC3B;MACI,IAAI,KAAKqD,WAAL,KAAqBrD,UAAzB,EACA;QACI,KAAKqD,WAAL,GAAmBrD,UAAnB;QACA,KAAKc,OAAL;MACH;IACJ;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAKwC,QAAZ;IACH,C;sBACWrD,O;IAAS;IACrB;MACI,IAAI,KAAKqD,QAAL,KAAkBrD,OAAtB,EACA;QACI,KAAKqD,QAAL,GAAgBrD,OAAhB;QACA,KAAKa,OAAL;MACH;IACJ;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAKyC,OAAZ;IACH,C;sBACUrD,M;IAAQ;IACnB;MACI,IAAMmC,WAAA,GAAcC,QAAA,CAASpC,MAAT,CAApB;MACA,IAAI,KAAKqD,OAAL,KAAiBlB,WAArB,EACA;QACI,KAAKkB,OAAL,GAAelB,WAAf;QACA,KAAKvB,OAAL;MACH;IACJ;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAK0C,gBAAZ;IACH,C;sBACmBrD,e;IAAiB;IACrC;MACI,IAAI,KAAKqD,gBAAL,KAA0BrD,eAA9B,EACA;QACI,KAAKqD,gBAAL,GAAwBrD,eAAxB;QACA,KAAKW,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAK2C,aAAZ;IACH,C;sBACgBrD,Y;IAAc;IAC/B;MACI,IAAI,KAAKqD,aAAL,KAAuBrD,YAA3B,EACA;QACI,KAAKqD,aAAL,GAAqBrD,YAArB;QACA,KAAKU,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAK4C,KAAZ;IACH,C;sBACQrD,I;IAAM;IACf;MACI,IAAI,KAAKqD,KAAL,KAAerD,IAAnB,EACA;QACI,KAAKqD,KAAL,GAAarD,IAAb;QACA,KAAKS,OAAL;MACH;IACJ;;IAED;;;;;;;;;;;;;;wBAaA;MACI,OAAO,KAAK6C,WAAZ;IACH,C;sBACcrD,U;IAAY;IAC3B;MACI,IAAI,KAAKqD,WAAL,KAAqBrD,UAAzB,EACA;QACI,KAAKqD,WAAL,GAAmBrD,UAAnB;QACA,KAAKQ,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAK8C,SAAZ;IACH,C;sBACYrD,Q;IAAU;IACvB;MACI,IAAI,KAAKqD,SAAL,KAAmBrD,QAAvB,EACA;QACI,KAAKqD,SAAL,GAAiBrD,QAAjB;QACA,KAAKO,OAAL;MACH;IACJ;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAK+C,cAAZ;IACH,C;sBACiBrD,a;IAAe;IACjC;MACI,IAAI,KAAKqD,cAAL,KAAwBrD,aAA5B,EACA;QACI,KAAKqD,cAAL,GAAsBrD,aAAtB;QACA,KAAKM,OAAL;MACH;IACJ;;;;;AAsCL;;;;;;;kBAvpBqBH,S;AA6pBrB,SAASmD,cAATA,CAAwBC,KAAxB,EACA;EACI,IAAI,OAAOA,KAAP,KAAiB,QAArB,EACA;IACI,OAAO,IAAAxF,MAAA,CAAAyF,UAAA,EAAWD,KAAX,CAAP;EACH,CAHD,MAIK,IAAK,OAAOA,KAAP,KAAiB,QAAtB,EACL;IACI,IAAKA,KAAA,CAAMnC,OAAN,CAAc,IAAd,MAAwB,CAA7B,EACA;MACImC,KAAA,GAAQA,KAAA,CAAME,OAAN,CAAc,IAAd,EAAoB,GAApB,CAAR;IACH;EACJ;EAED,OAAOF,KAAP;AACH;;AAED;;;;;;;AAOA,SAASzB,QAATA,CAAkByB,KAAlB,EACA;EACI,IAAI,CAACzC,KAAA,CAAMC,OAAN,CAAcwC,KAAd,CAAL,EACA;IACI,OAAOD,cAAA,CAAeC,KAAf,CAAP;EACH,CAHD,MAKA;IACI,KAAK,IAAItC,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIsC,KAAA,CAAMrC,MAA1B,EAAkC,EAAED,CAApC,EACA;MACIsC,KAAA,CAAMtC,CAAN,IAAWqC,cAAA,CAAeC,KAAA,CAAMtC,CAAN,CAAf,CAAX;IACH;IAED,OAAOsC,KAAP;EACH;AACJ;;AAED;;;;;;;;AAQA,SAASpB,cAATA,CAAwBuB,MAAxB,EAAgCC,MAAhC,EACA;EACI,IAAI,CAAC7C,KAAA,CAAMC,OAAN,CAAc2C,MAAd,CAAD,IAA0B,CAAC5C,KAAA,CAAMC,OAAN,CAAc4C,MAAd,CAA/B,EACA;IACI,OAAO,KAAP;EACH;EAED,IAAID,MAAA,CAAOxC,MAAP,KAAkByC,MAAA,CAAOzC,MAA7B,EACA;IACI,OAAO,KAAP;EACH;EAED,KAAK,IAAID,CAAA,GAAI,CAAb,EAAgBA,CAAA,GAAIyC,MAAA,CAAOxC,MAA3B,EAAmC,EAAED,CAArC,EACA;IACI,IAAIyC,MAAA,CAAOzC,CAAP,MAAc0C,MAAA,CAAO1C,CAAP,CAAlB,EACA;MACI,OAAO,KAAP;IACH;EACJ;EAED,OAAO,IAAP;AACH;;AAED;;;;;;;AAOA,SAAST,kBAATA,CAA4BoD,MAA5B,EAAoCC,MAApC,EAA4CC,WAA5C,EAAyD;EACrD,KAAK,IAAMC,IAAX,IAAmBD,WAAnB,EAAgC;IAC5B,IAAIhD,KAAA,CAAMC,OAAN,CAAc8C,MAAA,CAAOE,IAAP,CAAd,CAAJ,EAAiC;MAC7BH,MAAA,CAAOG,IAAP,IAAeF,MAAA,CAAOE,IAAP,EAAaC,KAAb,EAAf;IACH,CAFD,MAEO;MACHJ,MAAA,CAAOG,IAAP,IAAeF,MAAA,CAAOE,IAAP,CAAf;IACH;EACJ;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}