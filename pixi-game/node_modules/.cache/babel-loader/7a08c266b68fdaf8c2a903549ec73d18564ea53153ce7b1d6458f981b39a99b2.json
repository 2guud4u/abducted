{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar text = require('@pixi/text');\nvar BitmapFontData = require('./BitmapFontData.js');\nvar index = require('./formats/index.js');\nrequire('./utils/index.js');\nvar resolveCharacters = require('./utils/resolveCharacters.js');\nvar drawGlyph = require('./utils/drawGlyph.js');\nvar extractCharCode = require('./utils/extractCharCode.js');\nconst _BitmapFont = class {\n  constructor(data, textures, ownsTextures) {\n    const [info] = data.info;\n    const [common] = data.common;\n    const [page] = data.page;\n    const [distanceField] = data.distanceField;\n    const res = core.utils.getResolutionOfUrl(page.file);\n    const pageTextures = {};\n    this._ownsTextures = ownsTextures;\n    this.font = info.face;\n    this.size = info.size;\n    this.lineHeight = common.lineHeight / res;\n    this.chars = {};\n    this.pageTextures = pageTextures;\n    for (let i = 0; i < data.page.length; i++) {\n      const {\n        id,\n        file\n      } = data.page[i];\n      pageTextures[id] = textures instanceof Array ? textures[i] : textures[file];\n      if (distanceField?.fieldType && distanceField.fieldType !== \"none\") {\n        pageTextures[id].baseTexture.alphaMode = core.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\n        pageTextures[id].baseTexture.mipmap = core.MIPMAP_MODES.OFF;\n      }\n    }\n    for (let i = 0; i < data.char.length; i++) {\n      const {\n        id,\n        page: page2\n      } = data.char[i];\n      let {\n        x,\n        y,\n        width,\n        height,\n        xoffset,\n        yoffset,\n        xadvance\n      } = data.char[i];\n      x /= res;\n      y /= res;\n      width /= res;\n      height /= res;\n      xoffset /= res;\n      yoffset /= res;\n      xadvance /= res;\n      const rect = new core.Rectangle(x + pageTextures[page2].frame.x / res, y + pageTextures[page2].frame.y / res, width, height);\n      this.chars[id] = {\n        xOffset: xoffset,\n        yOffset: yoffset,\n        xAdvance: xadvance,\n        kerning: {},\n        texture: new core.Texture(pageTextures[page2].baseTexture, rect),\n        page: page2\n      };\n    }\n    for (let i = 0; i < data.kerning.length; i++) {\n      let {\n        first,\n        second,\n        amount\n      } = data.kerning[i];\n      first /= res;\n      second /= res;\n      amount /= res;\n      if (this.chars[second]) {\n        this.chars[second].kerning[first] = amount;\n      }\n    }\n    this.distanceFieldRange = distanceField?.distanceRange;\n    this.distanceFieldType = distanceField?.fieldType?.toLowerCase() ?? \"none\";\n  }\n  destroy() {\n    for (const id in this.chars) {\n      this.chars[id].texture.destroy();\n      this.chars[id].texture = null;\n    }\n    for (const id in this.pageTextures) {\n      if (this._ownsTextures) {\n        this.pageTextures[id].destroy(true);\n      }\n      this.pageTextures[id] = null;\n    }\n    this.chars = null;\n    this.pageTextures = null;\n  }\n  static install(data, textures, ownsTextures) {\n    let fontData;\n    if (data instanceof BitmapFontData.BitmapFontData) {\n      fontData = data;\n    } else {\n      const format = index.autoDetectFormat(data);\n      if (!format) {\n        throw new Error(\"Unrecognized data format for font.\");\n      }\n      fontData = format.parse(data);\n    }\n    if (textures instanceof core.Texture) {\n      textures = [textures];\n    }\n    const font = new _BitmapFont(fontData, textures, ownsTextures);\n    _BitmapFont.available[font.font] = font;\n    return font;\n  }\n  static uninstall(name) {\n    const font = _BitmapFont.available[name];\n    if (!font) {\n      throw new Error(`No font found named '${name}'`);\n    }\n    font.destroy();\n    delete _BitmapFont.available[name];\n  }\n  static from(name, textStyle, options) {\n    if (!name) {\n      throw new Error(\"[BitmapFont] Property `name` is required.\");\n    }\n    const {\n      chars,\n      padding,\n      resolution,\n      textureWidth,\n      textureHeight,\n      ...baseOptions\n    } = Object.assign({}, _BitmapFont.defaultOptions, options);\n    const charsList = resolveCharacters.resolveCharacters(chars);\n    const style = textStyle instanceof text.TextStyle ? textStyle : new text.TextStyle(textStyle);\n    const lineWidth = textureWidth;\n    const fontData = new BitmapFontData.BitmapFontData();\n    fontData.info[0] = {\n      face: style.fontFamily,\n      size: style.fontSize\n    };\n    fontData.common[0] = {\n      lineHeight: style.fontSize\n    };\n    let positionX = 0;\n    let positionY = 0;\n    let canvas;\n    let context;\n    let baseTexture;\n    let maxCharHeight = 0;\n    const baseTextures = [];\n    const textures = [];\n    for (let i = 0; i < charsList.length; i++) {\n      if (!canvas) {\n        canvas = core.settings.ADAPTER.createCanvas();\n        canvas.width = textureWidth;\n        canvas.height = textureHeight;\n        context = canvas.getContext(\"2d\");\n        baseTexture = new core.BaseTexture(canvas, {\n          resolution,\n          ...baseOptions\n        });\n        baseTextures.push(baseTexture);\n        textures.push(new core.Texture(baseTexture));\n        fontData.page.push({\n          id: textures.length - 1,\n          file: \"\"\n        });\n      }\n      const character = charsList[i];\n      const metrics = text.TextMetrics.measureText(character, style, false, canvas);\n      const width = metrics.width;\n      const height = Math.ceil(metrics.height);\n      const textureGlyphWidth = Math.ceil((style.fontStyle === \"italic\" ? 2 : 1) * width);\n      if (positionY >= textureHeight - height * resolution) {\n        if (positionY === 0) {\n          throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is too small (fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n        }\n        --i;\n        canvas = null;\n        context = null;\n        baseTexture = null;\n        positionY = 0;\n        positionX = 0;\n        maxCharHeight = 0;\n        continue;\n      }\n      maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n      if (textureGlyphWidth * resolution + positionX >= lineWidth) {\n        if (positionX === 0) {\n          throw new Error(`[BitmapFont] textureWidth ${textureWidth}px is too small (fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n        }\n        --i;\n        positionY += maxCharHeight * resolution;\n        positionY = Math.ceil(positionY);\n        positionX = 0;\n        maxCharHeight = 0;\n        continue;\n      }\n      drawGlyph.drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n      const id = extractCharCode.extractCharCode(metrics.text);\n      fontData.char.push({\n        id,\n        page: textures.length - 1,\n        x: positionX / resolution,\n        y: positionY / resolution,\n        width: textureGlyphWidth,\n        height,\n        xoffset: 0,\n        yoffset: 0,\n        xadvance: width - (style.dropShadow ? style.dropShadowDistance : 0) - (style.stroke ? style.strokeThickness : 0)\n      });\n      positionX += (textureGlyphWidth + 2 * padding) * resolution;\n      positionX = Math.ceil(positionX);\n    }\n    for (let i = 0, len = charsList.length; i < len; i++) {\n      const first = charsList[i];\n      for (let j = 0; j < len; j++) {\n        const second = charsList[j];\n        const c1 = context.measureText(first).width;\n        const c2 = context.measureText(second).width;\n        const total = context.measureText(first + second).width;\n        const amount = total - (c1 + c2);\n        if (amount) {\n          fontData.kerning.push({\n            first: extractCharCode.extractCharCode(first),\n            second: extractCharCode.extractCharCode(second),\n            amount\n          });\n        }\n      }\n    }\n    const font = new _BitmapFont(fontData, textures, true);\n    if (_BitmapFont.available[name] !== void 0) {\n      _BitmapFont.uninstall(name);\n    }\n    _BitmapFont.available[name] = font;\n    return font;\n  }\n};\nlet BitmapFont = _BitmapFont;\nBitmapFont.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"];\nBitmapFont.NUMERIC = [[\"0\", \"9\"]];\nBitmapFont.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"];\nBitmapFont.ASCII = [[\" \", \"~\"]];\nBitmapFont.defaultOptions = {\n  resolution: 1,\n  textureWidth: 512,\n  textureHeight: 512,\n  padding: 4,\n  chars: _BitmapFont.ALPHANUMERIC\n};\nBitmapFont.available = {};\nexports.BitmapFont = BitmapFont;","map":{"version":3,"names":["_BitmapFont","constructor","data","textures","ownsTextures","info","common","page","distanceField","res","core","utils","getResolutionOfUrl","file","pageTextures","_ownsTextures","font","face","size","lineHeight","chars","i","length","id","Array","fieldType","baseTexture","alphaMode","ALPHA_MODES","NO_PREMULTIPLIED_ALPHA","mipmap","MIPMAP_MODES","OFF","char","page2","x","y","width","height","xoffset","yoffset","xadvance","rect","Rectangle","frame","xOffset","yOffset","xAdvance","kerning","texture","Texture","first","second","amount","distanceFieldRange","distanceRange","distanceFieldType","toLowerCase","destroy","install","fontData","BitmapFontData","format","index","autoDetectFormat","Error","parse","available","uninstall","name","from","textStyle","options","padding","resolution","textureWidth","textureHeight","baseOptions","Object","assign","defaultOptions","charsList","resolveCharacters","style","text","TextStyle","lineWidth","fontFamily","fontSize","positionX","positionY","canvas","context","maxCharHeight","baseTextures","settings","ADAPTER","createCanvas","getContext","BaseTexture","push","character","metrics","TextMetrics","measureText","Math","ceil","textureGlyphWidth","fontStyle","max","fontProperties","descent","drawGlyph","extractCharCode","dropShadow","dropShadowDistance","stroke","strokeThickness","len","j","c1","c2","total","BitmapFont","ALPHA","NUMERIC","ALPHANUMERIC","ASCII"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/text-bitmap/src/BitmapFont.ts"],"sourcesContent":["import { ALPHA_MODES, BaseTexture, MIPMAP_MODES, Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { TextMetrics, TextStyle } from '@pixi/text';\nimport { BitmapFontData } from './BitmapFontData';\nimport { autoDetectFormat } from './formats';\nimport { drawGlyph, extractCharCode, resolveCharacters } from './utils';\n\nimport type { IBaseTextureOptions, ICanvas, ICanvasRenderingContext2D, SCALE_MODES } from '@pixi/core';\nimport type { ITextStyle } from '@pixi/text';\n\nexport interface IBitmapFontCharacter\n{\n    xOffset: number;\n    yOffset: number;\n    xAdvance: number;\n    texture: Texture;\n    page: number;\n    kerning: utils.Dict<number>;\n}\n\ntype BaseOptions = Pick<IBaseTextureOptions, 'scaleMode' | 'mipmap' | 'anisotropicLevel' | 'alphaMode'>;\n\n/** @memberof PIXI */\nexport interface IBitmapFontOptions extends BaseOptions\n{\n    /**\n     * Characters included in the font set. You can also use ranges.\n     * For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default PIXI.BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n\n    /**\n     * Render resolution for glyphs.\n     * @default 1\n     */\n    resolution?: number;\n\n    /**\n     * Padding between glyphs on texture atlas. Lower values could mean more visual artifacts\n     * and bleeding from other glyphs, larger values increase the space required on the texture.\n     * @default 4\n     */\n    padding?: number;\n\n    /**\n     * Optional width of atlas, smaller values to reduce memory.\n     * @default 512\n     */\n    textureWidth?: number;\n\n    /**\n     * Optional height of atlas, smaller values to reduce memory.\n     * @default 512\n     */\n    textureHeight?: number;\n\n    /**\n     * If mipmapping is enabled for texture. For instance, by default PixiJS only enables mipmapping\n     * on Power-of-Two textures. If your textureWidth or textureHeight are not power-of-two, you\n     * may consider enabling mipmapping to get better quality with lower font sizes. Note:\n     * for MSDF/SDF fonts, mipmapping is not supported.\n     * @default PIXI.BaseTexture.defaultOptions.mipmap\n     */\n    mipmap?: MIPMAP_MODES;\n\n    /**\n     * Anisotropic filtering level of texture.\n     * @default PIXI.BaseTexture.defaultOptions.anisotropicLevel\n     */\n    anisotropicLevel?: number;\n\n    /**\n     * Default scale mode, linear, nearest. Nearest can be helpful for bitmap-style fonts.\n     * @default PIXI.BaseTexture.defaultOptions.scaleMode\n     */\n    scaleMode?: SCALE_MODES;\n\n    /**\n     * Pre multiply the image alpha.  Note: for MSDF/SDF fonts, alphaMode is not supported.\n     * @default PIXI.BaseTexture.defaultOptions.alphaMode\n     */\n    alphaMode?: ALPHA_MODES;\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n * @memberof PIXI\n */\nexport class BitmapFont\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public static readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public static readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public static readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public static readonly ASCII = [[' ', '~']];\n\n    /**\n     * Collection of default options when using `BitmapFont.from`.\n     * @property {number} [resolution=1] -\n     * @property {number} [textureWidth=512] -\n     * @property {number} [textureHeight=512] -\n     * @property {number} [padding=4] -\n     * @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n     */\n    public static readonly defaultOptions: IBitmapFontOptions = {\n        resolution: 1,\n        textureWidth: 512,\n        textureHeight: 512,\n        padding: 4,\n        chars: BitmapFont.ALPHANUMERIC,\n    };\n\n    /** Collection of available/installed fonts. */\n    public static readonly available: utils.Dict<BitmapFont> = {};\n\n    /** The name of the font face. */\n    public readonly font: string;\n\n    /** The size of the font face in pixels. */\n    public readonly size: number;\n\n    /** The line-height of the font face in pixels. */\n    public readonly lineHeight: number;\n\n    /** The map of characters by character code. */\n    public readonly chars: utils.Dict<IBitmapFontCharacter>;\n\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pageTextures: utils.Dict<Texture>;\n\n    /** The range of the distance field in pixels. */\n    public readonly distanceFieldRange: number;\n\n    /** The kind of distance field for this font or \"none\". */\n    public readonly distanceFieldType: string;\n\n    private _ownsTextures: boolean;\n\n    /**\n     * @param data\n     * @param textures\n     * @param ownsTextures - Setting to `true` will destroy page textures\n     *        when the font is uninstalled.\n     */\n    constructor(data: BitmapFontData, textures: Texture[] | utils.Dict<Texture>, ownsTextures?: boolean)\n    {\n        const [info] = data.info;\n        const [common] = data.common;\n        const [page] = data.page;\n        const [distanceField] = data.distanceField;\n        const res = utils.getResolutionOfUrl(page.file);\n        const pageTextures: utils.Dict<Texture> = {};\n\n        this._ownsTextures = ownsTextures;\n        this.font = info.face;\n        this.size = info.size;\n        this.lineHeight = common.lineHeight / res;\n        this.chars = {};\n        this.pageTextures = pageTextures;\n\n        // Convert the input Texture, Textures or object\n        // into a page Texture lookup by \"id\"\n        for (let i = 0; i < data.page.length; i++)\n        {\n            const { id, file } = data.page[i];\n\n            pageTextures[id] = textures instanceof Array\n                ? textures[i] : textures[file];\n\n            // only MSDF and SDF fonts need no-premultiplied-alpha\n            if (distanceField?.fieldType && distanceField.fieldType !== 'none')\n            {\n                pageTextures[id].baseTexture.alphaMode = ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\n                pageTextures[id].baseTexture.mipmap = MIPMAP_MODES.OFF;\n            }\n        }\n\n        // parse letters\n        for (let i = 0; i < data.char.length; i++)\n        {\n            const { id, page } = data.char[i];\n            let { x, y, width, height, xoffset, yoffset, xadvance } = data.char[i];\n\n            x /= res;\n            y /= res;\n            width /= res;\n            height /= res;\n            xoffset /= res;\n            yoffset /= res;\n            xadvance /= res;\n\n            const rect = new Rectangle(\n                x + (pageTextures[page].frame.x / res),\n                y + (pageTextures[page].frame.y / res),\n                width,\n                height\n            );\n\n            this.chars[id] = {\n                xOffset: xoffset,\n                yOffset: yoffset,\n                xAdvance: xadvance,\n                kerning: {},\n                texture: new Texture(\n                    pageTextures[page].baseTexture,\n                    rect\n                ),\n                page,\n            };\n        }\n\n        // parse kernings\n        for (let i = 0; i < data.kerning.length; i++)\n        {\n            let { first, second, amount } = data.kerning[i];\n\n            first /= res;\n            second /= res;\n            amount /= res;\n\n            if (this.chars[second])\n            {\n                this.chars[second].kerning[first] = amount;\n            }\n        }\n\n        // Store distance field information\n        this.distanceFieldRange = distanceField?.distanceRange;\n        this.distanceFieldType = distanceField?.fieldType?.toLowerCase() ?? 'none';\n    }\n\n    /** Remove references to created glyph textures. */\n    public destroy(): void\n    {\n        for (const id in this.chars)\n        {\n            this.chars[id].texture.destroy();\n            this.chars[id].texture = null;\n        }\n\n        for (const id in this.pageTextures)\n        {\n            if (this._ownsTextures)\n            {\n                this.pageTextures[id].destroy(true);\n            }\n\n            this.pageTextures[id] = null;\n        }\n\n        // Set readonly null.\n        (this as any).chars = null;\n        (this as any).pageTextures = null;\n    }\n\n    /**\n     * Register a new bitmap font.\n     * @param data - The\n     *        characters map that could be provided as xml or raw string.\n     * @param textures - List of textures for each page.\n     * @param ownsTextures - Set to `true` to destroy page textures\n     *        when the font is uninstalled. By default fonts created with\n     *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n     * @returns {PIXI.BitmapFont} Result font object with font, size, lineHeight\n     *         and char fields.\n     */\n    public static install(\n        data: string | XMLDocument | BitmapFontData,\n        textures: Texture | Texture[] | utils.Dict<Texture>,\n        ownsTextures?: boolean\n    ): BitmapFont\n    {\n        let fontData;\n\n        if (data instanceof BitmapFontData)\n        {\n            fontData = data;\n        }\n        else\n        {\n            const format = autoDetectFormat(data);\n\n            if (!format)\n            {\n                throw new Error('Unrecognized data format for font.');\n            }\n\n            fontData = format.parse(data as any);\n        }\n\n        // Single texture, convert to list\n        if (textures instanceof Texture)\n        {\n            textures = [textures];\n        }\n\n        const font = new BitmapFont(fontData, textures, ownsTextures);\n\n        BitmapFont.available[font.font] = font;\n\n        return font;\n    }\n\n    /**\n     * Remove bitmap font by name.\n     * @param name - Name of the font to uninstall.\n     */\n    public static uninstall(name: string): void\n    {\n        const font = BitmapFont.available[name];\n\n        if (!font)\n        {\n            throw new Error(`No font found named '${name}'`);\n        }\n\n        font.destroy();\n        delete BitmapFont.available[name];\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set. This does not support\n     * kernings yet. With `style` properties, only the following non-layout properties are used:\n     *\n     * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n     * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n     * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n     * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n     * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n     * - {@link PIXI.TextStyle#fill|fill}\n     * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n     * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n     * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n     * - {@link PIXI.TextStyle#fontSize|fontSize}\n     * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n     * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n     * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n     * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n     * - {@link PIXI.TextStyle#stroke|stroke}\n     * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n     * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n     * @param name - The name of the custom font to use with BitmapText.\n     * @param textStyle - Style options to render with BitmapFont.\n     * @param options - Setup options for font or name of the font.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFont, BitmapText } from 'pixi.js';\n     *\n     * BitmapFont.from('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText('This is the title', { fontName: 'TitleFont' });\n     */\n    public static from(name: string, textStyle?: TextStyle | Partial<ITextStyle>, options?: IBitmapFontOptions): BitmapFont\n    {\n        if (!name)\n        {\n            throw new Error('[BitmapFont] Property `name` is required.');\n        }\n\n        const {\n            chars,\n            padding,\n            resolution,\n            textureWidth,\n            textureHeight,\n            ...baseOptions\n        } = Object.assign({}, BitmapFont.defaultOptions, options);\n\n        const charsList = resolveCharacters(chars);\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const lineWidth = textureWidth;\n        const fontData = new BitmapFontData();\n\n        fontData.info[0] = {\n            face: style.fontFamily as string,\n            size: style.fontSize as number,\n        };\n        fontData.common[0] = {\n            lineHeight: style.fontSize as number,\n        };\n\n        let positionX = 0;\n        let positionY = 0;\n\n        let canvas: ICanvas;\n        let context: ICanvasRenderingContext2D;\n        let baseTexture: BaseTexture;\n        let maxCharHeight = 0;\n        const baseTextures: BaseTexture[] = [];\n        const textures: Texture[] = [];\n\n        for (let i = 0; i < charsList.length; i++)\n        {\n            if (!canvas)\n            {\n                canvas = settings.ADAPTER.createCanvas();\n                canvas.width = textureWidth;\n                canvas.height = textureHeight;\n\n                context = canvas.getContext('2d');\n                baseTexture = new BaseTexture(canvas, { resolution, ...baseOptions });\n\n                baseTextures.push(baseTexture);\n                textures.push(new Texture(baseTexture));\n\n                fontData.page.push({\n                    id: textures.length - 1,\n                    file: '',\n                });\n            }\n\n            // Measure glyph dimensions\n            const character = charsList[i];\n            const metrics = TextMetrics.measureText(character, style, false, canvas);\n            const width = metrics.width;\n            const height = Math.ceil(metrics.height);\n\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            // Can't fit char anymore: next canvas please!\n            if (positionY >= textureHeight - (height * resolution))\n            {\n                if (positionY === 0)\n                {\n                    // We don't want user debugging an infinite loop (or do we? :)\n                    throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is too small `\n                        + `(fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n                }\n\n                --i;\n\n                // Create new atlas once current has filled up\n                canvas = null;\n                context = null;\n                baseTexture = null;\n                positionY = 0;\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n\n            // Wrap line once full row has been rendered\n            if ((textureGlyphWidth * resolution) + positionX >= lineWidth)\n            {\n                if (positionX === 0)\n                {\n                    // Avoid infinite loop (There can be some very wide char like '\\uFDFD'!)\n                    throw new Error(`[BitmapFont] textureWidth ${textureWidth}px is too small `\n                        + `(fontFamily: '${style.fontFamily}', fontSize: ${style.fontSize}px, char: '${character}')`);\n                }\n\n                --i;\n                positionY += maxCharHeight * resolution;\n                positionY = Math.ceil(positionY);\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n\n            // Unique (numeric) ID mapping to this glyph\n            const id = extractCharCode(metrics.text);\n\n            // Create a texture holding just the glyph\n            fontData.char.push({\n                id,\n                page: textures.length - 1,\n                x: positionX / resolution,\n                y: positionY / resolution,\n                width: textureGlyphWidth,\n                height,\n                xoffset: 0,\n                yoffset: 0,\n                xadvance: width\n                        - (style.dropShadow ? style.dropShadowDistance : 0)\n                        - (style.stroke ? style.strokeThickness : 0),\n            });\n\n            positionX += (textureGlyphWidth + (2 * padding)) * resolution;\n            positionX = Math.ceil(positionX);\n        }\n\n        // Brute-force kerning info, this can be expensive b/c it's an O(n²),\n        // but we're using measureText which is native and fast.\n        for (let i = 0, len = charsList.length; i < len; i++)\n        {\n            const first = charsList[i];\n\n            for (let j = 0; j < len; j++)\n            {\n                const second = charsList[j];\n                const c1 = context.measureText(first).width;\n                const c2 = context.measureText(second).width;\n                const total = context.measureText(first + second).width;\n                const amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    fontData.kerning.push({\n                        first: extractCharCode(first),\n                        second: extractCharCode(second),\n                        amount,\n                    });\n                }\n            }\n        }\n\n        const font = new BitmapFont(fontData, textures, true);\n\n        // Make it easier to replace a font\n        if (BitmapFont.available[name] !== undefined)\n        {\n            BitmapFont.uninstall(name);\n        }\n\n        BitmapFont.available[name] = font;\n\n        return font;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}