{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _math = require('../math');\nvar _TransformBase2 = require('./TransformBase');\nvar _TransformBase3 = _interopRequireDefault(_TransformBase2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * Generic class to deal with traditional 2D matrix transforms\n * local transformation is calculated from position,scale,skew and rotation\n *\n * @class\n * @extends PIXI.TransformBase\n * @memberof PIXI\n */\nvar Transform = function (_TransformBase) {\n  _inherits(Transform, _TransformBase);\n\n  /**\n   *\n   */\n  function Transform() {\n    _classCallCheck(this, Transform);\n\n    /**\n    * The coordinate of the object relative to the local coordinates of the parent.\n    *\n    * @member {PIXI.Point}\n    */\n    var _this = _possibleConstructorReturn(this, _TransformBase.call(this));\n    _this.position = new _math.Point(0, 0);\n\n    /**\n     * The scale factor of the object.\n     *\n     * @member {PIXI.Point}\n     */\n    _this.scale = new _math.Point(1, 1);\n\n    /**\n     * The skew amount, on the x and y axis.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    _this.skew = new _math.ObservablePoint(_this.updateSkew, _this, 0, 0);\n\n    /**\n     * The pivot point of the displayObject that it rotates around.\n     *\n     * @member {PIXI.Point}\n     */\n    _this.pivot = new _math.Point(0, 0);\n\n    /**\n     * The rotation value of the object, in radians\n     *\n     * @member {Number}\n     * @private\n     */\n    _this._rotation = 0;\n    _this._cx = 1; // cos rotation + skewY;\n    _this._sx = 0; // sin rotation + skewY;\n    _this._cy = 0; // cos rotation + Math.PI/2 - skewX;\n    _this._sy = 1; // sin rotation + Math.PI/2 - skewX;\n    return _this;\n  }\n\n  /**\n   * Updates the skew values when the skew or rotation changes.\n   *\n   * @private\n   */\n\n  Transform.prototype.updateSkew = function updateSkew() {\n    this._cx = Math.cos(this._rotation + this.skew._y);\n    this._sx = Math.sin(this._rotation + this.skew._y);\n    this._cy = -Math.sin(this._rotation - this.skew._x); // cos, added PI/2\n    this._sy = Math.cos(this._rotation - this.skew._x); // sin, added PI/2\n  };\n\n  /**\n   * Updates only local matrix\n   */\n\n  Transform.prototype.updateLocalTransform = function updateLocalTransform() {\n    var lt = this.localTransform;\n    lt.a = this._cx * this.scale.x;\n    lt.b = this._sx * this.scale.x;\n    lt.c = this._cy * this.scale.y;\n    lt.d = this._sy * this.scale.y;\n    lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n    lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n  };\n\n  /**\n   * Updates the values of the object and applies the parent's transform.\n   *\n   * @param {PIXI.Transform} parentTransform - The transform of the parent of this object\n   */\n\n  Transform.prototype.updateTransform = function updateTransform(parentTransform) {\n    var lt = this.localTransform;\n    lt.a = this._cx * this.scale.x;\n    lt.b = this._sx * this.scale.x;\n    lt.c = this._cy * this.scale.y;\n    lt.d = this._sy * this.scale.y;\n    lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n    lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n\n    // concat the parent matrix with the objects transform.\n    var pt = parentTransform.worldTransform;\n    var wt = this.worldTransform;\n    wt.a = lt.a * pt.a + lt.b * pt.c;\n    wt.b = lt.a * pt.b + lt.b * pt.d;\n    wt.c = lt.c * pt.a + lt.d * pt.c;\n    wt.d = lt.c * pt.b + lt.d * pt.d;\n    wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n    wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n    this._worldID++;\n  };\n\n  /**\n   * Decomposes a matrix and sets the transforms properties based on it.\n   *\n   * @param {PIXI.Matrix} matrix - The matrix to decompose\n   */\n\n  Transform.prototype.setFromMatrix = function setFromMatrix(matrix) {\n    matrix.decompose(this);\n  };\n\n  /**\n   * The rotation of the object in radians.\n   *\n   * @member {number}\n   */\n\n  _createClass(Transform, [{\n    key: 'rotation',\n    get: function get() {\n      return this._rotation;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      this._rotation = value;\n      this.updateSkew();\n    }\n  }]);\n  return Transform;\n}(_TransformBase3.default);\nexports.default = Transform;","map":{"version":3,"names":["_math","require","_TransformBase2","Transform","_classCallCheck","_this","_possibleConstructorReturn","_TransformBase","call","position","Point","scale","skew","ObservablePoint","updateSkew","pivot","_rotation","_cx","_sx","_cy","_sy","Math","cos","_y","sin","_x","updateLocalTransform","lt","localTransform","a","x","b","c","y","d","tx","ty","updateTransform","parentTransform","pt","worldTransform","wt","_worldID","setFromMatrix","matrix","decompose","value"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/display/Transform.js"],"sourcesContent":["import { Point, ObservablePoint } from '../math';\nimport TransformBase from './TransformBase';\n\n/**\n * Generic class to deal with traditional 2D matrix transforms\n * local transformation is calculated from position,scale,skew and rotation\n *\n * @class\n * @extends PIXI.TransformBase\n * @memberof PIXI\n */\nexport default class Transform extends TransformBase\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        super();\n\n         /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.Point}\n         */\n        this.position = new Point(0, 0);\n\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.Point}\n         */\n        this.scale = new Point(1, 1);\n\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         *\n         * @member {PIXI.Point}\n         */\n        this.pivot = new Point(0, 0);\n\n        /**\n         * The rotation value of the object, in radians\n         *\n         * @member {Number}\n         * @private\n         */\n        this._rotation = 0;\n\n        this._cx = 1; // cos rotation + skewY;\n        this._sx = 0; // sin rotation + skewY;\n        this._cy = 0; // cos rotation + Math.PI/2 - skewX;\n        this._sy = 1; // sin rotation + Math.PI/2 - skewX;\n    }\n\n    /**\n     * Updates the skew values when the skew or rotation changes.\n     *\n     * @private\n     */\n    updateSkew()\n    {\n        this._cx = Math.cos(this._rotation + this.skew._y);\n        this._sx = Math.sin(this._rotation + this.skew._y);\n        this._cy = -Math.sin(this._rotation - this.skew._x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew._x); // sin, added PI/2\n    }\n\n    /**\n     * Updates only local matrix\n     */\n    updateLocalTransform()\n    {\n        const lt = this.localTransform;\n\n        lt.a = this._cx * this.scale.x;\n        lt.b = this._sx * this.scale.x;\n        lt.c = this._cy * this.scale.y;\n        lt.d = this._sy * this.scale.y;\n\n        lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n        lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n    }\n\n    /**\n     * Updates the values of the object and applies the parent's transform.\n     *\n     * @param {PIXI.Transform} parentTransform - The transform of the parent of this object\n     */\n    updateTransform(parentTransform)\n    {\n        const lt = this.localTransform;\n\n        lt.a = this._cx * this.scale.x;\n        lt.b = this._sx * this.scale.x;\n        lt.c = this._cy * this.scale.y;\n        lt.d = this._sy * this.scale.y;\n\n        lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n        lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n\n        // concat the parent matrix with the objects transform.\n        const pt = parentTransform.worldTransform;\n        const wt = this.worldTransform;\n\n        wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n        wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n        wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n        wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n        wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n        wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n        this._worldID ++;\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix)\n    {\n        matrix.decompose(this);\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     */\n    get rotation()\n    {\n        return this._rotation;\n    }\n\n    set rotation(value) // eslint-disable-line require-jsdoc\n    {\n        this._rotation = value;\n        this.updateSkew();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}