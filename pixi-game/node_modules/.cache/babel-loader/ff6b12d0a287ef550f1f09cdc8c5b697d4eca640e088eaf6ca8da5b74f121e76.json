{"ast":null,"code":"'use strict';\n\nvar _core = require('../core');\nvar core = _interopRequireWildcard(_core);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\n/**\n * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n *\n * @method getGlobalPosition\n * @memberof PIXI.DisplayObject#\n * @param {Point} point - the point to write the global value to. If null a new point will be returned\n * @param {boolean} skipUpdate - setting to true will stop the transforms of the scene graph from\n *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n *  nice performance boost\n * @return {Point} The updated point\n */\ncore.DisplayObject.prototype.getGlobalPosition = function getGlobalPosition() {\n  var point = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new core.Point();\n  var skipUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (this.parent) {\n    this.parent.toGlobal(this.position, point, skipUpdate);\n  } else {\n    point.x = this.position.x;\n    point.y = this.position.y;\n  }\n  return point;\n};","map":{"version":3,"names":["_core","require","core","DisplayObject","prototype","getGlobalPosition","point","arguments","length","undefined","Point","skipUpdate","parent","toGlobal","position","x","y"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/extras/getGlobalPosition.js"],"sourcesContent":["import * as core from '../core';\n\n/**\n * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n *\n * @method getGlobalPosition\n * @memberof PIXI.DisplayObject#\n * @param {Point} point - the point to write the global value to. If null a new point will be returned\n * @param {boolean} skipUpdate - setting to true will stop the transforms of the scene graph from\n *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n *  nice performance boost\n * @return {Point} The updated point\n */\ncore.DisplayObject.prototype.getGlobalPosition = function getGlobalPosition(point = new core.Point(), skipUpdate = false)\n{\n    if (this.parent)\n    {\n        this.parent.toGlobal(this.position, point, skipUpdate);\n    }\n    else\n    {\n        point.x = this.position.x;\n        point.y = this.position.y;\n    }\n\n    return point;\n};\n"],"mappings":";;AAAA,IAAAA,KAAA,GAAAC,OAAA;IAAYC,I;;;;;;;;;;;;;;;;AAEZ;;;;;;;;;;;AAWAA,IAAA,CAAKC,aAAL,CAAmBC,SAAnB,CAA6BC,iBAA7B,GAAiD,SAASA,iBAATA,CAAA,EACjD;EAAA,IAD4EC,KAC5E,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADoF,IAAIL,IAAA,CAAKQ,KAAT,EACpF;EAAA,IADsGC,UACtG,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADmH,KACnH;EACI,IAAI,KAAKK,MAAT,EACA;IACI,KAAKA,MAAL,CAAYC,QAAZ,CAAqB,KAAKC,QAA1B,EAAoCR,KAApC,EAA2CK,UAA3C;EACH,CAHD,MAKA;IACIL,KAAA,CAAMS,CAAN,GAAU,KAAKD,QAAL,CAAcC,CAAxB;IACAT,KAAA,CAAMU,CAAN,GAAU,KAAKF,QAAL,CAAcE,CAAxB;EACH;EAED,OAAOV,KAAP;AACH,CAbD"},"metadata":{},"sourceType":"script","externalDependencies":[]}