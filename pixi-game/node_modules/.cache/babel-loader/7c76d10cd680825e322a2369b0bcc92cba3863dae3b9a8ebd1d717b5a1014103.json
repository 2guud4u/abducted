{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _core = require('../../core');\nvar core = _interopRequireWildcard(_core);\nvar _BasePrepare2 = require('../BasePrepare');\nvar _BasePrepare3 = _interopRequireDefault(_BasePrepare2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar CANVAS_START_SIZE = 16;\n\n/**\n * The prepare manager provides functionality to upload content to the GPU\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas.\n * This draw call will force the texture to be moved onto the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.prepare\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\n\nvar CanvasPrepare = function (_BasePrepare) {\n  _inherits(CanvasPrepare, _BasePrepare);\n\n  /**\n   * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n   */\n  function CanvasPrepare(renderer) {\n    _classCallCheck(this, CanvasPrepare);\n    var _this = _possibleConstructorReturn(this, _BasePrepare.call(this, renderer));\n    _this.uploadHookHelper = _this;\n\n    /**\n    * An offline canvas to render textures to\n    * @type {HTMLCanvasElement}\n    * @private\n    */\n    _this.canvas = document.createElement('canvas');\n    _this.canvas.width = CANVAS_START_SIZE;\n    _this.canvas.height = CANVAS_START_SIZE;\n\n    /**\n     * The context to the canvas\n    * @type {CanvasRenderingContext2D}\n    * @private\n    */\n    _this.ctx = _this.canvas.getContext('2d');\n\n    // Add textures to upload\n    _this.registerUploadHook(uploadBaseTextures);\n    return _this;\n  }\n\n  /**\n   * Destroys the plugin, don't use after this.\n   *\n   */\n\n  CanvasPrepare.prototype.destroy = function destroy() {\n    _BasePrepare.prototype.destroy.call(this);\n    this.ctx = null;\n    this.canvas = null;\n  };\n  return CanvasPrepare;\n}(_BasePrepare3.default);\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\n\nexports.default = CanvasPrepare;\nfunction uploadBaseTextures(prepare, item) {\n  if (item instanceof core.BaseTexture) {\n    var image = item.source;\n\n    // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n    // So if the width or height is equal to zero then use the canvas size\n    // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n    var imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n    var imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height);\n\n    // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n    // A smaller draw can be faster.\n    prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n    return true;\n  }\n  return false;\n}\ncore.CanvasRenderer.registerPlugin('prepare', CanvasPrepare);","map":{"version":3,"names":["_core","require","core","_BasePrepare2","CANVAS_START_SIZE","CanvasPrepare","renderer","_classCallCheck","_this","_possibleConstructorReturn","_BasePrepare","call","uploadHookHelper","canvas","document","createElement","width","height","ctx","getContext","registerUploadHook","uploadBaseTextures","destroy","prototype","prepare","item","BaseTexture","image","source","imageWidth","Math","min","imageHeight","drawImage","CanvasRenderer","registerPlugin"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/prepare/canvas/CanvasPrepare.js"],"sourcesContent":["import * as core from '../../core';\nimport BasePrepare from '../BasePrepare';\n\nconst CANVAS_START_SIZE = 16;\n\n/**\n * The prepare manager provides functionality to upload content to the GPU\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas.\n * This draw call will force the texture to be moved onto the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.prepare\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\nexport default class CanvasPrepare extends BasePrepare\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this;\n\n        /**\n        * An offline canvas to render textures to\n        * @type {HTMLCanvasElement}\n        * @private\n        */\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = CANVAS_START_SIZE;\n        this.canvas.height = CANVAS_START_SIZE;\n\n        /**\n         * The context to the canvas\n        * @type {CanvasRenderingContext2D}\n        * @private\n        */\n        this.ctx = this.canvas.getContext('2d');\n\n        // Add textures to upload\n        this.registerUploadHook(uploadBaseTextures);\n    }\n\n    /**\n     * Destroys the plugin, don't use after this.\n     *\n     */\n    destroy()\n    {\n        super.destroy();\n        this.ctx = null;\n        this.canvas = null;\n    }\n\n}\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadBaseTextures(prepare, item)\n{\n    if (item instanceof core.BaseTexture)\n    {\n        const image = item.source;\n\n        // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n        // So if the width or height is equal to zero then use the canvas size\n        // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n        const imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n        const imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height);\n\n        // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n        // A smaller draw can be faster.\n        prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n\n        return true;\n    }\n\n    return false;\n}\n\ncore.CanvasRenderer.registerPlugin('prepare', CanvasPrepare);\n"],"mappings":";;;AAAA,IAAAA,KAAA,GAAAC,OAAA;IAAYC,I;AACZ,IAAAC,aAAA,GAAAF,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMG,iBAAA,GAAoB,EAA1B;;AAEA;;;;;;;;;;;;;IAYqBC,a;;;EAEjB;;;EAGA,SAAAA,cAAYC,QAAZ,EACA;IAAAC,eAAA,OAAAF,aAAA;IAAA,IAAAG,KAAA,GAAAC,0BAAA,OACIC,YAAA,CAAAC,IAAA,OAAML,QAAN,CADJ;IAGIE,KAAA,CAAKI,gBAAL,GAAAJ,KAAA;;IAEA;;;;;IAKAA,KAAA,CAAKK,MAAL,GAAcC,QAAA,CAASC,aAAT,CAAuB,QAAvB,CAAd;IACAP,KAAA,CAAKK,MAAL,CAAYG,KAAZ,GAAoBZ,iBAApB;IACAI,KAAA,CAAKK,MAAL,CAAYI,MAAZ,GAAqBb,iBAArB;;IAEA;;;;;IAKAI,KAAA,CAAKU,GAAL,GAAWV,KAAA,CAAKK,MAAL,CAAYM,UAAZ,CAAuB,IAAvB,CAAX;;IAEA;IACAX,KAAA,CAAKY,kBAAL,CAAwBC,kBAAxB;IAtBJ,OAAAb,KAAA;EAuBC;;EAED;;;;;0BAIAc,O,sBACA;IACIZ,YAAA,CAAAa,SAAA,CAAMD,OAAN,CAAAX,IAAA;IACA,KAAKO,GAAL,GAAW,IAAX;IACA,KAAKL,MAAL,GAAc,IAAd;EACH,C;;;;AAIL;;;;;;;;;kBA5CqBR,a;AAoDrB,SAASgB,kBAATA,CAA4BG,OAA5B,EAAqCC,IAArC,EACA;EACI,IAAIA,IAAA,YAAgBvB,IAAA,CAAKwB,WAAzB,EACA;IACI,IAAMC,KAAA,GAAQF,IAAA,CAAKG,MAAnB;;IAEA;IACA;IACA;IACA,IAAMC,UAAA,GAAaF,KAAA,CAAMX,KAAN,KAAgB,CAAhB,GAAoBQ,OAAA,CAAQX,MAAR,CAAeG,KAAnC,GAA2Cc,IAAA,CAAKC,GAAL,CAASP,OAAA,CAAQX,MAAR,CAAeG,KAAxB,EAA+BW,KAAA,CAAMX,KAArC,CAA9D;IACA,IAAMgB,WAAA,GAAcL,KAAA,CAAMV,MAAN,KAAiB,CAAjB,GAAqBO,OAAA,CAAQX,MAAR,CAAeI,MAApC,GAA6Ca,IAAA,CAAKC,GAAL,CAASP,OAAA,CAAQX,MAAR,CAAeI,MAAxB,EAAgCU,KAAA,CAAMV,MAAtC,CAAjE;;IAEA;IACA;IACAO,OAAA,CAAQN,GAAR,CAAYe,SAAZ,CAAsBN,KAAtB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmCE,UAAnC,EAA+CG,WAA/C,EAA4D,CAA5D,EAA+D,CAA/D,EAAkER,OAAA,CAAQX,MAAR,CAAeG,KAAjF,EAAwFQ,OAAA,CAAQX,MAAR,CAAeI,MAAvG;IAEA,OAAO,IAAP;EACH;EAED,OAAO,KAAP;AACH;AAEDf,IAAA,CAAKgC,cAAL,CAAoBC,cAApB,CAAmC,SAAnC,EAA8C9B,aAA9C"},"metadata":{},"sourceType":"script","externalDependencies":[]}