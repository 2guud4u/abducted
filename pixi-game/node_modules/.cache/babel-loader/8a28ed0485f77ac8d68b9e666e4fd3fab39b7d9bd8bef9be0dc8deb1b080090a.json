{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = function (graphicsData, webGLData, webGLDataNativeLines) {\n  if (graphicsData.nativeLines) {\n    buildNativeLine(graphicsData, webGLDataNativeLines);\n  } else {\n    buildLine(graphicsData, webGLData);\n  }\n};\nvar _math = require('../../../math');\nvar _utils = require('../../../utils');\n\n/**\n * Builds a line to draw using the poligon method.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\nfunction buildLine(graphicsData, webGLData) {\n  // TODO OPTIMISE!\n  var points = graphicsData.points;\n  if (points.length === 0) {\n    return;\n  }\n  // if the line width is an odd number add 0.5 to align to a whole pixel\n  // commenting this out fixes #711 and #1620\n  // if (graphicsData.lineWidth%2)\n  // {\n  //     for (i = 0; i < points.length; i++)\n  //     {\n  //         points[i] += 0.5;\n  //     }\n  // }\n\n  // get first and last point.. figure out the middle!\n  var firstPoint = new _math.Point(points[0], points[1]);\n  var lastPoint = new _math.Point(points[points.length - 2], points[points.length - 1]);\n\n  // if the first point is the last point - gonna have issues :)\n  if (firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y) {\n    // need to clone as we are going to slightly modify the shape..\n    points = points.slice();\n    points.pop();\n    points.pop();\n    lastPoint = new _math.Point(points[points.length - 2], points[points.length - 1]);\n    var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;\n    var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;\n    points.unshift(midPointX, midPointY);\n    points.push(midPointX, midPointY);\n  }\n  var verts = webGLData.points;\n  var indices = webGLData.indices;\n  var length = points.length / 2;\n  var indexCount = points.length;\n  var indexStart = verts.length / 6;\n\n  // DRAW the Line\n  var width = graphicsData.lineWidth / 2;\n\n  // sort color\n  var color = (0, _utils.hex2rgb)(graphicsData.lineColor);\n  var alpha = graphicsData.lineAlpha;\n  var r = color[0] * alpha;\n  var g = color[1] * alpha;\n  var b = color[2] * alpha;\n  var p1x = points[0];\n  var p1y = points[1];\n  var p2x = points[2];\n  var p2y = points[3];\n  var p3x = 0;\n  var p3y = 0;\n  var perpx = -(p1y - p2y);\n  var perpy = p1x - p2x;\n  var perp2x = 0;\n  var perp2y = 0;\n  var perp3x = 0;\n  var perp3y = 0;\n  var dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist;\n  perpy /= dist;\n  perpx *= width;\n  perpy *= width;\n  var ratio = graphicsData.lineAlignment; // 0.5;\n  var r1 = (1 - ratio) * 2;\n  var r2 = ratio * 2;\n\n  // start\n  verts.push(p1x - perpx * r1, p1y - perpy * r1, r, g, b, alpha);\n  verts.push(p1x + perpx * r2, p1y + perpy * r2, r, g, b, alpha);\n  for (var i = 1; i < length - 1; ++i) {\n    p1x = points[(i - 1) * 2];\n    p1y = points[(i - 1) * 2 + 1];\n    p2x = points[i * 2];\n    p2y = points[i * 2 + 1];\n    p3x = points[(i + 1) * 2];\n    p3y = points[(i + 1) * 2 + 1];\n    perpx = -(p1y - p2y);\n    perpy = p1x - p2x;\n    dist = Math.sqrt(perpx * perpx + perpy * perpy);\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n    perp2x = -(p2y - p3y);\n    perp2y = p2x - p3x;\n    dist = Math.sqrt(perp2x * perp2x + perp2y * perp2y);\n    perp2x /= dist;\n    perp2y /= dist;\n    perp2x *= width;\n    perp2y *= width;\n    var a1 = -perpy + p1y - (-perpy + p2y);\n    var b1 = -perpx + p2x - (-perpx + p1x);\n    var c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);\n    var a2 = -perp2y + p3y - (-perp2y + p2y);\n    var b2 = -perp2x + p2x - (-perp2x + p3x);\n    var c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);\n    var denom = a1 * b2 - a2 * b1;\n    if (Math.abs(denom) < 0.1) {\n      denom += 10.1;\n      verts.push(p2x - perpx * r1, p2y - perpy * r1, r, g, b, alpha);\n      verts.push(p2x + perpx * r2, p2y + perpy * r2, r, g, b, alpha);\n      continue;\n    }\n    var px = (b1 * c2 - b2 * c1) / denom;\n    var py = (a2 * c1 - a1 * c2) / denom;\n    var pdist = (px - p2x) * (px - p2x) + (py - p2y) * (py - p2y);\n    if (pdist > 196 * width * width) {\n      perp3x = perpx - perp2x;\n      perp3y = perpy - perp2y;\n      dist = Math.sqrt(perp3x * perp3x + perp3y * perp3y);\n      perp3x /= dist;\n      perp3y /= dist;\n      perp3x *= width;\n      perp3y *= width;\n      verts.push(p2x - perp3x * r1, p2y - perp3y * r1);\n      verts.push(r, g, b, alpha);\n      verts.push(p2x + perp3x * r2, p2y + perp3y * r2);\n      verts.push(r, g, b, alpha);\n      verts.push(p2x - perp3x * r2 * r1, p2y - perp3y * r1);\n      verts.push(r, g, b, alpha);\n      indexCount++;\n    } else {\n      verts.push(p2x + (px - p2x) * r1, p2y + (py - p2y) * r1);\n      verts.push(r, g, b, alpha);\n      verts.push(p2x - (px - p2x) * r2, p2y - (py - p2y) * r2);\n      verts.push(r, g, b, alpha);\n    }\n  }\n  p1x = points[(length - 2) * 2];\n  p1y = points[(length - 2) * 2 + 1];\n  p2x = points[(length - 1) * 2];\n  p2y = points[(length - 1) * 2 + 1];\n  perpx = -(p1y - p2y);\n  perpy = p1x - p2x;\n  dist = Math.sqrt(perpx * perpx + perpy * perpy);\n  perpx /= dist;\n  perpy /= dist;\n  perpx *= width;\n  perpy *= width;\n  verts.push(p2x - perpx * r1, p2y - perpy * r1);\n  verts.push(r, g, b, alpha);\n  verts.push(p2x + perpx * r2, p2y + perpy * r2);\n  verts.push(r, g, b, alpha);\n  indices.push(indexStart);\n  for (var _i = 0; _i < indexCount; ++_i) {\n    indices.push(indexStart++);\n  }\n  indices.push(indexStart - 1);\n}\n\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\n\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nfunction buildNativeLine(graphicsData, webGLData) {\n  var i = 0;\n  var points = graphicsData.points;\n  if (points.length === 0) return;\n  var verts = webGLData.points;\n  var length = points.length / 2;\n\n  // sort color\n  var color = (0, _utils.hex2rgb)(graphicsData.lineColor);\n  var alpha = graphicsData.lineAlpha;\n  var r = color[0] * alpha;\n  var g = color[1] * alpha;\n  var b = color[2] * alpha;\n  for (i = 1; i < length; i++) {\n    var p1x = points[(i - 1) * 2];\n    var p1y = points[(i - 1) * 2 + 1];\n    var p2x = points[i * 2];\n    var p2y = points[i * 2 + 1];\n    verts.push(p1x, p1y);\n    verts.push(r, g, b, alpha);\n    verts.push(p2x, p2y);\n    verts.push(r, g, b, alpha);\n  }\n}","map":{"version":3,"names":["graphicsData","webGLData","webGLDataNativeLines","nativeLines","buildNativeLine","buildLine","_math","require","_utils","points","length","firstPoint","Point","lastPoint","x","y","slice","pop","midPointX","midPointY","unshift","push","verts","indices","indexCount","indexStart","width","lineWidth","color","hex2rgb","lineColor","alpha","lineAlpha","r","g","b","p1x","p1y","p2x","p2y","p3x","p3y","perpx","perpy","perp2x","perp2y","perp3x","perp3y","dist","Math","sqrt","ratio","lineAlignment","r1","r2","i","a1","b1","c1","a2","b2","c2","denom","abs","px","py","pdist","_i"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/graphics/webgl/utils/buildLine.js"],"sourcesContent":["import { Point } from '../../../math';\nimport { hex2rgb } from '../../../utils';\n\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nexport default function (graphicsData, webGLData, webGLDataNativeLines)\n{\n    if (graphicsData.nativeLines)\n    {\n        buildNativeLine(graphicsData, webGLDataNativeLines);\n    }\n    else\n    {\n        buildLine(graphicsData, webGLData);\n    }\n}\n\n/**\n * Builds a line to draw using the poligon method.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\nfunction buildLine(graphicsData, webGLData)\n{\n    // TODO OPTIMISE!\n    let points = graphicsData.points;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n    // if the line width is an odd number add 0.5 to align to a whole pixel\n    // commenting this out fixes #711 and #1620\n    // if (graphicsData.lineWidth%2)\n    // {\n    //     for (i = 0; i < points.length; i++)\n    //     {\n    //         points[i] += 0.5;\n    //     }\n    // }\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    let lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n\n    // if the first point is the last point - gonna have issues :)\n    if (firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        points.pop();\n        points.pop();\n\n        lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n\n        const midPointX = lastPoint.x + ((firstPoint.x - lastPoint.x) * 0.5);\n        const midPointY = lastPoint.y + ((firstPoint.y - lastPoint.y) * 0.5);\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = webGLData.points;\n    const indices = webGLData.indices;\n    const length = points.length / 2;\n    let indexCount = points.length;\n    let indexStart = verts.length / 6;\n\n    // DRAW the Line\n    const width = graphicsData.lineWidth / 2;\n\n    // sort color\n    const color = hex2rgb(graphicsData.lineColor);\n    const alpha = graphicsData.lineAlpha;\n    const r = color[0] * alpha;\n    const g = color[1] * alpha;\n    const b = color[2] * alpha;\n\n    let p1x = points[0];\n    let p1y = points[1];\n    let p2x = points[2];\n    let p2y = points[3];\n    let p3x = 0;\n    let p3y = 0;\n\n    let perpx = -(p1y - p2y);\n    let perpy = p1x - p2x;\n    let perp2x = 0;\n    let perp2y = 0;\n    let perp3x = 0;\n    let perp3y = 0;\n\n    let dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    const ratio = graphicsData.lineAlignment;// 0.5;\n    const r1 = (1 - ratio) * 2;\n    const r2 = ratio * 2;\n\n    // start\n    verts.push(\n        p1x - (perpx * r1),\n        p1y - (perpy * r1),\n        r, g, b, alpha\n    );\n\n    verts.push(\n        p1x + (perpx * r2),\n        p1y + (perpy * r2),\n        r, g, b, alpha\n    );\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        p1x = points[(i - 1) * 2];\n        p1y = points[((i - 1) * 2) + 1];\n\n        p2x = points[i * 2];\n        p2y = points[(i * 2) + 1];\n\n        p3x = points[(i + 1) * 2];\n        p3y = points[((i + 1) * 2) + 1];\n\n        perpx = -(p1y - p2y);\n        perpy = p1x - p2x;\n\n        dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n        perpx /= dist;\n        perpy /= dist;\n        perpx *= width;\n        perpy *= width;\n\n        perp2x = -(p2y - p3y);\n        perp2y = p2x - p3x;\n\n        dist = Math.sqrt((perp2x * perp2x) + (perp2y * perp2y));\n        perp2x /= dist;\n        perp2y /= dist;\n        perp2x *= width;\n        perp2y *= width;\n\n        const a1 = (-perpy + p1y) - (-perpy + p2y);\n        const b1 = (-perpx + p2x) - (-perpx + p1x);\n        const c1 = ((-perpx + p1x) * (-perpy + p2y)) - ((-perpx + p2x) * (-perpy + p1y));\n        const a2 = (-perp2y + p3y) - (-perp2y + p2y);\n        const b2 = (-perp2x + p2x) - (-perp2x + p3x);\n        const c2 = ((-perp2x + p3x) * (-perp2y + p2y)) - ((-perp2x + p2x) * (-perp2y + p3y));\n\n        let denom = (a1 * b2) - (a2 * b1);\n\n        if (Math.abs(denom) < 0.1)\n        {\n            denom += 10.1;\n            verts.push(\n                p2x - (perpx * r1),\n                p2y - (perpy * r1),\n                r, g, b, alpha\n            );\n\n            verts.push(\n                p2x + (perpx * r2),\n                p2y + (perpy * r2),\n                r, g, b, alpha\n            );\n\n            continue;\n        }\n\n        const px = ((b1 * c2) - (b2 * c1)) / denom;\n        const py = ((a2 * c1) - (a1 * c2)) / denom;\n        const pdist = ((px - p2x) * (px - p2x)) + ((py - p2y) * (py - p2y));\n\n        if (pdist > (196 * width * width))\n        {\n            perp3x = perpx - perp2x;\n            perp3y = perpy - perp2y;\n\n            dist = Math.sqrt((perp3x * perp3x) + (perp3y * perp3y));\n            perp3x /= dist;\n            perp3y /= dist;\n            perp3x *= width;\n            perp3y *= width;\n\n            verts.push(p2x - (perp3x * r1), p2y - (perp3y * r1));\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x + (perp3x * r2), p2y + (perp3y * r2));\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x - (perp3x * r2 * r1), p2y - (perp3y * r1));\n            verts.push(r, g, b, alpha);\n\n            indexCount++;\n        }\n        else\n        {\n            verts.push(p2x + ((px - p2x) * r1), p2y + ((py - p2y) * r1));\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x - ((px - p2x) * r2), p2y - ((py - p2y) * r2));\n            verts.push(r, g, b, alpha);\n        }\n    }\n\n    p1x = points[(length - 2) * 2];\n    p1y = points[((length - 2) * 2) + 1];\n\n    p2x = points[(length - 1) * 2];\n    p2y = points[((length - 1) * 2) + 1];\n\n    perpx = -(p1y - p2y);\n    perpy = p1x - p2x;\n\n    dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    verts.push(p2x - (perpx * r1), p2y - (perpy * r1));\n    verts.push(r, g, b, alpha);\n\n    verts.push(p2x + (perpx * r2), p2y + (perpy * r2));\n    verts.push(r, g, b, alpha);\n\n    indices.push(indexStart);\n\n    for (let i = 0; i < indexCount; ++i)\n    {\n        indices.push(indexStart++);\n    }\n\n    indices.push(indexStart - 1);\n}\n\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\nfunction buildNativeLine(graphicsData, webGLData)\n{\n    let i = 0;\n    const points = graphicsData.points;\n\n    if (points.length === 0) return;\n\n    const verts = webGLData.points;\n    const length = points.length / 2;\n\n    // sort color\n    const color = hex2rgb(graphicsData.lineColor);\n    const alpha = graphicsData.lineAlpha;\n    const r = color[0] * alpha;\n    const g = color[1] * alpha;\n    const b = color[2] * alpha;\n\n    for (i = 1; i < length; i++)\n    {\n        const p1x = points[(i - 1) * 2];\n        const p1y = points[((i - 1) * 2) + 1];\n\n        const p2x = points[i * 2];\n        const p2y = points[(i * 2) + 1];\n\n        verts.push(p1x, p1y);\n        verts.push(r, g, b, alpha);\n\n        verts.push(p2x, p2y);\n        verts.push(r, g, b, alpha);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}