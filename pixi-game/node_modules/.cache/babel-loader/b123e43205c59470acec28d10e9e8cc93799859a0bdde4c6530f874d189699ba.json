{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n *\n * @class\n * @memberof PIXI\n */\nvar TimeLimiter = function () {\n  /**\n   * @param {number} maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame.\n   */\n  function TimeLimiter(maxMilliseconds) {\n    _classCallCheck(this, TimeLimiter);\n\n    /**\n     * The maximum milliseconds that can be spent preparing items each frame.\n     * @private\n     */\n    this.maxMilliseconds = maxMilliseconds;\n    /**\n     * The start time of the current frame.\n     * @type {number}\n     * @private\n     */\n    this.frameStart = 0;\n  }\n\n  /**\n   * Resets any counting properties to start fresh on a new frame.\n   */\n\n  TimeLimiter.prototype.beginFrame = function beginFrame() {\n    this.frameStart = Date.now();\n  };\n\n  /**\n   * Checks to see if another item can be uploaded. This should only be called once per item.\n   * @return {boolean} If the item is allowed to be uploaded.\n   */\n\n  TimeLimiter.prototype.allowedToUpload = function allowedToUpload() {\n    return Date.now() - this.frameStart < this.maxMilliseconds;\n  };\n  return TimeLimiter;\n}();\nexports.default = TimeLimiter;","map":{"version":3,"names":["TimeLimiter","maxMilliseconds","_classCallCheck","frameStart","beginFrame","Date","now","allowedToUpload"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/prepare/limiters/TimeLimiter.js"],"sourcesContent":["/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n *\n * @class\n * @memberof PIXI\n */\nexport default class TimeLimiter\n{\n    /**\n     * @param {number} maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame.\n     */\n    constructor(maxMilliseconds)\n    {\n        /**\n         * The maximum milliseconds that can be spent preparing items each frame.\n         * @private\n         */\n        this.maxMilliseconds = maxMilliseconds;\n        /**\n         * The start time of the current frame.\n         * @type {number}\n         * @private\n         */\n        this.frameStart = 0;\n    }\n\n    /**\n     * Resets any counting properties to start fresh on a new frame.\n     */\n    beginFrame()\n    {\n        this.frameStart = Date.now();\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @return {boolean} If the item is allowed to be uploaded.\n     */\n    allowedToUpload()\n    {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;;;;;;IAOqBA,W;EAEjB;;;EAGA,SAAAA,YAAYC,eAAZ,EACA;IAAAC,eAAA,OAAAF,WAAA;;IACI;;;;IAIA,KAAKC,eAAL,GAAuBA,eAAvB;IACA;;;;;IAKA,KAAKE,UAAL,GAAkB,CAAlB;EACH;;EAED;;;;wBAGAC,U,yBACA;IACI,KAAKD,UAAL,GAAkBE,IAAA,CAAKC,GAAL,EAAlB;EACH,C;;EAED;;;;;wBAIAC,e,8BACA;IACI,OAAOF,IAAA,CAAKC,GAAL,KAAa,KAAKH,UAAlB,GAA+B,KAAKF,eAA3C;EACH,C;;;kBAnCgBD,W"},"metadata":{},"sourceType":"script","externalDependencies":[]}