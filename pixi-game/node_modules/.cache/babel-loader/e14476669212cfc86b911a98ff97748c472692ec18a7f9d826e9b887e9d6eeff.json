{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _settings = require('../../../settings');\nvar _settings2 = _interopRequireDefault(_settings);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Creates a Canvas element of the given size.\n *\n * @class\n * @memberof PIXI\n */\nvar CanvasRenderTarget = function () {\n  /**\n   * @param {number} width - the width for the newly created canvas\n   * @param {number} height - the height for the newly created canvas\n   * @param {number} [resolution=1] - The resolution / device pixel ratio of the canvas\n   */\n  function CanvasRenderTarget(width, height, resolution) {\n    _classCallCheck(this, CanvasRenderTarget);\n\n    /**\n     * The Canvas object that belongs to this CanvasRenderTarget.\n     *\n     * @member {HTMLCanvasElement}\n     */\n    this.canvas = document.createElement('canvas');\n\n    /**\n     * A CanvasRenderingContext2D object representing a two-dimensional rendering context.\n     *\n     * @member {CanvasRenderingContext2D}\n     */\n    this.context = this.canvas.getContext('2d');\n    this.resolution = resolution || _settings2.default.RESOLUTION;\n    this.resize(width, height);\n  }\n\n  /**\n   * Clears the canvas that was created by the CanvasRenderTarget class.\n   *\n   * @private\n   */\n\n  CanvasRenderTarget.prototype.clear = function clear() {\n    this.context.setTransform(1, 0, 0, 1, 0, 0);\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  };\n\n  /**\n   * Resizes the canvas to the specified width and height.\n   *\n   * @param {number} width - the new width of the canvas\n   * @param {number} height - the new height of the canvas\n   */\n\n  CanvasRenderTarget.prototype.resize = function resize(width, height) {\n    this.canvas.width = width * this.resolution;\n    this.canvas.height = height * this.resolution;\n  };\n\n  /**\n   * Destroys this canvas.\n   *\n   */\n\n  CanvasRenderTarget.prototype.destroy = function destroy() {\n    this.context = null;\n    this.canvas = null;\n  };\n\n  /**\n   * The width of the canvas buffer in pixels.\n   *\n   * @member {number}\n   */\n\n  _createClass(CanvasRenderTarget, [{\n    key: 'width',\n    get: function get() {\n      return this.canvas.width;\n    },\n    set: function set(val)\n    // eslint-disable-line require-jsdoc\n    {\n      this.canvas.width = val;\n    }\n\n    /**\n     * The height of the canvas buffer in pixels.\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'height',\n    get: function get() {\n      return this.canvas.height;\n    },\n    set: function set(val)\n    // eslint-disable-line require-jsdoc\n    {\n      this.canvas.height = val;\n    }\n  }]);\n  return CanvasRenderTarget;\n}();\nexports.default = CanvasRenderTarget;","map":{"version":3,"names":["_settings","require","CanvasRenderTarget","width","height","resolution","_classCallCheck","canvas","document","createElement","context","getContext","_settings2","default","RESOLUTION","resize","clear","setTransform","clearRect","destroy","val"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/renderers/canvas/utils/CanvasRenderTarget.js"],"sourcesContent":["import settings from '../../../settings';\n\n/**\n * Creates a Canvas element of the given size.\n *\n * @class\n * @memberof PIXI\n */\nexport default class CanvasRenderTarget\n{\n    /**\n     * @param {number} width - the width for the newly created canvas\n     * @param {number} height - the height for the newly created canvas\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the canvas\n     */\n    constructor(width, height, resolution)\n    {\n        /**\n         * The Canvas object that belongs to this CanvasRenderTarget.\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.canvas = document.createElement('canvas');\n\n        /**\n         * A CanvasRenderingContext2D object representing a two-dimensional rendering context.\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.canvas.getContext('2d');\n\n        this.resolution = resolution || settings.RESOLUTION;\n\n        this.resize(width, height);\n    }\n\n    /**\n     * Clears the canvas that was created by the CanvasRenderTarget class.\n     *\n     * @private\n     */\n    clear()\n    {\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    /**\n     * Resizes the canvas to the specified width and height.\n     *\n     * @param {number} width - the new width of the canvas\n     * @param {number} height - the new height of the canvas\n     */\n    resize(width, height)\n    {\n        this.canvas.width = width * this.resolution;\n        this.canvas.height = height * this.resolution;\n    }\n\n    /**\n     * Destroys this canvas.\n     *\n     */\n    destroy()\n    {\n        this.context = null;\n        this.canvas = null;\n    }\n\n    /**\n     * The width of the canvas buffer in pixels.\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this.canvas.width;\n    }\n\n    set width(val) // eslint-disable-line require-jsdoc\n    {\n        this.canvas.width = val;\n    }\n\n    /**\n     * The height of the canvas buffer in pixels.\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this.canvas.height;\n    }\n\n    set height(val) // eslint-disable-line require-jsdoc\n    {\n        this.canvas.height = val;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;;;;;;;;;;;;;AAEA;;;;;;IAMqBC,kB;EAEjB;;;;;EAKA,SAAAA,mBAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,UAA3B,EACA;IAAAC,eAAA,OAAAJ,kBAAA;;IACI;;;;;IAKA,KAAKK,MAAL,GAAcC,QAAA,CAASC,aAAT,CAAuB,QAAvB,CAAd;;IAEA;;;;;IAKA,KAAKC,OAAL,GAAe,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAf;IAEA,KAAKN,UAAL,GAAkBA,UAAA,IAAcO,UAAA,CAAAC,OAAA,CAASC,UAAzC;IAEA,KAAKC,MAAL,CAAYZ,KAAZ,EAAmBC,MAAnB;EACH;;EAED;;;;;;+BAKAY,K,oBACA;IACI,KAAKN,OAAL,CAAaO,YAAb,CAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC;IACA,KAAKP,OAAL,CAAaQ,SAAb,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,KAAKX,MAAL,CAAYJ,KAAzC,EAAgD,KAAKI,MAAL,CAAYH,MAA5D;EACH,C;;EAED;;;;;;;+BAMAW,M,mBAAOZ,K,EAAOC,M,EACd;IACI,KAAKG,MAAL,CAAYJ,KAAZ,GAAoBA,KAAA,GAAQ,KAAKE,UAAjC;IACA,KAAKE,MAAL,CAAYH,MAAZ,GAAqBA,MAAA,GAAS,KAAKC,UAAnC;EACH,C;;EAED;;;;;+BAIAc,O,sBACA;IACI,KAAKT,OAAL,GAAe,IAAf;IACA,KAAKH,MAAL,GAAc,IAAd;EACH,C;;EAED;;;;;;;;wBAMA;MACI,OAAO,KAAKA,MAAL,CAAYJ,KAAnB;IACH,C;sBAESiB,G;IAAK;IACf;MACI,KAAKb,MAAL,CAAYJ,KAAZ,GAAoBiB,GAApB;IACH;;IAED;;;;;;;wBAMA;MACI,OAAO,KAAKb,MAAL,CAAYH,MAAnB;IACH,C;sBAEUgB,G;IAAK;IAChB;MACI,KAAKb,MAAL,CAAYH,MAAZ,GAAqBgB,GAArB;IACH;;;;kBAzFgBlB,kB"},"metadata":{},"sourceType":"script","externalDependencies":[]}