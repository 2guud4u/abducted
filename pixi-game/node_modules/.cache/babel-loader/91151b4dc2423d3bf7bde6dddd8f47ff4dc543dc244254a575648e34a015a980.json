{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar assets = require('@pixi/assets');\nvar core = require('@pixi/core');\nrequire('../parsers/index.js');\nvar parseKTX = require('../parsers/parseKTX.js');\nconst loadKTX = {\n  extension: {\n    type: core.ExtensionType.LoadParser,\n    priority: assets.LoaderParserPriority.High\n  },\n  name: \"loadKTX\",\n  test(url) {\n    return assets.checkExtension(url, \".ktx\");\n  },\n  async load(url, asset, loader) {\n    const response = await core.settings.ADAPTER.fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    const {\n      compressed,\n      uncompressed,\n      kvData\n    } = parseKTX.parseKTX(url, arrayBuffer);\n    const resources = compressed ?? uncompressed;\n    const options = {\n      mipmap: core.MIPMAP_MODES.OFF,\n      alphaMode: core.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n      resolution: core.utils.getResolutionOfUrl(url),\n      ...asset.data\n    };\n    const textures = resources.map(resource => {\n      if (resources === uncompressed) {\n        Object.assign(options, {\n          type: resource.type,\n          format: resource.format\n        });\n      }\n      const base = new core.BaseTexture(resource, options);\n      base.ktxKeyValueData = kvData;\n      return assets.createTexture(base, loader, url);\n    });\n    return textures.length === 1 ? textures[0] : textures;\n  },\n  unload(texture) {\n    if (Array.isArray(texture)) {\n      texture.forEach(t => t.destroy(true));\n    } else {\n      texture.destroy(true);\n    }\n  }\n};\ncore.extensions.add(loadKTX);\nexports.loadKTX = loadKTX;","map":{"version":3,"names":["loadKTX","extension","type","core","ExtensionType","LoadParser","priority","assets","LoaderParserPriority","High","name","test","url","checkExtension","load","asset","loader","response","settings","ADAPTER","fetch","arrayBuffer","compressed","uncompressed","kvData","parseKTX","resources","options","mipmap","MIPMAP_MODES","OFF","alphaMode","ALPHA_MODES","NO_PREMULTIPLIED_ALPHA","resolution","utils","getResolutionOfUrl","data","textures","map","resource","Object","assign","format","base","BaseTexture","ktxKeyValueData","createTexture","length","unload","texture","Array","isArray","forEach","t","destroy","extensions","add"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/compressed-textures/src/loaders/loadKTX.ts"],"sourcesContent":["import { checkExtension, createTexture, LoaderParserPriority } from '@pixi/assets';\nimport { ALPHA_MODES, BaseTexture, extensions, ExtensionType, MIPMAP_MODES, settings, utils } from '@pixi/core';\nimport { parseKTX } from '../parsers';\n\nimport type { LoadAsset, Loader, LoaderParser } from '@pixi/assets';\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\n\n/** Loads KTX textures! */\nexport const loadKTX = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    name: 'loadKTX',\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.ktx');\n    },\n\n    async load(url: string, asset: LoadAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        // get an array buffer...\n        const response = await settings.ADAPTER.fetch(url);\n\n        const arrayBuffer = await response.arrayBuffer();\n\n        const { compressed, uncompressed, kvData } = parseKTX(url, arrayBuffer);\n\n        const resources = compressed ?? uncompressed;\n\n        const options = {\n            mipmap: MIPMAP_MODES.OFF,\n            alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n            resolution: utils.getResolutionOfUrl(url),\n            ...asset.data,\n        };\n\n        const textures = resources.map((resource) =>\n        {\n            if (resources === uncompressed)\n            {\n                Object.assign(options, {\n                    type: (resource as typeof uncompressed[0]).type,\n                    format: (resource as typeof uncompressed[0]).format,\n                });\n            }\n\n            const base = new BaseTexture(resource, options);\n\n            base.ktxKeyValueData = kvData;\n\n            return createTexture(base, loader, url);\n        });\n\n        return textures.length === 1 ? textures[0] : textures;\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], IBaseTextureOptions>;\n\nextensions.add(loadKTX);\n"],"mappings":";;;;;;;;;AAQO,MAAMA,OAAU;EACnBC,SAAW;IACPC,IAAA,EAAMC,IAAA,CAAAC,aAAc,CAAAC,UAAA;IACpBC,QAAA,EAAUC,MAAA,CAAAC,oBAAqB,CAAAC;EAAA,CACnC;EAEAC,IAAM;EAENC,KAAKC,GACL;IACW,OAAAL,MAAA,CAAAM,cAAA,CAAeD,GAAA,EAAK,MAAM;EAAA,CACrC;EAEA,MAAME,KAAKF,GAAa,EAAAG,KAAA,EAAkBC,MAC1C;IAEI,MAAMC,QAAW,SAAMd,IAAA,CAAAe,QAAS,CAAAC,OAAA,CAAQC,KAAA,CAAMR,GAAG;IAE3C,MAAAS,WAAA,GAAc,MAAMJ,QAAA,CAASI,WAAY;IAE/C,MAAM;MAAEC,UAAY;MAAAC,YAAA;MAAcC;IAAW,IAAAC,QAAA,CAAAA,QAAA,CAASb,GAAA,EAAKS,WAAW;IAEtE,MAAMK,SAAA,GAAYJ,UAAc,IAAAC,YAAA;IAEhC,MAAMI,OAAU;MACZC,MAAA,EAAQzB,IAAA,CAAA0B,YAAa,CAAAC,GAAA;MACrBC,SAAA,EAAW5B,IAAA,CAAA6B,WAAY,CAAAC,sBAAA;MACvBC,UAAA,EAAY/B,IAAA,CAAAgC,KAAM,CAAAC,kBAAA,CAAmBxB,GAAG;MACxC,GAAGG,KAAM,CAAAsB;IAAA,CACb;IAEA,MAAMC,QAAW,GAAAZ,SAAA,CAAUa,GAAI,CAACC,QAChC;MACI,IAAId,SAAA,KAAcH,YAClB;QACIkB,MAAA,CAAOC,MAAA,CAAOf,OAAS;UACnBzB,IAAA,EAAOsC,QAAoC,CAAAtC,IAAA;UAC3CyC,MAAA,EAASH,QAAoC,CAAAG;QAAA,CAChD;MAAA;MAGL,MAAMC,IAAO,OAAIzC,IAAA,CAAA0C,WAAY,CAAAL,QAAA,EAAUb,OAAO;MAE9CiB,IAAA,CAAKE,eAAkB,GAAAtB,MAAA;MAEhB,OAAAjB,MAAA,CAAAwC,aAAA,CAAcH,IAAM,EAAA5B,MAAA,EAAQJ,GAAG;IAAA,CACzC;IAED,OAAO0B,QAAS,CAAAU,MAAA,KAAW,CAAI,GAAAV,QAAA,CAAS,CAAK,IAAAA,QAAA;EAAA,CACjD;EAEAW,OAAOC,OACP;IACQ,IAAAC,KAAA,CAAMC,OAAQ,CAAAF,OAAO,CACzB;MACIA,OAAA,CAAQG,OAAA,CAASC,CAAA,IAAMA,CAAE,CAAAC,OAAA,CAAQ,IAAI,CAAC;IAAA,CAG1C;MACIL,OAAA,CAAQK,OAAA,CAAQ,IAAI;IAAA;EACxB;AAGR;AAEApD,IAAA,CAAAqD,UAAA,CAAWC,GAAA,CAAIzD,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}