{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _CanvasRenderer = require('../../renderers/canvas/CanvasRenderer');\nvar _CanvasRenderer2 = _interopRequireDefault(_CanvasRenderer);\nvar _const = require('../../const');\nvar _math = require('../../math');\nvar _CanvasTinter = require('./CanvasTinter');\nvar _CanvasTinter2 = _interopRequireDefault(_CanvasTinter);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar canvasRenderWorldTransform = new _math.Matrix();\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasSpriteRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/CanvasSpriteRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching sprites.\n *\n * @class\n * @private\n * @memberof PIXI\n */\n\nvar CanvasSpriteRenderer = function () {\n  /**\n   * @param {PIXI.WebGLRenderer} renderer -The renderer sprite this batch works for.\n   */\n  function CanvasSpriteRenderer(renderer) {\n    _classCallCheck(this, CanvasSpriteRenderer);\n    this.renderer = renderer;\n  }\n\n  /**\n   * Renders the sprite object.\n   *\n   * @param {PIXI.Sprite} sprite - the sprite to render when using this spritebatch\n   */\n\n  CanvasSpriteRenderer.prototype.render = function render(sprite) {\n    var texture = sprite._texture;\n    var renderer = this.renderer;\n    var width = texture._frame.width;\n    var height = texture._frame.height;\n    var wt = sprite.transform.worldTransform;\n    var dx = 0;\n    var dy = 0;\n    if (texture.orig.width <= 0 || texture.orig.height <= 0 || !texture.baseTexture.source) {\n      return;\n    }\n    renderer.setBlendMode(sprite.blendMode);\n\n    //  Ignore null sources\n    if (texture.valid) {\n      renderer.context.globalAlpha = sprite.worldAlpha;\n\n      // If smoothingEnabled is supported and we need to change the smoothing property for sprite texture\n      var smoothingEnabled = texture.baseTexture.scaleMode === _const.SCALE_MODES.LINEAR;\n      if (renderer.smoothProperty && renderer.context[renderer.smoothProperty] !== smoothingEnabled) {\n        renderer.context[renderer.smoothProperty] = smoothingEnabled;\n      }\n      if (texture.trim) {\n        dx = texture.trim.width / 2 + texture.trim.x - sprite.anchor.x * texture.orig.width;\n        dy = texture.trim.height / 2 + texture.trim.y - sprite.anchor.y * texture.orig.height;\n      } else {\n        dx = (0.5 - sprite.anchor.x) * texture.orig.width;\n        dy = (0.5 - sprite.anchor.y) * texture.orig.height;\n      }\n      if (texture.rotate) {\n        wt.copy(canvasRenderWorldTransform);\n        wt = canvasRenderWorldTransform;\n        _math.GroupD8.matrixAppendRotationInv(wt, texture.rotate, dx, dy);\n        // the anchor has already been applied above, so lets set it to zero\n        dx = 0;\n        dy = 0;\n      }\n      dx -= width / 2;\n      dy -= height / 2;\n\n      // Allow for pixel rounding\n      if (renderer.roundPixels) {\n        renderer.context.setTransform(wt.a, wt.b, wt.c, wt.d, wt.tx * renderer.resolution | 0, wt.ty * renderer.resolution | 0);\n        dx = dx | 0;\n        dy = dy | 0;\n      } else {\n        renderer.context.setTransform(wt.a, wt.b, wt.c, wt.d, wt.tx * renderer.resolution, wt.ty * renderer.resolution);\n      }\n      var resolution = texture.baseTexture.resolution;\n      if (sprite.tint !== 0xFFFFFF) {\n        if (sprite.cachedTint !== sprite.tint || sprite.tintedTexture.tintId !== sprite._texture._updateID) {\n          sprite.cachedTint = sprite.tint;\n\n          // TODO clean up caching - how to clean up the caches?\n          sprite.tintedTexture = _CanvasTinter2.default.getTintedTexture(sprite, sprite.tint);\n        }\n        renderer.context.drawImage(sprite.tintedTexture, 0, 0, width * resolution, height * resolution, dx * renderer.resolution, dy * renderer.resolution, width * renderer.resolution, height * renderer.resolution);\n      } else {\n        renderer.context.drawImage(texture.baseTexture.source, texture._frame.x * resolution, texture._frame.y * resolution, width * resolution, height * resolution, dx * renderer.resolution, dy * renderer.resolution, width * renderer.resolution, height * renderer.resolution);\n      }\n    }\n  };\n\n  /**\n   * destroy the sprite object.\n   *\n   */\n\n  CanvasSpriteRenderer.prototype.destroy = function destroy() {\n    this.renderer = null;\n  };\n  return CanvasSpriteRenderer;\n}();\nexports.default = CanvasSpriteRenderer;\n_CanvasRenderer2.default.registerPlugin('sprite', CanvasSpriteRenderer);","map":{"version":3,"names":["_CanvasRenderer","require","_const","_math","_CanvasTinter","canvasRenderWorldTransform","Matrix","CanvasSpriteRenderer","renderer","_classCallCheck","render","sprite","texture","_texture","width","_frame","height","wt","transform","worldTransform","dx","dy","orig","baseTexture","source","setBlendMode","blendMode","valid","context","globalAlpha","worldAlpha","smoothingEnabled","scaleMode","SCALE_MODES","LINEAR","smoothProperty","trim","x","anchor","y","rotate","copy","GroupD8","matrixAppendRotationInv","roundPixels","setTransform","a","b","c","d","tx","resolution","ty","tint","cachedTint","tintedTexture","tintId","_updateID","_CanvasTinter2","default","getTintedTexture","drawImage","destroy","_CanvasRenderer2","registerPlugin"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/sprites/canvas/CanvasSpriteRenderer.js"],"sourcesContent":["import CanvasRenderer from '../../renderers/canvas/CanvasRenderer';\nimport { SCALE_MODES } from '../../const';\nimport { Matrix, GroupD8 } from '../../math';\nimport CanvasTinter from './CanvasTinter';\n\nconst canvasRenderWorldTransform = new Matrix();\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasSpriteRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/CanvasSpriteRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching sprites.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class CanvasSpriteRenderer\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer -The renderer sprite this batch works for.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders the sprite object.\n     *\n     * @param {PIXI.Sprite} sprite - the sprite to render when using this spritebatch\n     */\n    render(sprite)\n    {\n        const texture = sprite._texture;\n        const renderer = this.renderer;\n\n        const width = texture._frame.width;\n        const height = texture._frame.height;\n\n        let wt = sprite.transform.worldTransform;\n        let dx = 0;\n        let dy = 0;\n\n        if (texture.orig.width <= 0 || texture.orig.height <= 0 || !texture.baseTexture.source)\n        {\n            return;\n        }\n\n        renderer.setBlendMode(sprite.blendMode);\n\n        //  Ignore null sources\n        if (texture.valid)\n        {\n            renderer.context.globalAlpha = sprite.worldAlpha;\n\n            // If smoothingEnabled is supported and we need to change the smoothing property for sprite texture\n            const smoothingEnabled = texture.baseTexture.scaleMode === SCALE_MODES.LINEAR;\n\n            if (renderer.smoothProperty && renderer.context[renderer.smoothProperty] !== smoothingEnabled)\n            {\n                renderer.context[renderer.smoothProperty] = smoothingEnabled;\n            }\n\n            if (texture.trim)\n            {\n                dx = (texture.trim.width / 2) + texture.trim.x - (sprite.anchor.x * texture.orig.width);\n                dy = (texture.trim.height / 2) + texture.trim.y - (sprite.anchor.y * texture.orig.height);\n            }\n            else\n            {\n                dx = (0.5 - sprite.anchor.x) * texture.orig.width;\n                dy = (0.5 - sprite.anchor.y) * texture.orig.height;\n            }\n\n            if (texture.rotate)\n            {\n                wt.copy(canvasRenderWorldTransform);\n                wt = canvasRenderWorldTransform;\n                GroupD8.matrixAppendRotationInv(wt, texture.rotate, dx, dy);\n                // the anchor has already been applied above, so lets set it to zero\n                dx = 0;\n                dy = 0;\n            }\n\n            dx -= width / 2;\n            dy -= height / 2;\n\n            // Allow for pixel rounding\n            if (renderer.roundPixels)\n            {\n                renderer.context.setTransform(\n                    wt.a,\n                    wt.b,\n                    wt.c,\n                    wt.d,\n                    (wt.tx * renderer.resolution) | 0,\n                    (wt.ty * renderer.resolution) | 0\n                );\n\n                dx = dx | 0;\n                dy = dy | 0;\n            }\n            else\n            {\n                renderer.context.setTransform(\n                    wt.a,\n                    wt.b,\n                    wt.c,\n                    wt.d,\n                    wt.tx * renderer.resolution,\n                    wt.ty * renderer.resolution\n                );\n            }\n\n            const resolution = texture.baseTexture.resolution;\n\n            if (sprite.tint !== 0xFFFFFF)\n            {\n                if (sprite.cachedTint !== sprite.tint || sprite.tintedTexture.tintId !== sprite._texture._updateID)\n                {\n                    sprite.cachedTint = sprite.tint;\n\n                    // TODO clean up caching - how to clean up the caches?\n                    sprite.tintedTexture = CanvasTinter.getTintedTexture(sprite, sprite.tint);\n                }\n\n                renderer.context.drawImage(\n                    sprite.tintedTexture,\n                    0,\n                    0,\n                    width * resolution,\n                    height * resolution,\n                    dx * renderer.resolution,\n                    dy * renderer.resolution,\n                    width * renderer.resolution,\n                    height * renderer.resolution\n                );\n            }\n            else\n            {\n                renderer.context.drawImage(\n                    texture.baseTexture.source,\n                    texture._frame.x * resolution,\n                    texture._frame.y * resolution,\n                    width * resolution,\n                    height * resolution,\n                    dx * renderer.resolution,\n                    dy * renderer.resolution,\n                    width * renderer.resolution,\n                    height * renderer.resolution\n                );\n            }\n        }\n    }\n\n    /**\n     * destroy the sprite object.\n     *\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n\nCanvasRenderer.registerPlugin('sprite', CanvasSpriteRenderer);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}