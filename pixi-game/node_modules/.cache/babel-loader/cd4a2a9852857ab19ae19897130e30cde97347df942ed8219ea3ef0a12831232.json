{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _const = require('../const.js');\nvar Point = require('../Point.js');\nconst tempPoints = [new Point.Point(), new Point.Point(), new Point.Point(), new Point.Point()];\nclass Rectangle {\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.x = Number(x);\n    this.y = Number(y);\n    this.width = Number(width);\n    this.height = Number(height);\n    this.type = _const.SHAPES.RECT;\n  }\n  get left() {\n    return this.x;\n  }\n  get right() {\n    return this.x + this.width;\n  }\n  get top() {\n    return this.y;\n  }\n  get bottom() {\n    return this.y + this.height;\n  }\n  static get EMPTY() {\n    return new Rectangle(0, 0, 0, 0);\n  }\n  clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  }\n  copyFrom(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  }\n  copyTo(rectangle) {\n    rectangle.x = this.x;\n    rectangle.y = this.y;\n    rectangle.width = this.width;\n    rectangle.height = this.height;\n    return rectangle;\n  }\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x < this.x + this.width) {\n      if (y >= this.y && y < this.y + this.height) {\n        return true;\n      }\n    }\n    return false;\n  }\n  intersects(other, transform) {\n    if (!transform) {\n      const x02 = this.x < other.x ? other.x : this.x;\n      const x12 = this.right > other.right ? other.right : this.right;\n      if (x12 <= x02) {\n        return false;\n      }\n      const y02 = this.y < other.y ? other.y : this.y;\n      const y12 = this.bottom > other.bottom ? other.bottom : this.bottom;\n      return y12 > y02;\n    }\n    const x0 = this.left;\n    const x1 = this.right;\n    const y0 = this.top;\n    const y1 = this.bottom;\n    if (x1 <= x0 || y1 <= y0) {\n      return false;\n    }\n    const lt = tempPoints[0].set(other.left, other.top);\n    const lb = tempPoints[1].set(other.left, other.bottom);\n    const rt = tempPoints[2].set(other.right, other.top);\n    const rb = tempPoints[3].set(other.right, other.bottom);\n    if (rt.x <= lt.x || lb.y <= lt.y) {\n      return false;\n    }\n    const s = Math.sign(transform.a * transform.d - transform.b * transform.c);\n    if (s === 0) {\n      return false;\n    }\n    transform.apply(lt, lt);\n    transform.apply(lb, lb);\n    transform.apply(rt, rt);\n    transform.apply(rb, rb);\n    if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0 || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1 || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0 || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1) {\n      return false;\n    }\n    const nx = s * (lb.y - lt.y);\n    const ny = s * (lt.x - lb.x);\n    const n00 = nx * x0 + ny * y0;\n    const n10 = nx * x1 + ny * y0;\n    const n01 = nx * x0 + ny * y1;\n    const n11 = nx * x1 + ny * y1;\n    if (Math.max(n00, n10, n01, n11) <= nx * lt.x + ny * lt.y || Math.min(n00, n10, n01, n11) >= nx * rb.x + ny * rb.y) {\n      return false;\n    }\n    const mx = s * (lt.y - rt.y);\n    const my = s * (rt.x - lt.x);\n    const m00 = mx * x0 + my * y0;\n    const m10 = mx * x1 + my * y0;\n    const m01 = mx * x0 + my * y1;\n    const m11 = mx * x1 + my * y1;\n    if (Math.max(m00, m10, m01, m11) <= mx * lt.x + my * lt.y || Math.min(m00, m10, m01, m11) >= mx * rb.x + my * rb.y) {\n      return false;\n    }\n    return true;\n  }\n  pad() {\n    let paddingX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let paddingY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : paddingX;\n    this.x -= paddingX;\n    this.y -= paddingY;\n    this.width += paddingX * 2;\n    this.height += paddingY * 2;\n    return this;\n  }\n  fit(rectangle) {\n    const x1 = Math.max(this.x, rectangle.x);\n    const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n    const y1 = Math.max(this.y, rectangle.y);\n    const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = Math.max(x2 - x1, 0);\n    this.y = y1;\n    this.height = Math.max(y2 - y1, 0);\n    return this;\n  }\n  ceil() {\n    let resolution = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-3;\n    const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n    const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n    this.x = Math.floor((this.x + eps) * resolution) / resolution;\n    this.y = Math.floor((this.y + eps) * resolution) / resolution;\n    this.width = x2 - this.x;\n    this.height = y2 - this.y;\n    return this;\n  }\n  enlarge(rectangle) {\n    const x1 = Math.min(this.x, rectangle.x);\n    const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n    const y1 = Math.min(this.y, rectangle.y);\n    const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = x2 - x1;\n    this.y = y1;\n    this.height = y2 - y1;\n    return this;\n  }\n  toString() {\n    return `[@pixi/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n  }\n}\nexports.Rectangle = Rectangle;","map":{"version":3,"names":["tempPoints","Point","Rectangle","constructor","x","arguments","length","undefined","y","width","height","Number","type","_const","SHAPES","RECT","left","right","top","bottom","EMPTY","clone","copyFrom","rectangle","copyTo","contains","intersects","other","transform","x02","x12","y02","y12","x0","x1","y0","y1","lt","set","lb","rt","rb","s","Math","sign","a","d","b","c","apply","max","min","nx","ny","n00","n10","n01","n11","mx","my","m00","m10","m01","m11","pad","paddingX","paddingY","fit","x2","y2","ceil","resolution","eps","floor","enlarge","toString"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/math/src/shapes/Rectangle.ts"],"sourcesContent":["import { SHAPES } from '../const';\nimport { Point } from '../Point';\n\nimport type { Matrix } from '../Matrix';\n\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Rectangle extends GlobalMixins.Rectangle {}\n\n/**\n * Size object, contains width and height\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n * @memberof PIXI\n */\nexport class Rectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RECT\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RECT;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rectangle\n     * @param width - The overall width of the rectangle\n     * @param height - The overall height of the rectangle\n     */\n    constructor(x: string | number = 0, y: string | number = 0, width: string | number = 0, height: string | number = 0)\n    {\n        this.x = Number(x);\n        this.y = Number(y);\n        this.width = Number(width);\n        this.height = Number(height);\n        this.type = SHAPES.RECT;\n    }\n\n    /** Returns the left edge of the rectangle. */\n    get left(): number\n    {\n        return this.x;\n    }\n\n    /** Returns the right edge of the rectangle. */\n    get right(): number\n    {\n        return this.x + this.width;\n    }\n\n    /** Returns the top edge of the rectangle. */\n    get top(): number\n    {\n        return this.y;\n    }\n\n    /** Returns the bottom edge of the rectangle. */\n    get bottom(): number\n    {\n        return this.y + this.height;\n    }\n\n    /** A constant empty rectangle. */\n    static get EMPTY(): Rectangle\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     * @returns a copy of the rectangle\n     */\n    clone(): Rectangle\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     * @param rectangle - The rectangle to copy from.\n     * @returns Returns itself.\n     */\n    copyFrom(rectangle: Rectangle): Rectangle\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     * @param rectangle - The rectangle to copy to.\n     * @returns Returns given parameter.\n     */\n    copyTo(rectangle: Rectangle): Rectangle\n    {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n     * Returns true only if the area of the intersection is >0, this means that Rectangles\n     * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n     * (width or height equal to zero) can't intersect any other rectangle.\n     * @param {Rectangle} other - The Rectangle to intersect with `this`.\n     * @param {Matrix} transform - The transformation matrix of `other`.\n     * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n     */\n    intersects(other: Rectangle, transform?: Matrix): boolean\n    {\n        if (!transform)\n        {\n            const x0 = this.x < other.x ? other.x : this.x;\n            const x1 = this.right > other.right ? other.right : this.right;\n\n            if (x1 <= x0)\n            {\n                return false;\n            }\n\n            const y0 = this.y < other.y ? other.y : this.y;\n            const y1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n\n            return y1 > y0;\n        }\n\n        const x0 = this.left;\n        const x1 = this.right;\n        const y0 = this.top;\n        const y1 = this.bottom;\n\n        if (x1 <= x0 || y1 <= y0)\n        {\n            return false;\n        }\n\n        const lt = tempPoints[0].set(other.left, other.top);\n        const lb = tempPoints[1].set(other.left, other.bottom);\n        const rt = tempPoints[2].set(other.right, other.top);\n        const rb = tempPoints[3].set(other.right, other.bottom);\n\n        if (rt.x <= lt.x || lb.y <= lt.y)\n        {\n            return false;\n        }\n\n        const s = Math.sign((transform.a * transform.d) - (transform.b * transform.c));\n\n        if (s === 0)\n        {\n            return false;\n        }\n\n        transform.apply(lt, lt);\n        transform.apply(lb, lb);\n        transform.apply(rt, rt);\n        transform.apply(rb, rb);\n\n        if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0\n            || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1\n            || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0\n            || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1)\n        {\n            return false;\n        }\n\n        const nx = s * (lb.y - lt.y);\n        const ny = s * (lt.x - lb.x);\n        const n00 = (nx * x0) + (ny * y0);\n        const n10 = (nx * x1) + (ny * y0);\n        const n01 = (nx * x0) + (ny * y1);\n        const n11 = (nx * x1) + (ny * y1);\n\n        if (Math.max(n00, n10, n01, n11) <= (nx * lt.x) + (ny * lt.y)\n            || Math.min(n00, n10, n01, n11) >= (nx * rb.x) + (ny * rb.y))\n        {\n            return false;\n        }\n\n        const mx = s * (lt.y - rt.y);\n        const my = s * (rt.x - lt.x);\n        const m00 = (mx * x0) + (my * y0);\n        const m10 = (mx * x1) + (my * y0);\n        const m01 = (mx * x0) + (my * y1);\n        const m11 = (mx * x1) + (my * y1);\n\n        if (Math.max(m00, m10, m01, m11) <= (mx * lt.x) + (my * lt.y)\n            || Math.min(m00, m10, m01, m11) >= (mx * rb.x) + (my * rb.y))\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     * @returns Returns itself.\n     */\n    pad(paddingX = 0, paddingY = paddingX): this\n    {\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n\n        return this;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     * @param rectangle - The rectangle to fit.\n     * @returns Returns itself.\n     */\n    fit(rectangle: Rectangle): this\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n\n        return this;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     * @param resolution - resolution\n     * @param eps - precision\n     * @returns Returns itself.\n     */\n    ceil(resolution = 1, eps = 0.001): this\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n\n        return this;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     * @param rectangle - The rectangle to include.\n     * @returns Returns itself.\n     */\n    enlarge(rectangle: Rectangle): this\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}