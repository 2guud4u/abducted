{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * DisplayObjects with the {@link PIXI.interaction.interactiveTarget} mixin use this class to track interactions\n *\n * @class\n * @private\n * @memberof PIXI.interaction\n */\nvar InteractionTrackingData = function () {\n  /**\n   * @param {number} pointerId - Unique pointer id of the event\n   */\n  function InteractionTrackingData(pointerId) {\n    _classCallCheck(this, InteractionTrackingData);\n    this._pointerId = pointerId;\n    this._flags = InteractionTrackingData.FLAGS.NONE;\n  }\n\n  /**\n   *\n   * @private\n   * @param {number} flag - The interaction flag to set\n   * @param {boolean} yn - Should the flag be set or unset\n   */\n\n  InteractionTrackingData.prototype._doSet = function _doSet(flag, yn) {\n    if (yn) {\n      this._flags = this._flags | flag;\n    } else {\n      this._flags = this._flags & ~flag;\n    }\n  };\n\n  /**\n   * Unique pointer id of the event\n   *\n   * @readonly\n   * @member {number}\n   */\n\n  _createClass(InteractionTrackingData, [{\n    key: \"pointerId\",\n    get: function get() {\n      return this._pointerId;\n    }\n\n    /**\n     * State of the tracking data, expressed as bit flags\n     *\n     * @member {number}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n  }, {\n    key: \"flags\",\n    get: function get() {\n      return this._flags;\n    }\n\n    /**\n     * Set the flags for the tracking data\n     *\n     * @param {number} flags - Flags to set\n     */,\n\n    set: function set(flags) {\n      this._flags = flags;\n    }\n\n    /**\n     * Is the tracked event inactive (not over or down)?\n     *\n     * @member {number}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n  }, {\n    key: \"none\",\n    get: function get() {\n      return this._flags === this.constructor.FLAGS.NONE;\n    }\n\n    /**\n     * Is the tracked event over the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n  }, {\n    key: \"over\",\n    get: function get() {\n      return (this._flags & this.constructor.FLAGS.OVER) !== 0;\n    }\n\n    /**\n     * Set the over flag\n     *\n     * @param {boolean} yn - Is the event over?\n     */,\n\n    set: function set(yn) {\n      this._doSet(this.constructor.FLAGS.OVER, yn);\n    }\n\n    /**\n     * Did the right mouse button come down in the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n  }, {\n    key: \"rightDown\",\n    get: function get() {\n      return (this._flags & this.constructor.FLAGS.RIGHT_DOWN) !== 0;\n    }\n\n    /**\n     * Set the right down flag\n     *\n     * @param {boolean} yn - Is the right mouse button down?\n     */,\n\n    set: function set(yn) {\n      this._doSet(this.constructor.FLAGS.RIGHT_DOWN, yn);\n    }\n\n    /**\n     * Did the left mouse button come down in the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n  }, {\n    key: \"leftDown\",\n    get: function get() {\n      return (this._flags & this.constructor.FLAGS.LEFT_DOWN) !== 0;\n    }\n\n    /**\n     * Set the left down flag\n     *\n     * @param {boolean} yn - Is the left mouse button down?\n     */,\n\n    set: function set(yn) {\n      this._doSet(this.constructor.FLAGS.LEFT_DOWN, yn);\n    }\n  }]);\n  return InteractionTrackingData;\n}();\nexports.default = InteractionTrackingData;\nInteractionTrackingData.FLAGS = Object.freeze({\n  NONE: 0,\n  OVER: 1 << 0,\n  LEFT_DOWN: 1 << 1,\n  RIGHT_DOWN: 1 << 2\n});","map":{"version":3,"names":["InteractionTrackingData","pointerId","_classCallCheck","_pointerId","_flags","FLAGS","NONE","_doSet","flag","yn","flags","constructor","OVER","RIGHT_DOWN","LEFT_DOWN","Object","freeze"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/interaction/InteractionTrackingData.js"],"sourcesContent":["/**\n * DisplayObjects with the {@link PIXI.interaction.interactiveTarget} mixin use this class to track interactions\n *\n * @class\n * @private\n * @memberof PIXI.interaction\n */\nexport default class InteractionTrackingData\n{\n    /**\n     * @param {number} pointerId - Unique pointer id of the event\n     */\n    constructor(pointerId)\n    {\n        this._pointerId = pointerId;\n        this._flags = InteractionTrackingData.FLAGS.NONE;\n    }\n\n    /**\n     *\n     * @private\n     * @param {number} flag - The interaction flag to set\n     * @param {boolean} yn - Should the flag be set or unset\n     */\n    _doSet(flag, yn)\n    {\n        if (yn)\n        {\n            this._flags = this._flags | flag;\n        }\n        else\n        {\n            this._flags = this._flags & (~flag);\n        }\n    }\n\n    /**\n     * Unique pointer id of the event\n     *\n     * @readonly\n     * @member {number}\n     */\n    get pointerId()\n    {\n        return this._pointerId;\n    }\n\n    /**\n     * State of the tracking data, expressed as bit flags\n     *\n     * @member {number}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n    get flags()\n    {\n        return this._flags;\n    }\n\n    /**\n     * Set the flags for the tracking data\n     *\n     * @param {number} flags - Flags to set\n     */\n    set flags(flags)\n    {\n        this._flags = flags;\n    }\n\n    /**\n     * Is the tracked event inactive (not over or down)?\n     *\n     * @member {number}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n    get none()\n    {\n        return this._flags === this.constructor.FLAGS.NONE;\n    }\n\n    /**\n     * Is the tracked event over the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n    get over()\n    {\n        return (this._flags & this.constructor.FLAGS.OVER) !== 0;\n    }\n\n    /**\n     * Set the over flag\n     *\n     * @param {boolean} yn - Is the event over?\n     */\n    set over(yn)\n    {\n        this._doSet(this.constructor.FLAGS.OVER, yn);\n    }\n\n    /**\n     * Did the right mouse button come down in the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n    get rightDown()\n    {\n        return (this._flags & this.constructor.FLAGS.RIGHT_DOWN) !== 0;\n    }\n\n    /**\n     * Set the right down flag\n     *\n     * @param {boolean} yn - Is the right mouse button down?\n     */\n    set rightDown(yn)\n    {\n        this._doSet(this.constructor.FLAGS.RIGHT_DOWN, yn);\n    }\n\n    /**\n     * Did the left mouse button come down in the DisplayObject?\n     *\n     * @member {boolean}\n     * @memberof PIXI.interaction.InteractionTrackingData#\n     */\n    get leftDown()\n    {\n        return (this._flags & this.constructor.FLAGS.LEFT_DOWN) !== 0;\n    }\n\n    /**\n     * Set the left down flag\n     *\n     * @param {boolean} yn - Is the left mouse button down?\n     */\n    set leftDown(yn)\n    {\n        this._doSet(this.constructor.FLAGS.LEFT_DOWN, yn);\n    }\n}\n\nInteractionTrackingData.FLAGS = Object.freeze({\n    NONE: 0,\n    OVER: 1 << 0,\n    LEFT_DOWN: 1 << 1,\n    RIGHT_DOWN: 1 << 2,\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;IAOqBA,uB;EAEjB;;;EAGA,SAAAA,wBAAYC,SAAZ,EACA;IAAAC,eAAA,OAAAF,uBAAA;IACI,KAAKG,UAAL,GAAkBF,SAAlB;IACA,KAAKG,MAAL,GAAcJ,uBAAA,CAAwBK,KAAxB,CAA8BC,IAA5C;EACH;;EAED;;;;;;;oCAMAC,M,mBAAOC,I,EAAMC,E,EACb;IACI,IAAIA,EAAJ,EACA;MACI,KAAKL,MAAL,GAAc,KAAKA,MAAL,GAAcI,IAA5B;IACH,CAHD,MAKA;MACI,KAAKJ,MAAL,GAAc,KAAKA,MAAL,GAAe,CAACI,IAA9B;IACH;EACJ,C;;EAED;;;;;;;;;wBAOA;MACI,OAAO,KAAKL,UAAZ;IACH;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAKC,MAAZ;IACH;;IAED;;;;OAAA;;sBAKUM,K,EACV;MACI,KAAKN,MAAL,GAAcM,KAAd;IACH;;IAED;;;;;;;;wBAOA;MACI,OAAO,KAAKN,MAAL,KAAgB,KAAKO,WAAL,CAAiBN,KAAjB,CAAuBC,IAA9C;IACH;;IAED;;;;;;;;wBAOA;MACI,OAAO,CAAC,KAAKF,MAAL,GAAc,KAAKO,WAAL,CAAiBN,KAAjB,CAAuBO,IAAtC,MAAgD,CAAvD;IACH;;IAED;;;;OAAA;;sBAKSH,E,EACT;MACI,KAAKF,MAAL,CAAY,KAAKI,WAAL,CAAiBN,KAAjB,CAAuBO,IAAnC,EAAyCH,EAAzC;IACH;;IAED;;;;;;;;wBAOA;MACI,OAAO,CAAC,KAAKL,MAAL,GAAc,KAAKO,WAAL,CAAiBN,KAAjB,CAAuBQ,UAAtC,MAAsD,CAA7D;IACH;;IAED;;;;OAAA;;sBAKcJ,E,EACd;MACI,KAAKF,MAAL,CAAY,KAAKI,WAAL,CAAiBN,KAAjB,CAAuBQ,UAAnC,EAA+CJ,EAA/C;IACH;;IAED;;;;;;;;wBAOA;MACI,OAAO,CAAC,KAAKL,MAAL,GAAc,KAAKO,WAAL,CAAiBN,KAAjB,CAAuBS,SAAtC,MAAqD,CAA5D;IACH;;IAED;;;;OAAA;;sBAKaL,E,EACb;MACI,KAAKF,MAAL,CAAY,KAAKI,WAAL,CAAiBN,KAAjB,CAAuBS,SAAnC,EAA8CL,EAA9C;IACH;;;;kBArIgBT,uB;AAwIrBA,uBAAA,CAAwBK,KAAxB,GAAgCU,MAAA,CAAOC,MAAP,CAAc;EAC1CV,IAAA,EAAM,CADoC;EAE1CM,IAAA,EAAM,KAAK,CAF+B;EAG1CE,SAAA,EAAW,KAAK,CAH0B;EAI1CD,UAAA,EAAY,KAAK;AAJyB,CAAd,CAAhC"},"metadata":{},"sourceType":"script","externalDependencies":[]}