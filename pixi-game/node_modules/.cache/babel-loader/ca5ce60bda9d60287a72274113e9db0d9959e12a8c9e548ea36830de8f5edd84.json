{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = buildPoly;\nvar _buildLine = require('./buildLine');\nvar _buildLine2 = _interopRequireDefault(_buildLine);\nvar _utils = require('../../../utils');\nvar _earcut = require('earcut');\nvar _earcut2 = _interopRequireDefault(_earcut);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nfunction buildPoly(graphicsData, webGLData, webGLDataNativeLines) {\n  graphicsData.points = graphicsData.shape.points.slice();\n  var points = graphicsData.points;\n  if (graphicsData.fill && points.length >= 6) {\n    var holeArray = [];\n    // Process holes..\n    var holes = graphicsData.holes;\n    for (var i = 0; i < holes.length; i++) {\n      var hole = holes[i];\n      holeArray.push(points.length / 2);\n      points = points.concat(hole.points);\n    }\n\n    // get first and last point.. figure out the middle!\n    var verts = webGLData.points;\n    var indices = webGLData.indices;\n    var length = points.length / 2;\n\n    // sort color\n    var color = (0, _utils.hex2rgb)(graphicsData.fillColor);\n    var alpha = graphicsData.fillAlpha;\n    var r = color[0] * alpha;\n    var g = color[1] * alpha;\n    var b = color[2] * alpha;\n    var triangles = (0, _earcut2.default)(points, holeArray, 2);\n    if (!triangles) {\n      return;\n    }\n    var vertPos = verts.length / 6;\n    for (var _i = 0; _i < triangles.length; _i += 3) {\n      indices.push(triangles[_i] + vertPos);\n      indices.push(triangles[_i] + vertPos);\n      indices.push(triangles[_i + 1] + vertPos);\n      indices.push(triangles[_i + 2] + vertPos);\n      indices.push(triangles[_i + 2] + vertPos);\n    }\n    for (var _i2 = 0; _i2 < length; _i2++) {\n      verts.push(points[_i2 * 2], points[_i2 * 2 + 1], r, g, b, alpha);\n    }\n  }\n  if (graphicsData.lineWidth > 0) {\n    (0, _buildLine2.default)(graphicsData, webGLData, webGLDataNativeLines);\n  }\n}","map":{"version":3,"names":["buildPoly","_buildLine","require","_utils","_earcut","graphicsData","webGLData","webGLDataNativeLines","points","shape","slice","fill","length","holeArray","holes","i","hole","push","concat","verts","indices","color","hex2rgb","fillColor","alpha","fillAlpha","r","g","b","triangles","_earcut2","default","vertPos","_i","_i2","lineWidth","_buildLine2"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/graphics/webgl/utils/buildPoly.js"],"sourcesContent":["import buildLine from './buildLine';\nimport { hex2rgb } from '../../../utils';\nimport earcut from 'earcut';\n\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nexport default function buildPoly(graphicsData, webGLData, webGLDataNativeLines)\n{\n    graphicsData.points = graphicsData.shape.points.slice();\n\n    let points = graphicsData.points;\n\n    if (graphicsData.fill && points.length >= 6)\n    {\n        const holeArray = [];\n        // Process holes..\n        const holes = graphicsData.holes;\n\n        for (let i = 0; i < holes.length; i++)\n        {\n            const hole = holes[i];\n\n            holeArray.push(points.length / 2);\n\n            points = points.concat(hole.points);\n        }\n\n        // get first and last point.. figure out the middle!\n        const verts = webGLData.points;\n        const indices = webGLData.indices;\n\n        const length = points.length / 2;\n\n        // sort color\n        const color = hex2rgb(graphicsData.fillColor);\n        const alpha = graphicsData.fillAlpha;\n        const r = color[0] * alpha;\n        const g = color[1] * alpha;\n        const b = color[2] * alpha;\n\n        const triangles = earcut(points, holeArray, 2);\n\n        if (!triangles)\n        {\n            return;\n        }\n\n        const vertPos = verts.length / 6;\n\n        for (let i = 0; i < triangles.length; i += 3)\n        {\n            indices.push(triangles[i] + vertPos);\n            indices.push(triangles[i] + vertPos);\n            indices.push(triangles[i + 1] + vertPos);\n            indices.push(triangles[i + 2] + vertPos);\n            indices.push(triangles[i + 2] + vertPos);\n        }\n\n        for (let i = 0; i < length; i++)\n        {\n            verts.push(points[i * 2], points[(i * 2) + 1],\n                r, g, b, alpha);\n        }\n    }\n\n    if (graphicsData.lineWidth > 0)\n    {\n        buildLine(graphicsData, webGLData, webGLDataNativeLines);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}