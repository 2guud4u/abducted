{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _Rectangle = require('./Rectangle');\nvar _Rectangle2 = _interopRequireDefault(_Rectangle);\nvar _const = require('../../const');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * The Ellipse object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof PIXI\n */\nvar Ellipse = function () {\n  /**\n   * @param {number} [x=0] - The X coordinate of the center of this ellipse\n   * @param {number} [y=0] - The Y coordinate of the center of this ellipse\n   * @param {number} [halfWidth=0] - The half width of this ellipse\n   * @param {number} [halfHeight=0] - The half height of this ellipse\n   */\n  function Ellipse() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var halfWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var halfHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, Ellipse);\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.width = halfWidth;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.height = halfHeight;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     * @readOnly\n     * @default PIXI.SHAPES.ELIP\n     * @see PIXI.SHAPES\n     */\n    this.type = _const.SHAPES.ELIP;\n  }\n\n  /**\n   * Creates a clone of this Ellipse instance\n   *\n   * @return {PIXI.Ellipse} a copy of the ellipse\n   */\n\n  Ellipse.prototype.clone = function clone() {\n    return new Ellipse(this.x, this.y, this.width, this.height);\n  };\n\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   *\n   * @param {number} x - The X coordinate of the point to test\n   * @param {number} y - The Y coordinate of the point to test\n   * @return {boolean} Whether the x/y coords are within this ellipse\n   */\n\n  Ellipse.prototype.contains = function contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n\n    // normalize the coords to an ellipse with center 0,0\n    var normx = (x - this.x) / this.width;\n    var normy = (y - this.y) / this.height;\n    normx *= normx;\n    normy *= normy;\n    return normx + normy <= 1;\n  };\n\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   *\n   * @return {PIXI.Rectangle} the framing rectangle\n   */\n\n  Ellipse.prototype.getBounds = function getBounds() {\n    return new _Rectangle2.default(this.x - this.width, this.y - this.height, this.width, this.height);\n  };\n  return Ellipse;\n}();\nexports.default = Ellipse;","map":{"version":3,"names":["_Rectangle","require","_const","Ellipse","x","arguments","length","undefined","y","halfWidth","halfHeight","_classCallCheck","width","height","type","SHAPES","ELIP","clone","contains","normx","normy","getBounds","_Rectangle2","default"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/math/shapes/Ellipse.js"],"sourcesContent":["import Rectangle from './Rectangle';\nimport { SHAPES } from '../../const';\n\n/**\n * The Ellipse object can be used to specify a hit area for displayObjects\n *\n * @class\n * @memberof PIXI\n */\nexport default class Ellipse\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this ellipse\n     * @param {number} [y=0] - The Y coordinate of the center of this ellipse\n     * @param {number} [halfWidth=0] - The half width of this ellipse\n     * @param {number} [halfHeight=0] - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = halfWidth;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = halfHeight;\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.ELIP\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.ELIP;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     *\n     * @return {PIXI.Ellipse} a copy of the ellipse\n     */\n    clone()\n    {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coords are within this ellipse\n     */\n    contains(x, y)\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.width);\n        let normy = ((y - this.y) / this.height);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     *\n     * @return {PIXI.Rectangle} the framing rectangle\n     */\n    getBounds()\n    {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n}\n"],"mappings":";;;AAAA,IAAAA,UAAA,GAAAC,OAAA;;AACA,IAAAC,MAAA,GAAAD,OAAA;;;;;;;;;;;;AAEA;;;;;;IAMqBE,O;EAEjB;;;;;;EAMA,SAAAA,QAAA,EACA;IAAA,IADYC,CACZ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADgB,CAChB;IAAA,IADmBG,CACnB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADuB,CACvB;IAAA,IAD0BI,SAC1B,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADsC,CACtC;IAAA,IADyCK,UACzC,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADsD,CACtD;IAAAM,eAAA,OAAAR,OAAA;;IACI;;;;IAIA,KAAKC,CAAL,GAASA,CAAT;;IAEA;;;;IAIA,KAAKI,CAAL,GAASA,CAAT;;IAEA;;;;IAIA,KAAKI,KAAL,GAAaH,SAAb;;IAEA;;;;IAIA,KAAKI,MAAL,GAAcH,UAAd;;IAEA;;;;;;;;IAQA,KAAKI,IAAL,GAAYZ,MAAA,CAAAa,MAAA,CAAOC,IAAnB;EACH;;EAED;;;;;;oBAKAC,K,oBACA;IACI,OAAO,IAAId,OAAJ,CAAY,KAAKC,CAAjB,EAAoB,KAAKI,CAAzB,EAA4B,KAAKI,KAAjC,EAAwC,KAAKC,MAA7C,CAAP;EACH,C;;EAED;;;;;;;;oBAOAK,Q,qBAASd,C,EAAGI,C,EACZ;IACI,IAAI,KAAKI,KAAL,IAAc,CAAd,IAAmB,KAAKC,MAAL,IAAe,CAAtC,EACA;MACI,OAAO,KAAP;IACH;;IAED;IACA,IAAIM,KAAA,GAAS,CAACf,CAAA,GAAI,KAAKA,CAAV,IAAe,KAAKQ,KAAjC;IACA,IAAIQ,KAAA,GAAS,CAACZ,CAAA,GAAI,KAAKA,CAAV,IAAe,KAAKK,MAAjC;IAEAM,KAAA,IAASA,KAAT;IACAC,KAAA,IAASA,KAAT;IAEA,OAAQD,KAAA,GAAQC,KAAR,IAAiB,CAAzB;EACH,C;;EAED;;;;;;oBAKAC,S,wBACA;IACI,OAAO,IAAAC,WAAA,CAAAC,OAAA,CAAc,KAAKnB,CAAL,GAAS,KAAKQ,KAA5B,EAAmC,KAAKJ,CAAL,GAAS,KAAKK,MAAjD,EAAyD,KAAKD,KAA9D,EAAqE,KAAKC,MAA1E,CAAP;EACH,C;;;kBAvFgBV,O"},"metadata":{},"sourceType":"script","externalDependencies":[]}