{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _WebGLManager2 = require('./WebGLManager');\nvar _WebGLManager3 = _interopRequireDefault(_WebGLManager2);\nvar _SpriteMaskFilter = require('../filters/spriteMask/SpriteMaskFilter');\nvar _SpriteMaskFilter2 = _interopRequireDefault(_SpriteMaskFilter);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\nvar MaskManager = function (_WebGLManager) {\n  _inherits(MaskManager, _WebGLManager);\n\n  /**\n   * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n   */\n  function MaskManager(renderer) {\n    _classCallCheck(this, MaskManager);\n\n    // TODO - we don't need both!\n    var _this = _possibleConstructorReturn(this, _WebGLManager.call(this, renderer));\n    _this.scissor = false;\n    _this.scissorData = null;\n    _this.scissorRenderTarget = null;\n    _this.enableScissor = true;\n    _this.alphaMaskPool = [];\n    _this.alphaMaskIndex = 0;\n    return _this;\n  }\n\n  /**\n   * Applies the Mask and adds it to the current filter stack.\n   *\n   * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n   * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n   */\n\n  MaskManager.prototype.pushMask = function pushMask(target, maskData) {\n    // TODO the root check means scissor rect will not\n    // be used on render textures more info here:\n    // https://github.com/pixijs/pixi.js/pull/3545\n\n    if (maskData.texture) {\n      this.pushSpriteMask(target, maskData);\n    } else if (this.enableScissor && !this.scissor && this.renderer._activeRenderTarget.root && !this.renderer.stencilManager.stencilMaskStack.length && maskData.isFastRect()) {\n      var matrix = maskData.worldTransform;\n      var rot = Math.atan2(matrix.b, matrix.a);\n\n      // use the nearest degree!\n      rot = Math.round(rot * (180 / Math.PI));\n      if (rot % 90) {\n        this.pushStencilMask(maskData);\n      } else {\n        this.pushScissorMask(target, maskData);\n      }\n    } else {\n      this.pushStencilMask(maskData);\n    }\n  };\n\n  /**\n   * Removes the last mask from the mask stack and doesn't return it.\n   *\n   * @param {PIXI.DisplayObject} target - Display Object to pop the mask from\n   * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n   */\n\n  MaskManager.prototype.popMask = function popMask(target, maskData) {\n    if (maskData.texture) {\n      this.popSpriteMask(target, maskData);\n    } else if (this.enableScissor && !this.renderer.stencilManager.stencilMaskStack.length) {\n      this.popScissorMask(target, maskData);\n    } else {\n      this.popStencilMask(target, maskData);\n    }\n  };\n\n  /**\n   * Applies the Mask and adds it to the current filter stack.\n   *\n   * @param {PIXI.RenderTarget} target - Display Object to push the sprite mask to\n   * @param {PIXI.Sprite} maskData - Sprite to be used as the mask\n   */\n\n  MaskManager.prototype.pushSpriteMask = function pushSpriteMask(target, maskData) {\n    var alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];\n    if (!alphaMaskFilter) {\n      alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new _SpriteMaskFilter2.default(maskData)];\n    }\n    alphaMaskFilter[0].resolution = this.renderer.resolution;\n    alphaMaskFilter[0].maskSprite = maskData;\n    var stashFilterArea = target.filterArea;\n    target.filterArea = maskData.getBounds(true);\n    this.renderer.filterManager.pushFilter(target, alphaMaskFilter);\n    target.filterArea = stashFilterArea;\n    this.alphaMaskIndex++;\n  };\n\n  /**\n   * Removes the last filter from the filter stack and doesn't return it.\n   *\n   */\n\n  MaskManager.prototype.popSpriteMask = function popSpriteMask() {\n    this.renderer.filterManager.popFilter();\n    this.alphaMaskIndex--;\n  };\n\n  /**\n   * Applies the Mask and adds it to the current filter stack.\n   *\n   * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n   */\n\n  MaskManager.prototype.pushStencilMask = function pushStencilMask(maskData) {\n    this.renderer.currentRenderer.stop();\n    this.renderer.stencilManager.pushStencil(maskData);\n  };\n\n  /**\n   * Removes the last filter from the filter stack and doesn't return it.\n   *\n   */\n\n  MaskManager.prototype.popStencilMask = function popStencilMask() {\n    this.renderer.currentRenderer.stop();\n    this.renderer.stencilManager.popStencil();\n  };\n\n  /**\n   *\n   * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n   * @param {PIXI.Graphics} maskData - The masking data.\n   */\n\n  MaskManager.prototype.pushScissorMask = function pushScissorMask(target, maskData) {\n    maskData.renderable = true;\n    var renderTarget = this.renderer._activeRenderTarget;\n    var bounds = maskData.getBounds();\n    bounds.fit(renderTarget.size);\n    maskData.renderable = false;\n    this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n    var resolution = this.renderer.resolution;\n    this.renderer.gl.scissor(bounds.x * resolution, (renderTarget.root ? renderTarget.size.height - bounds.y - bounds.height : bounds.y) * resolution, bounds.width * resolution, bounds.height * resolution);\n    this.scissorRenderTarget = renderTarget;\n    this.scissorData = maskData;\n    this.scissor = true;\n  };\n\n  /**\n   *\n   *\n   */\n\n  MaskManager.prototype.popScissorMask = function popScissorMask() {\n    this.scissorRenderTarget = null;\n    this.scissorData = null;\n    this.scissor = false;\n\n    // must be scissor!\n    var gl = this.renderer.gl;\n    gl.disable(gl.SCISSOR_TEST);\n  };\n  return MaskManager;\n}(_WebGLManager3.default);\nexports.default = MaskManager;","map":{"version":3,"names":["_WebGLManager2","require","_SpriteMaskFilter","MaskManager","renderer","_classCallCheck","_this","_possibleConstructorReturn","_WebGLManager","call","scissor","scissorData","scissorRenderTarget","enableScissor","alphaMaskPool","alphaMaskIndex","pushMask","target","maskData","texture","pushSpriteMask","_activeRenderTarget","root","stencilManager","stencilMaskStack","length","isFastRect","matrix","worldTransform","rot","Math","atan2","b","a","round","PI","pushStencilMask","pushScissorMask","popMask","popSpriteMask","popScissorMask","popStencilMask","alphaMaskFilter","_SpriteMaskFilter2","default","resolution","maskSprite","stashFilterArea","filterArea","getBounds","filterManager","pushFilter","popFilter","currentRenderer","stop","pushStencil","popStencil","renderable","renderTarget","bounds","fit","size","gl","enable","SCISSOR_TEST","x","height","y","width","disable"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/renderers/webgl/managers/MaskManager.js"],"sourcesContent":["import WebGLManager from './WebGLManager';\nimport AlphaMaskFilter from '../filters/spriteMask/SpriteMaskFilter';\n\n/**\n * @class\n * @extends PIXI.WebGLManager\n * @memberof PIXI\n */\nexport default class MaskManager extends WebGLManager\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        // TODO - we don't need both!\n        this.scissor = false;\n        this.scissorData = null;\n        this.scissorRenderTarget = null;\n\n        this.enableScissor = true;\n\n        this.alphaMaskPool = [];\n        this.alphaMaskIndex = 0;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    pushMask(target, maskData)\n    {\n        // TODO the root check means scissor rect will not\n        // be used on render textures more info here:\n        // https://github.com/pixijs/pixi.js/pull/3545\n\n        if (maskData.texture)\n        {\n            this.pushSpriteMask(target, maskData);\n        }\n        else if (this.enableScissor\n            && !this.scissor\n            && this.renderer._activeRenderTarget.root\n            && !this.renderer.stencilManager.stencilMaskStack.length\n            && maskData.isFastRect())\n        {\n            const matrix = maskData.worldTransform;\n\n            let rot = Math.atan2(matrix.b, matrix.a);\n\n            // use the nearest degree!\n            rot = Math.round(rot * (180 / Math.PI));\n\n            if (rot % 90)\n            {\n                this.pushStencilMask(maskData);\n            }\n            else\n            {\n                this.pushScissorMask(target, maskData);\n            }\n        }\n        else\n        {\n            this.pushStencilMask(maskData);\n        }\n    }\n\n    /**\n     * Removes the last mask from the mask stack and doesn't return it.\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to pop the mask from\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    popMask(target, maskData)\n    {\n        if (maskData.texture)\n        {\n            this.popSpriteMask(target, maskData);\n        }\n        else if (this.enableScissor && !this.renderer.stencilManager.stencilMaskStack.length)\n        {\n            this.popScissorMask(target, maskData);\n        }\n        else\n        {\n            this.popStencilMask(target, maskData);\n        }\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.RenderTarget} target - Display Object to push the sprite mask to\n     * @param {PIXI.Sprite} maskData - Sprite to be used as the mask\n     */\n    pushSpriteMask(target, maskData)\n    {\n        let alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];\n\n        if (!alphaMaskFilter)\n        {\n            alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new AlphaMaskFilter(maskData)];\n        }\n\n        alphaMaskFilter[0].resolution = this.renderer.resolution;\n        alphaMaskFilter[0].maskSprite = maskData;\n\n        const stashFilterArea = target.filterArea;\n\n        target.filterArea = maskData.getBounds(true);\n        this.renderer.filterManager.pushFilter(target, alphaMaskFilter);\n        target.filterArea = stashFilterArea;\n\n        this.alphaMaskIndex++;\n    }\n\n    /**\n     * Removes the last filter from the filter stack and doesn't return it.\n     *\n     */\n    popSpriteMask()\n    {\n        this.renderer.filterManager.popFilter();\n        this.alphaMaskIndex--;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    pushStencilMask(maskData)\n    {\n        this.renderer.currentRenderer.stop();\n        this.renderer.stencilManager.pushStencil(maskData);\n    }\n\n    /**\n     * Removes the last filter from the filter stack and doesn't return it.\n     *\n     */\n    popStencilMask()\n    {\n        this.renderer.currentRenderer.stop();\n        this.renderer.stencilManager.popStencil();\n    }\n\n    /**\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n     * @param {PIXI.Graphics} maskData - The masking data.\n     */\n    pushScissorMask(target, maskData)\n    {\n        maskData.renderable = true;\n\n        const renderTarget = this.renderer._activeRenderTarget;\n\n        const bounds = maskData.getBounds();\n\n        bounds.fit(renderTarget.size);\n        maskData.renderable = false;\n\n        this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n\n        const resolution = this.renderer.resolution;\n\n        this.renderer.gl.scissor(\n            bounds.x * resolution,\n            (renderTarget.root ? renderTarget.size.height - bounds.y - bounds.height : bounds.y) * resolution,\n            bounds.width * resolution,\n            bounds.height * resolution\n        );\n\n        this.scissorRenderTarget = renderTarget;\n        this.scissorData = maskData;\n        this.scissor = true;\n    }\n\n    /**\n     *\n     *\n     */\n    popScissorMask()\n    {\n        this.scissorRenderTarget = null;\n        this.scissorData = null;\n        this.scissor = false;\n\n        // must be scissor!\n        const gl = this.renderer.gl;\n\n        gl.disable(gl.SCISSOR_TEST);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}