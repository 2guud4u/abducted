{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _core = require('../../core');\nvar core = _interopRequireWildcard(_core);\nvar _Mesh = require('../Mesh');\nvar _Mesh2 = _interopRequireDefault(_Mesh);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * Renderer dedicated to meshes.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nvar MeshSpriteRenderer = function () {\n  /**\n   * @param {PIXI.CanvasRenderer} renderer - The renderer this downport works for\n   */\n  function MeshSpriteRenderer(renderer) {\n    _classCallCheck(this, MeshSpriteRenderer);\n    this.renderer = renderer;\n  }\n\n  /**\n   * Renders the Mesh\n   *\n   * @param {PIXI.mesh.Mesh} mesh - the Mesh to render\n   */\n\n  MeshSpriteRenderer.prototype.render = function render(mesh) {\n    var renderer = this.renderer;\n    var context = renderer.context;\n    var transform = mesh.worldTransform;\n    var res = renderer.resolution;\n    if (renderer.roundPixels) {\n      context.setTransform(transform.a * res, transform.b * res, transform.c * res, transform.d * res, transform.tx * res | 0, transform.ty * res | 0);\n    } else {\n      context.setTransform(transform.a * res, transform.b * res, transform.c * res, transform.d * res, transform.tx * res, transform.ty * res);\n    }\n    renderer.context.globalAlpha = mesh.worldAlpha;\n    renderer.setBlendMode(mesh.blendMode);\n    if (mesh.drawMode === _Mesh2.default.DRAW_MODES.TRIANGLE_MESH) {\n      this._renderTriangleMesh(mesh);\n    } else {\n      this._renderTriangles(mesh);\n    }\n  };\n\n  /**\n   * Draws the object in Triangle Mesh mode\n   *\n   * @private\n   * @param {PIXI.mesh.Mesh} mesh - the Mesh to render\n   */\n\n  MeshSpriteRenderer.prototype._renderTriangleMesh = function _renderTriangleMesh(mesh) {\n    // draw triangles!!\n    var length = mesh.vertices.length / 2;\n    for (var i = 0; i < length - 2; i++) {\n      // draw some triangles!\n      var index = i * 2;\n      this._renderDrawTriangle(mesh, index, index + 2, index + 4);\n    }\n  };\n\n  /**\n   * Draws the object in triangle mode using canvas\n   *\n   * @private\n   * @param {PIXI.mesh.Mesh} mesh - the current mesh\n   */\n\n  MeshSpriteRenderer.prototype._renderTriangles = function _renderTriangles(mesh) {\n    // draw triangles!!\n    var indices = mesh.indices;\n    var length = indices.length;\n    for (var i = 0; i < length; i += 3) {\n      // draw some triangles!\n      var index0 = indices[i] * 2;\n      var index1 = indices[i + 1] * 2;\n      var index2 = indices[i + 2] * 2;\n      this._renderDrawTriangle(mesh, index0, index1, index2);\n    }\n  };\n\n  /**\n   * Draws one of the triangles that from the Mesh\n   *\n   * @private\n   * @param {PIXI.mesh.Mesh} mesh - the current mesh\n   * @param {number} index0 - the index of the first vertex\n   * @param {number} index1 - the index of the second vertex\n   * @param {number} index2 - the index of the third vertex\n   */\n\n  MeshSpriteRenderer.prototype._renderDrawTriangle = function _renderDrawTriangle(mesh, index0, index1, index2) {\n    var context = this.renderer.context;\n    var uvs = mesh.uvs;\n    var vertices = mesh.vertices;\n    var texture = mesh._texture;\n    if (!texture.valid) {\n      return;\n    }\n    var base = texture.baseTexture;\n    var textureSource = base.source;\n    var textureWidth = base.width;\n    var textureHeight = base.height;\n    var u0 = void 0;\n    var u1 = void 0;\n    var u2 = void 0;\n    var v0 = void 0;\n    var v1 = void 0;\n    var v2 = void 0;\n    if (mesh.uploadUvTransform) {\n      var ut = mesh._uvTransform.mapCoord;\n      u0 = (uvs[index0] * ut.a + uvs[index0 + 1] * ut.c + ut.tx) * base.width;\n      u1 = (uvs[index1] * ut.a + uvs[index1 + 1] * ut.c + ut.tx) * base.width;\n      u2 = (uvs[index2] * ut.a + uvs[index2 + 1] * ut.c + ut.tx) * base.width;\n      v0 = (uvs[index0] * ut.b + uvs[index0 + 1] * ut.d + ut.ty) * base.height;\n      v1 = (uvs[index1] * ut.b + uvs[index1 + 1] * ut.d + ut.ty) * base.height;\n      v2 = (uvs[index2] * ut.b + uvs[index2 + 1] * ut.d + ut.ty) * base.height;\n    } else {\n      u0 = uvs[index0] * base.width;\n      u1 = uvs[index1] * base.width;\n      u2 = uvs[index2] * base.width;\n      v0 = uvs[index0 + 1] * base.height;\n      v1 = uvs[index1 + 1] * base.height;\n      v2 = uvs[index2 + 1] * base.height;\n    }\n    var x0 = vertices[index0];\n    var x1 = vertices[index1];\n    var x2 = vertices[index2];\n    var y0 = vertices[index0 + 1];\n    var y1 = vertices[index1 + 1];\n    var y2 = vertices[index2 + 1];\n    var canvasPadding = mesh.canvasPadding / this.renderer.resolution;\n    if (canvasPadding > 0) {\n      var paddingX = canvasPadding / Math.abs(mesh.worldTransform.a);\n      var paddingY = canvasPadding / Math.abs(mesh.worldTransform.d);\n      var centerX = (x0 + x1 + x2) / 3;\n      var centerY = (y0 + y1 + y2) / 3;\n      var normX = x0 - centerX;\n      var normY = y0 - centerY;\n      var dist = Math.sqrt(normX * normX + normY * normY);\n      x0 = centerX + normX / dist * (dist + paddingX);\n      y0 = centerY + normY / dist * (dist + paddingY);\n\n      //\n\n      normX = x1 - centerX;\n      normY = y1 - centerY;\n      dist = Math.sqrt(normX * normX + normY * normY);\n      x1 = centerX + normX / dist * (dist + paddingX);\n      y1 = centerY + normY / dist * (dist + paddingY);\n      normX = x2 - centerX;\n      normY = y2 - centerY;\n      dist = Math.sqrt(normX * normX + normY * normY);\n      x2 = centerX + normX / dist * (dist + paddingX);\n      y2 = centerY + normY / dist * (dist + paddingY);\n    }\n    context.save();\n    context.beginPath();\n    context.moveTo(x0, y0);\n    context.lineTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.closePath();\n    context.clip();\n\n    // Compute matrix transform\n    var delta = u0 * v1 + v0 * u2 + u1 * v2 - v1 * u2 - v0 * u1 - u0 * v2;\n    var deltaA = x0 * v1 + v0 * x2 + x1 * v2 - v1 * x2 - v0 * x1 - x0 * v2;\n    var deltaB = u0 * x1 + x0 * u2 + u1 * x2 - x1 * u2 - x0 * u1 - u0 * x2;\n    var deltaC = u0 * v1 * x2 + v0 * x1 * u2 + x0 * u1 * v2 - x0 * v1 * u2 - v0 * u1 * x2 - u0 * x1 * v2;\n    var deltaD = y0 * v1 + v0 * y2 + y1 * v2 - v1 * y2 - v0 * y1 - y0 * v2;\n    var deltaE = u0 * y1 + y0 * u2 + u1 * y2 - y1 * u2 - y0 * u1 - u0 * y2;\n    var deltaF = u0 * v1 * y2 + v0 * y1 * u2 + y0 * u1 * v2 - y0 * v1 * u2 - v0 * u1 * y2 - u0 * y1 * v2;\n    context.transform(deltaA / delta, deltaD / delta, deltaB / delta, deltaE / delta, deltaC / delta, deltaF / delta);\n    context.drawImage(textureSource, 0, 0, textureWidth * base.resolution, textureHeight * base.resolution, 0, 0, textureWidth, textureHeight);\n    context.restore();\n    this.renderer.invalidateBlendMode();\n  };\n\n  /**\n   * Renders a flat Mesh\n   *\n   * @private\n   * @param {PIXI.mesh.Mesh} mesh - The Mesh to render\n   */\n\n  MeshSpriteRenderer.prototype.renderMeshFlat = function renderMeshFlat(mesh) {\n    var context = this.renderer.context;\n    var vertices = mesh.vertices;\n    var length = vertices.length / 2;\n\n    // this.count++;\n\n    context.beginPath();\n    for (var i = 1; i < length - 2; ++i) {\n      // draw some triangles!\n      var index = i * 2;\n      var x0 = vertices[index];\n      var y0 = vertices[index + 1];\n      var x1 = vertices[index + 2];\n      var y1 = vertices[index + 3];\n      var x2 = vertices[index + 4];\n      var y2 = vertices[index + 5];\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n      context.lineTo(x2, y2);\n    }\n    context.fillStyle = '#FF0000';\n    context.fill();\n    context.closePath();\n  };\n\n  /**\n   * destroy the the renderer.\n   *\n   */\n\n  MeshSpriteRenderer.prototype.destroy = function destroy() {\n    this.renderer = null;\n  };\n  return MeshSpriteRenderer;\n}();\nexports.default = MeshSpriteRenderer;\ncore.CanvasRenderer.registerPlugin('mesh', MeshSpriteRenderer);","map":{"version":3,"names":["_core","require","core","_Mesh","MeshSpriteRenderer","renderer","_classCallCheck","render","mesh","context","transform","worldTransform","res","resolution","roundPixels","setTransform","a","b","c","d","tx","ty","globalAlpha","worldAlpha","setBlendMode","blendMode","drawMode","_Mesh2","default","DRAW_MODES","TRIANGLE_MESH","_renderTriangleMesh","_renderTriangles","length","vertices","i","index","_renderDrawTriangle","indices","index0","index1","index2","uvs","texture","_texture","valid","base","baseTexture","textureSource","source","textureWidth","width","textureHeight","height","u0","u1","u2","v0","v1","v2","uploadUvTransform","ut","_uvTransform","mapCoord","x0","x1","x2","y0","y1","y2","canvasPadding","paddingX","Math","abs","paddingY","centerX","centerY","normX","normY","dist","sqrt","save","beginPath","moveTo","lineTo","closePath","clip","delta","deltaA","deltaB","deltaC","deltaD","deltaE","deltaF","drawImage","restore","invalidateBlendMode","renderMeshFlat","fillStyle","fill","destroy","CanvasRenderer","registerPlugin"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/mesh/canvas/CanvasMeshRenderer.js"],"sourcesContent":["import * as core from '../../core';\nimport { default as Mesh } from '../Mesh';\n\n/**\n * Renderer dedicated to meshes.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class MeshSpriteRenderer\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The renderer this downport works for\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders the Mesh\n     *\n     * @param {PIXI.mesh.Mesh} mesh - the Mesh to render\n     */\n    render(mesh)\n    {\n        const renderer = this.renderer;\n        const context = renderer.context;\n\n        const transform = mesh.worldTransform;\n        const res = renderer.resolution;\n\n        if (renderer.roundPixels)\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                (transform.tx * res) | 0,\n                (transform.ty * res) | 0\n            );\n        }\n        else\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                transform.tx * res,\n                transform.ty * res\n            );\n        }\n\n        renderer.context.globalAlpha = mesh.worldAlpha;\n        renderer.setBlendMode(mesh.blendMode);\n\n        if (mesh.drawMode === Mesh.DRAW_MODES.TRIANGLE_MESH)\n        {\n            this._renderTriangleMesh(mesh);\n        }\n        else\n        {\n            this._renderTriangles(mesh);\n        }\n    }\n\n    /**\n     * Draws the object in Triangle Mesh mode\n     *\n     * @private\n     * @param {PIXI.mesh.Mesh} mesh - the Mesh to render\n     */\n    _renderTriangleMesh(mesh)\n    {\n        // draw triangles!!\n        const length = mesh.vertices.length / 2;\n\n        for (let i = 0; i < length - 2; i++)\n        {\n            // draw some triangles!\n            const index = i * 2;\n\n            this._renderDrawTriangle(mesh, index, (index + 2), (index + 4));\n        }\n    }\n\n    /**\n     * Draws the object in triangle mode using canvas\n     *\n     * @private\n     * @param {PIXI.mesh.Mesh} mesh - the current mesh\n     */\n    _renderTriangles(mesh)\n    {\n        // draw triangles!!\n        const indices = mesh.indices;\n        const length = indices.length;\n\n        for (let i = 0; i < length; i += 3)\n        {\n            // draw some triangles!\n            const index0 = indices[i] * 2;\n            const index1 = indices[i + 1] * 2;\n            const index2 = indices[i + 2] * 2;\n\n            this._renderDrawTriangle(mesh, index0, index1, index2);\n        }\n    }\n\n    /**\n     * Draws one of the triangles that from the Mesh\n     *\n     * @private\n     * @param {PIXI.mesh.Mesh} mesh - the current mesh\n     * @param {number} index0 - the index of the first vertex\n     * @param {number} index1 - the index of the second vertex\n     * @param {number} index2 - the index of the third vertex\n     */\n    _renderDrawTriangle(mesh, index0, index1, index2)\n    {\n        const context = this.renderer.context;\n        const uvs = mesh.uvs;\n        const vertices = mesh.vertices;\n        const texture = mesh._texture;\n\n        if (!texture.valid)\n        {\n            return;\n        }\n\n        const base = texture.baseTexture;\n        const textureSource = base.source;\n        const textureWidth = base.width;\n        const textureHeight = base.height;\n\n        let u0;\n        let u1;\n        let u2;\n        let v0;\n        let v1;\n        let v2;\n\n        if (mesh.uploadUvTransform)\n        {\n            const ut = mesh._uvTransform.mapCoord;\n\n            u0 = ((uvs[index0] * ut.a) + (uvs[index0 + 1] * ut.c) + ut.tx) * base.width;\n            u1 = ((uvs[index1] * ut.a) + (uvs[index1 + 1] * ut.c) + ut.tx) * base.width;\n            u2 = ((uvs[index2] * ut.a) + (uvs[index2 + 1] * ut.c) + ut.tx) * base.width;\n            v0 = ((uvs[index0] * ut.b) + (uvs[index0 + 1] * ut.d) + ut.ty) * base.height;\n            v1 = ((uvs[index1] * ut.b) + (uvs[index1 + 1] * ut.d) + ut.ty) * base.height;\n            v2 = ((uvs[index2] * ut.b) + (uvs[index2 + 1] * ut.d) + ut.ty) * base.height;\n        }\n        else\n        {\n            u0 = uvs[index0] * base.width;\n            u1 = uvs[index1] * base.width;\n            u2 = uvs[index2] * base.width;\n            v0 = uvs[index0 + 1] * base.height;\n            v1 = uvs[index1 + 1] * base.height;\n            v2 = uvs[index2 + 1] * base.height;\n        }\n\n        let x0 = vertices[index0];\n        let x1 = vertices[index1];\n        let x2 = vertices[index2];\n        let y0 = vertices[index0 + 1];\n        let y1 = vertices[index1 + 1];\n        let y2 = vertices[index2 + 1];\n\n        const canvasPadding = mesh.canvasPadding / this.renderer.resolution;\n\n        if (canvasPadding > 0)\n        {\n            const paddingX = canvasPadding / Math.abs(mesh.worldTransform.a);\n            const paddingY = canvasPadding / Math.abs(mesh.worldTransform.d);\n            const centerX = (x0 + x1 + x2) / 3;\n            const centerY = (y0 + y1 + y2) / 3;\n\n            let normX = x0 - centerX;\n            let normY = y0 - centerY;\n\n            let dist = Math.sqrt((normX * normX) + (normY * normY));\n\n            x0 = centerX + ((normX / dist) * (dist + paddingX));\n            y0 = centerY + ((normY / dist) * (dist + paddingY));\n\n            //\n\n            normX = x1 - centerX;\n            normY = y1 - centerY;\n\n            dist = Math.sqrt((normX * normX) + (normY * normY));\n            x1 = centerX + ((normX / dist) * (dist + paddingX));\n            y1 = centerY + ((normY / dist) * (dist + paddingY));\n\n            normX = x2 - centerX;\n            normY = y2 - centerY;\n\n            dist = Math.sqrt((normX * normX) + (normY * normY));\n            x2 = centerX + ((normX / dist) * (dist + paddingX));\n            y2 = centerY + ((normY / dist) * (dist + paddingY));\n        }\n\n        context.save();\n        context.beginPath();\n\n        context.moveTo(x0, y0);\n        context.lineTo(x1, y1);\n        context.lineTo(x2, y2);\n\n        context.closePath();\n\n        context.clip();\n\n        // Compute matrix transform\n        const delta = (u0 * v1) + (v0 * u2) + (u1 * v2) - (v1 * u2) - (v0 * u1) - (u0 * v2);\n        const deltaA = (x0 * v1) + (v0 * x2) + (x1 * v2) - (v1 * x2) - (v0 * x1) - (x0 * v2);\n        const deltaB = (u0 * x1) + (x0 * u2) + (u1 * x2) - (x1 * u2) - (x0 * u1) - (u0 * x2);\n        const deltaC = (u0 * v1 * x2) + (v0 * x1 * u2) + (x0 * u1 * v2) - (x0 * v1 * u2) - (v0 * u1 * x2) - (u0 * x1 * v2);\n        const deltaD = (y0 * v1) + (v0 * y2) + (y1 * v2) - (v1 * y2) - (v0 * y1) - (y0 * v2);\n        const deltaE = (u0 * y1) + (y0 * u2) + (u1 * y2) - (y1 * u2) - (y0 * u1) - (u0 * y2);\n        const deltaF = (u0 * v1 * y2) + (v0 * y1 * u2) + (y0 * u1 * v2) - (y0 * v1 * u2) - (v0 * u1 * y2) - (u0 * y1 * v2);\n\n        context.transform(\n            deltaA / delta,\n            deltaD / delta,\n            deltaB / delta,\n            deltaE / delta,\n            deltaC / delta,\n            deltaF / delta\n        );\n\n        context.drawImage(\n            textureSource,\n            0,\n            0,\n            textureWidth * base.resolution,\n            textureHeight * base.resolution,\n            0,\n            0,\n            textureWidth,\n            textureHeight\n        );\n\n        context.restore();\n        this.renderer.invalidateBlendMode();\n    }\n\n    /**\n     * Renders a flat Mesh\n     *\n     * @private\n     * @param {PIXI.mesh.Mesh} mesh - The Mesh to render\n     */\n    renderMeshFlat(mesh)\n    {\n        const context = this.renderer.context;\n        const vertices = mesh.vertices;\n        const length = vertices.length / 2;\n\n        // this.count++;\n\n        context.beginPath();\n\n        for (let i = 1; i < length - 2; ++i)\n        {\n            // draw some triangles!\n            const index = i * 2;\n\n            const x0 = vertices[index];\n            const y0 = vertices[index + 1];\n\n            const x1 = vertices[index + 2];\n            const y1 = vertices[index + 3];\n\n            const x2 = vertices[index + 4];\n            const y2 = vertices[index + 5];\n\n            context.moveTo(x0, y0);\n            context.lineTo(x1, y1);\n            context.lineTo(x2, y2);\n        }\n\n        context.fillStyle = '#FF0000';\n        context.fill();\n        context.closePath();\n    }\n\n    /**\n     * destroy the the renderer.\n     *\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n\ncore.CanvasRenderer.registerPlugin('mesh', MeshSpriteRenderer);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}