{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar extensions = require('@pixi/extensions');\nvar math = require('@pixi/math');\nvar settings = require('@pixi/settings');\nclass ViewSystem {\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  init(options) {\n    this.screen = new math.Rectangle(0, 0, options.width, options.height);\n    this.element = options.view || settings.settings.ADAPTER.createCanvas();\n    this.resolution = options.resolution || settings.settings.RESOLUTION;\n    this.autoDensity = !!options.autoDensity;\n  }\n  resizeView(desiredScreenWidth, desiredScreenHeight) {\n    this.element.width = Math.round(desiredScreenWidth * this.resolution);\n    this.element.height = Math.round(desiredScreenHeight * this.resolution);\n    const screenWidth = this.element.width / this.resolution;\n    const screenHeight = this.element.height / this.resolution;\n    this.screen.width = screenWidth;\n    this.screen.height = screenHeight;\n    if (this.autoDensity) {\n      this.element.style.width = `${screenWidth}px`;\n      this.element.style.height = `${screenHeight}px`;\n    }\n    this.renderer.emit(\"resize\", screenWidth, screenHeight);\n    this.renderer.runners.resize.emit(this.screen.width, this.screen.height);\n  }\n  destroy(removeView) {\n    if (removeView) {\n      this.element.parentNode?.removeChild(this.element);\n    }\n    this.renderer = null;\n    this.element = null;\n    this.screen = null;\n  }\n}\nViewSystem.defaultOptions = {\n  width: 800,\n  height: 600,\n  resolution: settings.settings.RESOLUTION,\n  autoDensity: false\n};\nViewSystem.extension = {\n  type: [extensions.ExtensionType.RendererSystem, extensions.ExtensionType.CanvasRendererSystem],\n  name: \"_view\"\n};\nextensions.extensions.add(ViewSystem);\nexports.ViewSystem = ViewSystem;","map":{"version":3,"names":["ViewSystem","constructor","renderer","init","options","screen","math","Rectangle","width","height","element","view","settings","ADAPTER","createCanvas","resolution","RESOLUTION","autoDensity","resizeView","desiredScreenWidth","desiredScreenHeight","Math","round","screenWidth","screenHeight","style","emit","runners","resize","destroy","removeView","parentNode","removeChild","defaultOptions","extension","type","extensions","ExtensionType","RendererSystem","CanvasRendererSystem","name","add"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/core/src/view/ViewSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport { Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { ICanvas } from '@pixi/settings';\nimport type { IRenderer } from '../IRenderer';\nimport type { ISystem } from '../system/ISystem';\n\n/**\n * Options for the view system.\n * @memberof PIXI\n */\nexport interface ViewSystemOptions\n{\n    /**\n     * The canvas to use as the view. If omitted, a new canvas will be created.\n     * @memberof PIXI.IRendererOptions\n     */\n    view?: ICanvas;\n    /**\n     * The width of the renderer's view.\n     * @memberof PIXI.IRendererOptions\n     */\n    width?: number;\n    /**\n     * The height of the renderer's view.\n     * @memberof PIXI.IRendererOptions\n     */\n    height?: number;\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @memberof PIXI.IRendererOptions\n     */\n    resolution?: number;\n    /**\n     * Whether the CSS dimensions of the renderer's view should be resized automatically.\n     * @memberof PIXI.IRendererOptions\n     */\n    autoDensity?: boolean;\n}\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof PIXI\n */\nexport class ViewSystem implements ISystem<ViewSystemOptions, boolean>\n{\n    /** @ignore */\n    static defaultOptions = {\n        /**\n         * {@link PIXI.IRendererOptions.width}\n         * @default 800\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        width: 800,\n        /**\n         * {@link PIXI.IRendererOptions.height}\n         * @default 600\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        height: 600,\n        /**\n         * {@link PIXI.IRendererOptions.resolution}\n         * @type {number}\n         * @default PIXI.settings.RESOLUTION\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        resolution: settings.RESOLUTION,\n        /**\n         * {@link PIXI.IRendererOptions.autoDensity}\n         * @default false\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        autoDensity: false,\n    };\n\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: [\n            ExtensionType.RendererSystem,\n            ExtensionType.CanvasRendererSystem\n        ],\n        name: '_view',\n    };\n\n    private renderer: IRenderer;\n\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @member {number}\n     * @default PIXI.settings.RESOLUTION\n     */\n    public resolution: number;\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     *\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     * @member {PIXI.Rectangle}\n     */\n    public screen: Rectangle;\n\n    /**\n     * The canvas element that everything is drawn to.\n     * @member {PIXI.ICanvas}\n     */\n    public element: ICanvas;\n\n    /**\n     * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n     * @member {boolean}\n     */\n    public autoDensity: boolean;\n\n    constructor(renderer: IRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * initiates the view system\n     * @param {PIXI.ViewOptions} options - the options for the view\n     */\n    init(options: ViewSystemOptions): void\n    {\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n\n        this.element = options.view || settings.ADAPTER.createCanvas() as ICanvas;\n\n        this.resolution = options.resolution || settings.RESOLUTION;\n\n        this.autoDensity = !!options.autoDensity;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified dimensions.\n     * @param desiredScreenWidth - The new width of the screen.\n     * @param desiredScreenHeight - The new height of the screen.\n     */\n    resizeView(desiredScreenWidth: number, desiredScreenHeight: number): void\n    {\n        this.element.width = Math.round(desiredScreenWidth * this.resolution);\n        this.element.height = Math.round(desiredScreenHeight * this.resolution);\n\n        const screenWidth = this.element.width / this.resolution;\n        const screenHeight = this.element.height / this.resolution;\n\n        this.screen.width = screenWidth;\n        this.screen.height = screenHeight;\n\n        if (this.autoDensity)\n        {\n            this.element.style.width = `${screenWidth}px`;\n            this.element.style.height = `${screenHeight}px`;\n        }\n\n        /**\n         * Fired after view has been resized.\n         * @event PIXI.Renderer#resize\n         * @param {number} screenWidth - The new width of the screen.\n         * @param {number} screenHeight - The new height of the screen.\n         */\n        this.renderer.emit('resize', screenWidth, screenHeight);\n        this.renderer.runners.resize.emit(this.screen.width, this.screen.height);\n    }\n\n    /**\n     * Destroys this System and optionally removes the canvas from the dom.\n     * @param {boolean} [removeView=false] - Whether to remove the canvas from the DOM.\n     */\n    destroy(removeView: boolean): void\n    {\n        // ka boom!\n        if (removeView)\n        {\n            this.element.parentNode?.removeChild(this.element);\n        }\n\n        this.renderer = null;\n        this.element = null;\n        this.screen = null;\n    }\n}\n\nextensions.add(ViewSystem);\n"],"mappings":";;;;;;;;AA+CO,MAAMA,UACb;EAoEIC,YAAYC,QACZ;IACI,KAAKA,QAAW,GAAAA,QAAA;EAAA;EAOpBC,KAAKC,OACL;IACS,KAAAC,MAAA,GAAS,IAAIC,IAAA,CAAAC,SAAU,IAAG,GAAGH,OAAQ,CAAAI,KAAA,EAAOJ,OAAA,CAAQK,MAAM;IAE/D,KAAKC,OAAU,GAAAN,OAAA,CAAQO,IAAQ,IAAAC,QAAA,CAAAA,QAAA,CAASC,OAAA,CAAQC,YAAa;IAExD,KAAAC,UAAA,GAAaX,OAAQ,CAAAW,UAAA,IAAcH,QAAA,CAAAA,QAAS,CAAAI,UAAA;IAE5C,KAAAC,WAAA,GAAc,CAAC,CAACb,OAAQ,CAAAa,WAAA;EAAA;EAQjCC,WAAWC,kBAAA,EAA4BC,mBACvC;IACI,KAAKV,OAAA,CAAQF,KAAQ,GAAAa,IAAA,CAAKC,KAAM,CAAAH,kBAAA,GAAqB,KAAKJ,UAAU;IACpE,KAAKL,OAAA,CAAQD,MAAS,GAAAY,IAAA,CAAKC,KAAM,CAAAF,mBAAA,GAAsB,KAAKL,UAAU;IAEtE,MAAMQ,WAAc,QAAKb,OAAQ,CAAAF,KAAA,GAAQ,IAAK,CAAAO,UAAA;IAC9C,MAAMS,YAAe,QAAKd,OAAQ,CAAAD,MAAA,GAAS,IAAK,CAAAM,UAAA;IAEhD,KAAKV,MAAA,CAAOG,KAAQ,GAAAe,WAAA;IACpB,KAAKlB,MAAA,CAAOI,MAAS,GAAAe,YAAA;IAErB,IAAI,KAAKP,WACT;MACS,KAAAP,OAAA,CAAQe,KAAM,CAAAjB,KAAA,GAAW,GAAAe,WAAA;MACzB,KAAAb,OAAA,CAAQe,KAAM,CAAAhB,MAAA,GAAY,GAAAe,YAAA;IAAA;IASnC,KAAKtB,QAAS,CAAAwB,IAAA,CAAK,QAAU,EAAAH,WAAA,EAAaC,YAAY;IACjD,KAAAtB,QAAA,CAASyB,OAAA,CAAQC,MAAO,CAAAF,IAAA,CAAK,KAAKrB,MAAO,CAAAG,KAAA,EAAO,IAAK,CAAAH,MAAA,CAAOI,MAAM;EAAA;EAO3EoB,QAAQC,UACR;IAEI,IAAIA,UACJ;MACI,KAAKpB,OAAQ,CAAAqB,UAAA,EAAYC,WAAY,MAAKtB,OAAO;IAAA;IAGrD,KAAKR,QAAW;IAChB,KAAKQ,OAAU;IACf,KAAKL,MAAS;EAAA;AAEtB;AAzIaL,UAAA,CAGFiC,cAAiB;EAMpBzB,KAAO;EAMPC,MAAQ;EAORM,UAAA,EAAYH,QAAA,CAAAA,QAAS,CAAAI,UAAA;EAMrBC,WAAa;AACjB;AA7BSjB,UAAA,CAgCFkC,SAA+B;EAClCC,IAAM,GACFC,UAAA,CAAAC,aAAc,CAAAC,cAAA,EACdF,UAAA,CAAAC,aAAc,CAAAE,oBAAA,CAClB;EACAC,IAAM;AACV;AAqGJJ,UAAA,CAAAA,UAAA,CAAWK,GAAA,CAAIzC,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}