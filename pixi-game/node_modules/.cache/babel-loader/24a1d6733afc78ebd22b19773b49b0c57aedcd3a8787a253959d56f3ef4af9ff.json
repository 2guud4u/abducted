{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = function () {\n  return function spritesheetParser(resource, next) {\n    var imageResourceName = resource.name + '_image';\n\n    // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n    if (!resource.data || resource.type !== _resourceLoader.Resource.TYPE.JSON || !resource.data.frames || this.resources[imageResourceName]) {\n      next();\n      return;\n    }\n    var loadOptions = {\n      crossOrigin: resource.crossOrigin,\n      metadata: resource.metadata.imageMetadata,\n      parentResource: resource\n    };\n    var resourcePath = getResourcePath(resource, this.baseUrl);\n\n    // load the image for this sheet\n    this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res) {\n      if (res.error) {\n        next(res.error);\n        return;\n      }\n      var spritesheet = new _core.Spritesheet(res.texture.baseTexture, resource.data, resource.url);\n      spritesheet.parse(function () {\n        resource.spritesheet = spritesheet;\n        resource.textures = spritesheet.textures;\n        next();\n      });\n    });\n  };\n};\nexports.getResourcePath = getResourcePath;\nvar _resourceLoader = require('resource-loader');\nvar _url = require('url');\nvar _url2 = _interopRequireDefault(_url);\nvar _core = require('../core');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getResourcePath(resource, baseUrl) {\n  // Prepend url path unless the resource image is a data url\n  if (resource.isDataUrl) {\n    return resource.data.meta.image;\n  }\n  return _url2.default.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n}","map":{"version":3,"names":["spritesheetParser","resource","next","imageResourceName","name","data","type","_resourceLoader","Resource","TYPE","JSON","frames","resources","loadOptions","crossOrigin","metadata","imageMetadata","parentResource","resourcePath","getResourcePath","baseUrl","add","onImageLoad","res","error","spritesheet","_core","Spritesheet","texture","baseTexture","url","parse","textures","require","_url","isDataUrl","meta","image","_url2","default","resolve","replace"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/loaders/spritesheetParser.js"],"sourcesContent":["import { Resource } from 'resource-loader';\nimport url from 'url';\nimport { Spritesheet } from '../core';\n\nexport default function ()\n{\n    return function spritesheetParser(resource, next)\n    {\n        const imageResourceName = `${resource.name}_image`;\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== Resource.TYPE.JSON\n            || !resource.data.frames\n            || this.resources[imageResourceName]\n        )\n        {\n            next();\n\n            return;\n        }\n\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        const resourcePath = getResourcePath(resource, this.baseUrl);\n\n        // load the image for this sheet\n        this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res)\n        {\n            if (res.error)\n            {\n                next(res.error);\n\n                return;\n            }\n\n            const spritesheet = new Spritesheet(\n                res.texture.baseTexture,\n                resource.data,\n                resource.url\n            );\n\n            spritesheet.parse(() =>\n            {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    };\n}\n\nexport function getResourcePath(resource, baseUrl)\n{\n    // Prepend url path unless the resource image is a data url\n    if (resource.isDataUrl)\n    {\n        return resource.data.meta.image;\n    }\n\n    return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n}\n"],"mappings":";;;kBAIe,YACf;EACI,OAAO,SAASA,iBAATA,CAA2BC,QAA3B,EAAqCC,IAArC,EACP;IACI,IAAMC,iBAAA,GAAuBF,QAAA,CAASG,IAAhC,WAAN;;IAEA;IACA,IAAI,CAACH,QAAA,CAASI,IAAV,IACGJ,QAAA,CAASK,IAAT,KAAkBC,eAAA,CAAAC,QAAA,CAASC,IAAT,CAAcC,IADnC,IAEG,CAACT,QAAA,CAASI,IAAT,CAAcM,MAFlB,IAGG,KAAKC,SAAL,CAAeT,iBAAf,CAHP,EAKA;MACID,IAAA;MAEA;IACH;IAED,IAAMW,WAAA,GAAc;MAChBC,WAAA,EAAab,QAAA,CAASa,WADN;MAEhBC,QAAA,EAAUd,QAAA,CAASc,QAAT,CAAkBC,aAFZ;MAGhBC,cAAA,EAAgBhB;IAHA,CAApB;IAMA,IAAMiB,YAAA,GAAeC,eAAA,CAAgBlB,QAAhB,EAA0B,KAAKmB,OAA/B,CAArB;;IAEA;IACA,KAAKC,GAAL,CAASlB,iBAAT,EAA4Be,YAA5B,EAA0CL,WAA1C,EAAuD,SAASS,WAATA,CAAqBC,GAArB,EACvD;MACI,IAAIA,GAAA,CAAIC,KAAR,EACA;QACItB,IAAA,CAAKqB,GAAA,CAAIC,KAAT;QAEA;MACH;MAED,IAAMC,WAAA,GAAc,IAAAC,KAAA,CAAAC,WAAA,CAChBJ,GAAA,CAAIK,OAAJ,CAAYC,WADI,EAEhB5B,QAAA,CAASI,IAFO,EAGhBJ,QAAA,CAAS6B,GAHO,CAApB;MAMAL,WAAA,CAAYM,KAAZ,CAAkB,YAClB;QACI9B,QAAA,CAASwB,WAAT,GAAuBA,WAAvB;QACAxB,QAAA,CAAS+B,QAAT,GAAoBP,WAAA,CAAYO,QAAhC;QACA9B,IAAA;MACH,CALD;IAMH,CArBD;EAsBH,CA/CD;AAgDH,C;QAEeiB,e,GAAAA,e;AAxDhB,IAAAZ,eAAA,GAAA0B,OAAA;AACA,IAAAC,IAAA,GAAAD,OAAA;;AACA,IAAAP,KAAA,GAAAO,OAAA;;;;;;AAsDO,SAASd,eAATA,CAAyBlB,QAAzB,EAAmCmB,OAAnC,EACP;EACI;EACA,IAAInB,QAAA,CAASkC,SAAb,EACA;IACI,OAAOlC,QAAA,CAASI,IAAT,CAAc+B,IAAd,CAAmBC,KAA1B;EACH;EAED,OAAOC,KAAA,CAAAC,OAAA,CAAIC,OAAJ,CAAYvC,QAAA,CAAS6B,GAAT,CAAaW,OAAb,CAAqBrB,OAArB,EAA8B,EAA9B,CAAZ,EAA+CnB,QAAA,CAASI,IAAT,CAAc+B,IAAd,CAAmBC,KAAlE,CAAP;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}