{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _math = require('../math');\nvar _utils = require('../utils');\nvar _const = require('../const');\nvar _Texture = require('../textures/Texture');\nvar _Texture2 = _interopRequireDefault(_Texture);\nvar _Container2 = require('../display/Container');\nvar _Container3 = _interopRequireDefault(_Container2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar tempPoint = new _math.Point();\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * let sprite = new PIXI.Sprite.fromImage('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet}:\n *\n * ```js\n * PIXI.loader.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.loader.resources[\"assets/spritesheet.json\"].spritesheet;\n *   let sprite = new PIXI.Sprite(sheet.textures[\"image.png\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\n\nvar Sprite = function (_Container) {\n  _inherits(Sprite, _Container);\n\n  /**\n   * @param {PIXI.Texture} texture - The texture for this sprite\n   */\n  function Sprite(texture) {\n    _classCallCheck(this, Sprite);\n\n    /**\n     * The anchor sets the origin point of the texture.\n     * The default is 0,0 or taken from the {@link PIXI.Texture#defaultAnchor|Texture}\n     * passed to the constructor. A value of 0,0 means the texture's origin is the top left.\n     * Setting the anchor to 0.5,0.5 means the texture's origin is centered.\n     * Setting the anchor to 1,1 would mean the texture's origin point will be the bottom right corner.\n     * Note: Updating the {@link PIXI.Texture#defaultAnchor} after a Texture is\n     * created does _not_ update the Sprite's anchor values.\n     *\n     * @member {PIXI.ObservablePoint}\n     * @private\n     */\n    var _this = _possibleConstructorReturn(this, _Container.call(this));\n    _this._anchor = new _math.ObservablePoint(_this._onAnchorUpdate, _this, texture ? texture.defaultAnchor.x : 0, texture ? texture.defaultAnchor.y : 0);\n\n    /**\n     * The texture that the sprite is using\n     *\n     * @private\n     * @member {PIXI.Texture}\n     */\n    _this._texture = null;\n\n    /**\n     * The width of the sprite (this is initially set by the texture)\n     *\n     * @private\n     * @member {number}\n     */\n    _this._width = 0;\n\n    /**\n     * The height of the sprite (this is initially set by the texture)\n     *\n     * @private\n     * @member {number}\n     */\n    _this._height = 0;\n\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @private\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    _this._tint = null;\n    _this._tintRGB = null;\n    _this.tint = 0xFFFFFF;\n\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     * @see PIXI.BLEND_MODES\n     */\n    _this.blendMode = _const.BLEND_MODES.NORMAL;\n\n    /**\n     * The shader that will be used to render the sprite. Set to null to remove a current shader.\n     *\n     * @member {PIXI.Filter|PIXI.Shader}\n     */\n    _this.shader = null;\n\n    /**\n     * An internal cached value of the tint.\n     *\n     * @private\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    _this.cachedTint = 0xFFFFFF;\n\n    // call texture setter\n    _this.texture = texture || _Texture2.default.EMPTY;\n\n    /**\n     * this is used to store the vertex data of the sprite (basically a quad)\n     *\n     * @private\n     * @member {Float32Array}\n     */\n    _this.vertexData = new Float32Array(8);\n\n    /**\n     * This is used to calculate the bounds of the object IF it is a trimmed sprite\n     *\n     * @private\n     * @member {Float32Array}\n     */\n    _this.vertexTrimmedData = null;\n    _this._transformID = -1;\n    _this._textureID = -1;\n    _this._transformTrimmedID = -1;\n    _this._textureTrimmedID = -1;\n\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_renderWebGL' & '_renderCanvas' methods.\n     *\n     * @member {string}\n     * @default 'sprite'\n     */\n    _this.pluginName = 'sprite';\n    return _this;\n  }\n\n  /**\n   * When the texture is updated, this event will fire to update the scale and frame\n   *\n   * @private\n   */\n\n  Sprite.prototype._onTextureUpdate = function _onTextureUpdate() {\n    this._textureID = -1;\n    this._textureTrimmedID = -1;\n    this.cachedTint = 0xFFFFFF;\n\n    // so if _width is 0 then width was not set..\n    if (this._width) {\n      this.scale.x = (0, _utils.sign)(this.scale.x) * this._width / this._texture.orig.width;\n    }\n    if (this._height) {\n      this.scale.y = (0, _utils.sign)(this.scale.y) * this._height / this._texture.orig.height;\n    }\n  };\n\n  /**\n   * Called when the anchor position updates.\n   *\n   * @private\n   */\n\n  Sprite.prototype._onAnchorUpdate = function _onAnchorUpdate() {\n    this._transformID = -1;\n    this._transformTrimmedID = -1;\n  };\n\n  /**\n   * calculates worldTransform * vertices, store it in vertexData\n   */\n\n  Sprite.prototype.calculateVertices = function calculateVertices() {\n    if (this._transformID === this.transform._worldID && this._textureID === this._texture._updateID) {\n      return;\n    }\n    this._transformID = this.transform._worldID;\n    this._textureID = this._texture._updateID;\n\n    // set the vertex data\n\n    var texture = this._texture;\n    var wt = this.transform.worldTransform;\n    var a = wt.a;\n    var b = wt.b;\n    var c = wt.c;\n    var d = wt.d;\n    var tx = wt.tx;\n    var ty = wt.ty;\n    var vertexData = this.vertexData;\n    var trim = texture.trim;\n    var orig = texture.orig;\n    var anchor = this._anchor;\n    var w0 = 0;\n    var w1 = 0;\n    var h0 = 0;\n    var h1 = 0;\n    if (trim) {\n      // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n      // space before transforming the sprite coords.\n      w1 = trim.x - anchor._x * orig.width;\n      w0 = w1 + trim.width;\n      h1 = trim.y - anchor._y * orig.height;\n      h0 = h1 + trim.height;\n    } else {\n      w1 = -anchor._x * orig.width;\n      w0 = w1 + orig.width;\n      h1 = -anchor._y * orig.height;\n      h0 = h1 + orig.height;\n    }\n\n    // xy\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty;\n\n    // xy\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty;\n\n    // xy\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty;\n\n    // xy\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n  };\n\n  /**\n   * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\n   * This is used to ensure that the true width and height of a trimmed texture is respected\n   */\n\n  Sprite.prototype.calculateTrimmedVertices = function calculateTrimmedVertices() {\n    if (!this.vertexTrimmedData) {\n      this.vertexTrimmedData = new Float32Array(8);\n    } else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID) {\n      return;\n    }\n    this._transformTrimmedID = this.transform._worldID;\n    this._textureTrimmedID = this._texture._updateID;\n\n    // lets do some special trim code!\n    var texture = this._texture;\n    var vertexData = this.vertexTrimmedData;\n    var orig = texture.orig;\n    var anchor = this._anchor;\n\n    // lets calculate the new untrimmed bounds..\n    var wt = this.transform.worldTransform;\n    var a = wt.a;\n    var b = wt.b;\n    var c = wt.c;\n    var d = wt.d;\n    var tx = wt.tx;\n    var ty = wt.ty;\n    var w1 = -anchor._x * orig.width;\n    var w0 = w1 + orig.width;\n    var h1 = -anchor._y * orig.height;\n    var h0 = h1 + orig.height;\n\n    // xy\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty;\n\n    // xy\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty;\n\n    // xy\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty;\n\n    // xy\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n  };\n\n  /**\n  *\n  * Renders the object using the WebGL renderer\n  *\n  * @private\n  * @param {PIXI.WebGLRenderer} renderer - The webgl renderer to use.\n  */\n\n  Sprite.prototype._renderWebGL = function _renderWebGL(renderer) {\n    this.calculateVertices();\n    renderer.setObjectRenderer(renderer.plugins[this.pluginName]);\n    renderer.plugins[this.pluginName].render(this);\n  };\n\n  /**\n  * Renders the object using the Canvas renderer\n  *\n  * @private\n  * @param {PIXI.CanvasRenderer} renderer - The renderer\n  */\n\n  Sprite.prototype._renderCanvas = function _renderCanvas(renderer) {\n    renderer.plugins[this.pluginName].render(this);\n  };\n\n  /**\n   * Updates the bounds of the sprite.\n   *\n   * @private\n   */\n\n  Sprite.prototype._calculateBounds = function _calculateBounds() {\n    var trim = this._texture.trim;\n    var orig = this._texture.orig;\n\n    // First lets check to see if the current texture has a trim..\n    if (!trim || trim.width === orig.width && trim.height === orig.height) {\n      // no trim! lets use the usual calculations..\n      this.calculateVertices();\n      this._bounds.addQuad(this.vertexData);\n    } else {\n      // lets calculate a special trimmed bounds...\n      this.calculateTrimmedVertices();\n      this._bounds.addQuad(this.vertexTrimmedData);\n    }\n  };\n\n  /**\n   * Gets the local bounds of the sprite object.\n   *\n   * @param {PIXI.Rectangle} rect - The output rectangle.\n   * @return {PIXI.Rectangle} The bounds.\n   */\n\n  Sprite.prototype.getLocalBounds = function getLocalBounds(rect) {\n    // we can do a fast local bounds if the sprite has no children!\n    if (this.children.length === 0) {\n      this._bounds.minX = this._texture.orig.width * -this._anchor._x;\n      this._bounds.minY = this._texture.orig.height * -this._anchor._y;\n      this._bounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n      this._bounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n      if (!rect) {\n        if (!this._localBoundsRect) {\n          this._localBoundsRect = new _math.Rectangle();\n        }\n        rect = this._localBoundsRect;\n      }\n      return this._bounds.getRectangle(rect);\n    }\n    return _Container.prototype.getLocalBounds.call(this, rect);\n  };\n\n  /**\n   * Tests if a point is inside this sprite\n   *\n   * @param {PIXI.Point} point - the point to test\n   * @return {boolean} the result of the test\n   */\n\n  Sprite.prototype.containsPoint = function containsPoint(point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n    var width = this._texture.orig.width;\n    var height = this._texture.orig.height;\n    var x1 = -width * this.anchor.x;\n    var y1 = 0;\n    if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n      y1 = -height * this.anchor.y;\n      if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Destroys this sprite and optionally its texture and children\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n   *      method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n   * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n   */\n\n  Sprite.prototype.destroy = function destroy(options) {\n    _Container.prototype.destroy.call(this, options);\n    this._texture.off('update', this._onTextureUpdate, this);\n    this._anchor = null;\n    var destroyTexture = typeof options === 'boolean' ? options : options && options.texture;\n    if (destroyTexture) {\n      var destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;\n      this._texture.destroy(!!destroyBaseTexture);\n    }\n    this._texture = null;\n    this.shader = null;\n  };\n\n  // some helper functions..\n\n  /**\n   * Helper function that creates a new sprite based on the source you provide.\n   * The source can be - frame id, image url, video url, canvas element, video element, base texture\n   *\n   * @static\n   * @param {number|string|PIXI.BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from\n   * @return {PIXI.Sprite} The newly created sprite\n   */\n\n  Sprite.from = function from(source) {\n    return new Sprite(_Texture2.default.from(source));\n  };\n\n  /**\n   * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId\n   * The frame ids are created when a Texture packer file has been loaded\n   *\n   * @static\n   * @param {string} frameId - The frame Id of the texture in the cache\n   * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the frameId\n   */\n\n  Sprite.fromFrame = function fromFrame(frameId) {\n    var texture = _utils.TextureCache[frameId];\n    if (!texture) {\n      throw new Error('The frameId \"' + frameId + '\" does not exist in the texture cache');\n    }\n    return new Sprite(texture);\n  };\n\n  /**\n   * Helper function that creates a sprite that will contain a texture based on an image url\n   * If the image is not in the texture cache it will be loaded\n   *\n   * @static\n   * @param {string} imageId - The image url of the texture\n   * @param {boolean} [crossorigin=(auto)] - if you want to specify the cross-origin parameter\n   * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - if you want to specify the scale mode,\n   *  see {@link PIXI.SCALE_MODES} for possible values\n   * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the image id\n   */\n\n  Sprite.fromImage = function fromImage(imageId, crossorigin, scaleMode) {\n    return new Sprite(_Texture2.default.fromImage(imageId, crossorigin, scaleMode));\n  };\n\n  /**\n   * The width of the sprite, setting this will actually modify the scale to achieve the value set\n   *\n   * @member {number}\n   */\n\n  _createClass(Sprite, [{\n    key: 'width',\n    get: function get() {\n      return Math.abs(this.scale.x) * this._texture.orig.width;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      var s = (0, _utils.sign)(this.scale.x) || 1;\n      this.scale.x = s * value / this._texture.orig.width;\n      this._width = value;\n    }\n\n    /**\n     * The height of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n  }, {\n    key: 'height',\n    get: function get() {\n      return Math.abs(this.scale.y) * this._texture.orig.height;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      var s = (0, _utils.sign)(this.scale.y) || 1;\n      this.scale.y = s * value / this._texture.orig.height;\n      this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the texture.\n     * The default is 0,0 or taken from the {@link PIXI.Texture|Texture} passed to the constructor.\n     * Setting the texture at a later point of time does not change the anchor.\n     *\n     * 0,0 means the texture's origin is the top left, 0.5,0.5 is the center, 1,1 the bottom right corner.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n  }, {\n    key: 'anchor',\n    get: function get() {\n      return this._anchor;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      this._anchor.copy(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n  }, {\n    key: 'tint',\n    get: function get() {\n      return this._tint;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      this._tint = value;\n      this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /**\n     * The texture that the sprite is using\n     *\n     * @member {PIXI.Texture}\n     */\n  }, {\n    key: 'texture',\n    get: function get() {\n      return this._texture;\n    },\n    set: function set(value)\n    // eslint-disable-line require-jsdoc\n    {\n      if (this._texture === value) {\n        return;\n      }\n      this._texture = value || _Texture2.default.EMPTY;\n      this.cachedTint = 0xFFFFFF;\n      this._textureID = -1;\n      this._textureTrimmedID = -1;\n      if (value) {\n        // wait for the texture to load\n        if (value.baseTexture.hasLoaded) {\n          this._onTextureUpdate();\n        } else {\n          value.once('update', this._onTextureUpdate, this);\n        }\n      }\n    }\n  }]);\n  return Sprite;\n}(_Container3.default);\nexports.default = Sprite;","map":{"version":3,"names":["_math","require","_utils","_const","_Texture","_Container2","tempPoint","Point","Sprite","texture","_classCallCheck","_this","_possibleConstructorReturn","_Container","call","_anchor","ObservablePoint","_onAnchorUpdate","defaultAnchor","x","y","_texture","_width","_height","_tint","_tintRGB","tint","blendMode","BLEND_MODES","NORMAL","shader","cachedTint","_Texture2","default","EMPTY","vertexData","Float32Array","vertexTrimmedData","_transformID","_textureID","_transformTrimmedID","_textureTrimmedID","pluginName","_onTextureUpdate","scale","sign","orig","width","height","calculateVertices","transform","_worldID","_updateID","wt","worldTransform","a","b","c","d","tx","ty","trim","anchor","w0","w1","h0","h1","_x","_y","calculateTrimmedVertices","_renderWebGL","renderer","setObjectRenderer","plugins","render","_renderCanvas","_calculateBounds","_bounds","addQuad","getLocalBounds","rect","children","length","minX","minY","maxX","maxY","_localBoundsRect","Rectangle","getRectangle","prototype","containsPoint","point","applyInverse","x1","y1","destroy","options","off","destroyTexture","destroyBaseTexture","baseTexture","from","source","fromFrame","frameId","TextureCache","Error","fromImage","imageId","crossorigin","scaleMode","Math","abs","value","s","copy","hasLoaded","once"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/core/sprites/Sprite.js"],"sourcesContent":["import { Point, ObservablePoint, Rectangle } from '../math';\nimport { sign, TextureCache } from '../utils';\nimport { BLEND_MODES } from '../const';\nimport Texture from '../textures/Texture';\nimport Container from '../display/Container';\n\nconst tempPoint = new Point();\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * let sprite = new PIXI.Sprite.fromImage('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet}:\n *\n * ```js\n * PIXI.loader.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.loader.resources[\"assets/spritesheet.json\"].spritesheet;\n *   let sprite = new PIXI.Sprite(sheet.textures[\"image.png\"]);\n *   ...\n * }\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport default class Sprite extends Container\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture for this sprite\n     */\n    constructor(texture)\n    {\n        super();\n\n        /**\n         * The anchor sets the origin point of the texture.\n         * The default is 0,0 or taken from the {@link PIXI.Texture#defaultAnchor|Texture}\n         * passed to the constructor. A value of 0,0 means the texture's origin is the top left.\n         * Setting the anchor to 0.5,0.5 means the texture's origin is centered.\n         * Setting the anchor to 1,1 would mean the texture's origin point will be the bottom right corner.\n         * Note: Updating the {@link PIXI.Texture#defaultAnchor} after a Texture is\n         * created does _not_ update the Sprite's anchor values.\n         *\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        /**\n         * The texture that the sprite is using\n         *\n         * @private\n         * @member {PIXI.Texture}\n         */\n        this._texture = null;\n\n        /**\n         * The width of the sprite (this is initially set by the texture)\n         *\n         * @private\n         * @member {number}\n         */\n        this._width = 0;\n\n        /**\n         * The height of the sprite (this is initially set by the texture)\n         *\n         * @private\n         * @member {number}\n         */\n        this._height = 0;\n\n        /**\n         * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this._tint = null;\n        this._tintRGB = null;\n        this.tint = 0xFFFFFF;\n\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * The shader that will be used to render the sprite. Set to null to remove a current shader.\n         *\n         * @member {PIXI.Filter|PIXI.Shader}\n         */\n        this.shader = null;\n\n        /**\n         * An internal cached value of the tint.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this.cachedTint = 0xFFFFFF;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n\n        /**\n         * this is used to store the vertex data of the sprite (basically a quad)\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.vertexData = new Float32Array(8);\n\n        /**\n         * This is used to calculate the bounds of the object IF it is a trimmed sprite\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_renderWebGL' & '_renderCanvas' methods.\n         *\n         * @member {string}\n         * @default 'sprite'\n         */\n        this.pluginName = 'sprite';\n    }\n\n    /**\n     * When the texture is updated, this event will fire to update the scale and frame\n     *\n     * @private\n     */\n    _onTextureUpdate()\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this.cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /**\n     * Called when the anchor position updates.\n     *\n     * @private\n     */\n    _onAnchorUpdate()\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /**\n     * calculates worldTransform * vertices, store it in vertexData\n     */\n    calculateVertices()\n    {\n        if (this._transformID === this.transform._worldID && this._textureID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = this._texture._updateID;\n\n        // set the vertex data\n\n        const texture = this._texture;\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n         // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n     * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\n     * This is used to ensure that the true width and height of a trimmed texture is respected\n     */\n    calculateTrimmedVertices()\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n    *\n    * Renders the object using the WebGL renderer\n    *\n    * @private\n    * @param {PIXI.WebGLRenderer} renderer - The webgl renderer to use.\n    */\n    _renderWebGL(renderer)\n    {\n        this.calculateVertices();\n\n        renderer.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /**\n    * Renders the object using the Canvas renderer\n    *\n    * @private\n    * @param {PIXI.CanvasRenderer} renderer - The renderer\n    */\n    _renderCanvas(renderer)\n    {\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /**\n     * Updates the bounds of the sprite.\n     *\n     * @private\n     */\n    _calculateBounds()\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     * @param {PIXI.Rectangle} rect - The output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    getLocalBounds(rect)\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._bounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._bounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._bounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     *\n     * @param {PIXI.Point} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    containsPoint(point)\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options && options.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n        this.shader = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {number|string|PIXI.BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from\n     * @return {PIXI.Sprite} The newly created sprite\n     */\n    static from(source)\n    {\n        return new Sprite(Texture.from(source));\n    }\n\n    /**\n     * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId\n     * The frame ids are created when a Texture packer file has been loaded\n     *\n     * @static\n     * @param {string} frameId - The frame Id of the texture in the cache\n     * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the frameId\n     */\n    static fromFrame(frameId)\n    {\n        const texture = TextureCache[frameId];\n\n        if (!texture)\n        {\n            throw new Error(`The frameId \"${frameId}\" does not exist in the texture cache`);\n        }\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * Helper function that creates a sprite that will contain a texture based on an image url\n     * If the image is not in the texture cache it will be loaded\n     *\n     * @static\n     * @param {string} imageId - The image url of the texture\n     * @param {boolean} [crossorigin=(auto)] - if you want to specify the cross-origin parameter\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - if you want to specify the scale mode,\n     *  see {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the image id\n     */\n    static fromImage(imageId, crossorigin, scaleMode)\n    {\n        return new Sprite(Texture.fromImage(imageId, crossorigin, scaleMode));\n    }\n\n    /**\n     * The width of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the texture.\n     * The default is 0,0 or taken from the {@link PIXI.Texture|Texture} passed to the constructor.\n     * Setting the texture at a later point of time does not change the anchor.\n     *\n     * 0,0 means the texture's origin is the top left, 0.5,0.5 is the center, 1,1 the bottom right corner.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    get anchor()\n    {\n        return this._anchor;\n    }\n\n    set anchor(value) // eslint-disable-line require-jsdoc\n    {\n        this._anchor.copy(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint()\n    {\n        return this._tint;\n    }\n\n    set tint(value) // eslint-disable-line require-jsdoc\n    {\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /**\n     * The texture that the sprite is using\n     *\n     * @member {PIXI.Texture}\n     */\n    get texture()\n    {\n        return this._texture;\n    }\n\n    set texture(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this.cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.hasLoaded)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}