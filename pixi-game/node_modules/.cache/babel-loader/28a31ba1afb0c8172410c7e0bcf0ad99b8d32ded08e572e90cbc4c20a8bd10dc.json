{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar mesh = require('@pixi/mesh');\nvar PlaneGeometry = require('./geometry/PlaneGeometry.js');\nclass SimplePlane extends mesh.Mesh {\n  constructor(texture, verticesX, verticesY) {\n    const planeGeometry = new PlaneGeometry.PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n    const meshMaterial = new mesh.MeshMaterial(core.Texture.WHITE);\n    super(planeGeometry, meshMaterial);\n    this.texture = texture;\n    this.autoResize = true;\n  }\n  textureUpdated() {\n    this._textureID = this.shader.texture._updateID;\n    const geometry = this.geometry;\n    const {\n      width,\n      height\n    } = this.shader.texture;\n    if (this.autoResize && (geometry.width !== width || geometry.height !== height)) {\n      geometry.width = this.shader.texture.width;\n      geometry.height = this.shader.texture.height;\n      geometry.build();\n    }\n  }\n  set texture(value) {\n    if (this.shader.texture === value) {\n      return;\n    }\n    this.shader.texture = value;\n    this._textureID = -1;\n    if (value.baseTexture.valid) {\n      this.textureUpdated();\n    } else {\n      value.once(\"update\", this.textureUpdated, this);\n    }\n  }\n  get texture() {\n    return this.shader.texture;\n  }\n  _render(renderer) {\n    if (this._textureID !== this.shader.texture._updateID) {\n      this.textureUpdated();\n    }\n    super._render(renderer);\n  }\n  destroy(options) {\n    this.shader.texture.off(\"update\", this.textureUpdated, this);\n    super.destroy(options);\n  }\n}\nexports.SimplePlane = SimplePlane;","map":{"version":3,"names":["SimplePlane","mesh","Mesh","constructor","texture","verticesX","verticesY","planeGeometry","PlaneGeometry","width","height","meshMaterial","MeshMaterial","core","Texture","WHITE","autoResize","textureUpdated","_textureID","shader","_updateID","geometry","build","value","baseTexture","valid","once","_render","renderer","destroy","options","off"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/mesh-extras/src/SimplePlane.ts"],"sourcesContent":["import { Texture } from '@pixi/core';\nimport { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { PlaneGeometry } from './geometry/PlaneGeometry';\n\nimport type{ Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n * @example\n * import { Point, SimplePlane, Texture } from 'pixi.js';\n *\n * for (let i = 0; i < 20; i++) {\n *     points.push(new Point(i * 50, 0));\n * }\n * const SimplePlane = new SimplePlane(Texture.from('snake.png'), points);\n * @memberof PIXI\n */\nexport class SimplePlane extends Mesh\n{\n    /** The geometry is automatically updated when the texture size changes. */\n    public autoResize: boolean;\n\n    protected _textureID: number;\n\n    /**\n     * @param texture - The texture to use on the SimplePlane.\n     * @param verticesX - The number of vertices in the x-axis\n     * @param verticesY - The number of vertices in the y-axis\n     */\n    constructor(texture: Texture, verticesX?: number, verticesY?: number)\n    {\n        const planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n        const meshMaterial = new MeshMaterial(Texture.WHITE);\n\n        super(planeGeometry, meshMaterial);\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n        this.autoResize = true;\n    }\n\n    /**\n     * Method used for overrides, to do something in case texture frame was changed.\n     * Meshes based on plane can override it and change more details based on texture.\n     */\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n\n        const geometry: PlaneGeometry = this.geometry as any;\n        const { width, height } = this.shader.texture;\n\n        if (this.autoResize && (geometry.width !== width || geometry.height !== height))\n        {\n            geometry.width = this.shader.texture.width;\n            geometry.height = this.shader.texture.height;\n            geometry.build();\n        }\n    }\n\n    set texture(value: Texture)\n    {\n        // Track texture same way sprite does.\n        // For generated meshes like NineSlicePlane it can change the geometry.\n        // Unfortunately, this method might not work if you directly change texture in material.\n\n        if (this.shader.texture === value)\n        {\n            return;\n        }\n\n        this.shader.texture = value;\n        this._textureID = -1;\n\n        if (value.baseTexture.valid)\n        {\n            this.textureUpdated();\n        }\n        else\n        {\n            value.once('update', this.textureUpdated, this);\n        }\n    }\n\n    get texture(): Texture\n    {\n        return this.shader.texture;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this._textureID !== this.shader.texture._updateID)\n        {\n            this.textureUpdated();\n        }\n\n        super._render(renderer);\n    }\n\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        this.shader.texture.off('update', this.textureUpdated, this);\n        super.destroy(options);\n    }\n}\n"],"mappings":";;;;;;;;AAkBO,MAAMA,WAAA,SAAoBC,IAAA,CAAAC,IACjC;EAWIC,YAAYC,OAAkB,EAAAC,SAAA,EAAoBC,SAClD;IACU,MAAAC,aAAA,GAAgB,IAAIC,aAAA,CAAAA,aAAc,CAAAJ,OAAA,CAAQK,KAAA,EAAOL,OAAQ,CAAAM,MAAA,EAAQL,SAAA,EAAWC,SAAS;IAC3F,MAAMK,YAAe,OAAIV,IAAA,CAAAW,YAAa,CAAAC,IAAA,CAAAC,OAAA,CAAQC,KAAK;IAEnD,MAAMR,aAAA,EAAeI,YAAY;IAGjC,KAAKP,OAAU,GAAAA,OAAA;IACf,KAAKY,UAAa;EAAA;EAOtBC,cACAA,CAAA;IACS,KAAAC,UAAA,GAAa,IAAK,CAAAC,MAAA,CAAOf,OAAQ,CAAAgB,SAAA;IAEtC,MAAMC,QAAA,GAA0B,IAAK,CAAAA,QAAA;IACrC,MAAM;MAAEZ,KAAA;MAAOC;IAAW,SAAKS,MAAO,CAAAf,OAAA;IAEtC,IAAI,KAAKY,UAAe,KAAAK,QAAA,CAASZ,KAAA,KAAUA,KAAS,IAAAY,QAAA,CAASX,MAAA,KAAWA,MACxE;MACaW,QAAA,CAAAZ,KAAA,GAAQ,IAAK,CAAAU,MAAA,CAAOf,OAAQ,CAAAK,KAAA;MAC5BY,QAAA,CAAAX,MAAA,GAAS,IAAK,CAAAS,MAAA,CAAOf,OAAQ,CAAAM,MAAA;MACtCW,QAAA,CAASC,KAAM;IAAA;EACnB;EAGJ,IAAIlB,QAAQmB,KACZ;IAKQ,SAAKJ,MAAO,CAAAf,OAAA,KAAYmB,KAC5B;MACI;IAAA;IAGJ,KAAKJ,MAAA,CAAOf,OAAU,GAAAmB,KAAA;IACtB,KAAKL,UAAa;IAEd,IAAAK,KAAA,CAAMC,WAAA,CAAYC,KACtB;MACI,KAAKR,cAAe;IAAA,CAGxB;MACIM,KAAA,CAAMG,IAAK,WAAU,IAAK,CAAAT,cAAA,EAAgB,IAAI;IAAA;EAClD;EAGJ,IAAIb,OACJA,CAAA;IACI,OAAO,KAAKe,MAAO,CAAAf,OAAA;EAAA;EAGvBuB,QAAQC,QACR;IACI,IAAI,IAAK,CAAAV,UAAA,KAAe,IAAK,CAAAC,MAAA,CAAOf,OAAA,CAAQgB,SAC5C;MACI,KAAKH,cAAe;IAAA;IAGxB,MAAMU,OAAA,CAAQC,QAAQ;EAAA;EAGnBC,QAAQC,OACf;IACI,KAAKX,MAAA,CAAOf,OAAQ,CAAA2B,GAAA,CAAI,QAAU,OAAKd,cAAA,EAAgB,IAAI;IAC3D,MAAMY,OAAA,CAAQC,OAAO;EAAA;AAE7B"},"metadata":{},"sourceType":"script","externalDependencies":[]}