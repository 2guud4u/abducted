{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.Loader = undefined;\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _miniSignals = require('mini-signals');\nvar _miniSignals2 = _interopRequireDefault(_miniSignals);\nvar _parseUri = require('parse-uri');\nvar _parseUri2 = _interopRequireDefault(_parseUri);\nvar _async = require('./async');\nvar async = _interopRequireWildcard(_async);\nvar _Resource = require('./Resource');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n// some constants\nvar MAX_PROGRESS = 100;\nvar rgxExtractUrlHash = /(#[\\w-]+)?$/;\n\n/**\n * Manages the state and loading of multiple resources to load.\n *\n * @class\n */\n\nvar Loader = exports.Loader = function () {\n  /**\n   * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n   * @param {number} [concurrency=10] - The number of resources to load concurrently.\n   */\n  function Loader() {\n    var _this = this;\n    var baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var concurrency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    _classCallCheck(this, Loader);\n\n    /**\n     * The base url for all resources loaded by this loader.\n     *\n     * @member {string}\n     */\n    this.baseUrl = baseUrl;\n\n    /**\n     * The progress percent of the loader going through the queue.\n     *\n     * @member {number}\n     */\n    this.progress = 0;\n\n    /**\n     * Loading state of the loader, true if it is currently loading resources.\n     *\n     * @member {boolean}\n     */\n    this.loading = false;\n\n    /**\n     * A querystring to append to every URL added to the loader.\n     *\n     * This should be a valid query string *without* the question-mark (`?`). The loader will\n     * also *not* escape values for you. Make sure to escape your parameters with\n     * [`encodeURIComponent`](https://mdn.io/encodeURIComponent) before assigning this property.\n     *\n     * @example\n     * const loader = new Loader();\n     *\n     * loader.defaultQueryString = 'user=me&password=secret';\n     *\n     * // This will request 'image.png?user=me&password=secret'\n     * loader.add('image.png').load();\n     *\n     * loader.reset();\n     *\n     * // This will request 'image.png?v=1&user=me&password=secret'\n     * loader.add('iamge.png?v=1').load();\n     *\n     * @member {string}\n     */\n    this.defaultQueryString = '';\n\n    /**\n     * The middleware to run before loading each resource.\n     *\n     * @private\n     * @member {function[]}\n     */\n    this._beforeMiddleware = [];\n\n    /**\n     * The middleware to run after loading each resource.\n     *\n     * @private\n     * @member {function[]}\n     */\n    this._afterMiddleware = [];\n\n    /**\n     * The tracks the resources we are currently completing parsing for.\n     *\n     * @private\n     * @member {Resource[]}\n     */\n    this._resourcesParsing = [];\n\n    /**\n     * The `_loadResource` function bound with this object context.\n     *\n     * @private\n     * @member {function}\n     * @param {Resource} r - The resource to load\n     * @param {Function} d - The dequeue function\n     * @return {undefined}\n     */\n    this._boundLoadResource = function (r, d) {\n      return _this._loadResource(r, d);\n    };\n\n    /**\n     * The resources waiting to be loaded.\n     *\n     * @private\n     * @member {Resource[]}\n     */\n    this._queue = async.queue(this._boundLoadResource, concurrency);\n    this._queue.pause();\n\n    /**\n     * All the resources for this loader keyed by name.\n     *\n     * @member {object<string, Resource>}\n     */\n    this.resources = {};\n\n    /**\n     * Dispatched once per loaded or errored resource.\n     *\n     * The callback looks like {@link Loader.OnProgressSignal}.\n     *\n     * @member {Signal<Loader.OnProgressSignal>}\n     */\n    this.onProgress = new _miniSignals2.default();\n\n    /**\n     * Dispatched once per errored resource.\n     *\n     * The callback looks like {@link Loader.OnErrorSignal}.\n     *\n     * @member {Signal<Loader.OnErrorSignal>}\n     */\n    this.onError = new _miniSignals2.default();\n\n    /**\n     * Dispatched once per loaded resource.\n     *\n     * The callback looks like {@link Loader.OnLoadSignal}.\n     *\n     * @member {Signal<Loader.OnLoadSignal>}\n     */\n    this.onLoad = new _miniSignals2.default();\n\n    /**\n     * Dispatched when the loader begins to process the queue.\n     *\n     * The callback looks like {@link Loader.OnStartSignal}.\n     *\n     * @member {Signal<Loader.OnStartSignal>}\n     */\n    this.onStart = new _miniSignals2.default();\n\n    /**\n     * Dispatched when the queued resources all load.\n     *\n     * The callback looks like {@link Loader.OnCompleteSignal}.\n     *\n     * @member {Signal<Loader.OnCompleteSignal>}\n     */\n    this.onComplete = new _miniSignals2.default();\n\n    // Add default before middleware\n    for (var i = 0; i < Loader._defaultBeforeMiddleware.length; ++i) {\n      this.pre(Loader._defaultBeforeMiddleware[i]);\n    }\n\n    // Add default after middleware\n    for (var _i = 0; _i < Loader._defaultAfterMiddleware.length; ++_i) {\n      this.use(Loader._defaultAfterMiddleware[_i]);\n    }\n  }\n\n  /**\n   * When the progress changes the loader and resource are disaptched.\n   *\n   * @memberof Loader\n   * @callback OnProgressSignal\n   * @param {Loader} loader - The loader the progress is advancing on.\n   * @param {Resource} resource - The resource that has completed or failed to cause the progress to advance.\n   */\n\n  /**\n   * When an error occurrs the loader and resource are disaptched.\n   *\n   * @memberof Loader\n   * @callback OnErrorSignal\n   * @param {Loader} loader - The loader the error happened in.\n   * @param {Resource} resource - The resource that caused the error.\n   */\n\n  /**\n   * When a load completes the loader and resource are disaptched.\n   *\n   * @memberof Loader\n   * @callback OnLoadSignal\n   * @param {Loader} loader - The loader that laoded the resource.\n   * @param {Resource} resource - The resource that has completed loading.\n   */\n\n  /**\n   * When the loader starts loading resources it dispatches this callback.\n   *\n   * @memberof Loader\n   * @callback OnStartSignal\n   * @param {Loader} loader - The loader that has started loading resources.\n   */\n\n  /**\n   * When the loader completes loading resources it dispatches this callback.\n   *\n   * @memberof Loader\n   * @callback OnCompleteSignal\n   * @param {Loader} loader - The loader that has finished loading resources.\n   */\n\n  /**\n   * Options for a call to `.add()`.\n   *\n   * @see Loader#add\n   *\n   * @typedef {object} IAddOptions\n   * @property {string} [name] - The name of the resource to load, if not passed the url is used.\n   * @property {string} [key] - Alias for `name`.\n   * @property {string} [url] - The url for this resource, relative to the baseUrl of this loader.\n   * @property {string|boolean} [crossOrigin] - Is this request cross-origin? Default is to\n   *      determine automatically.\n   * @property {number} [timeout=0] - A timeout in milliseconds for the load. If the load takes\n   *      longer than this time it is cancelled and the load is considered a failure. If this value is\n   *      set to `0` then there is no explicit timeout.\n   * @property {Resource.LOAD_TYPE} [loadType=Resource.LOAD_TYPE.XHR] - How should this resource\n   *      be loaded?\n   * @property {Resource.XHR_RESPONSE_TYPE} [xhrType=Resource.XHR_RESPONSE_TYPE.DEFAULT] - How\n   *      should the data being loaded be interpreted when using XHR?\n   * @property {Resource.OnCompleteSignal} [onComplete] - Callback to add an an onComplete signal istener.\n   * @property {Resource.OnCompleteSignal} [callback] - Alias for `onComplete`.\n   * @property {Resource.IMetadata} [metadata] - Extra configuration for middleware and the Resource object.\n   */\n\n  /* eslint-disable require-jsdoc,valid-jsdoc */\n  /**\n   * Adds a resource (or multiple resources) to the loader queue.\n   *\n   * This function can take a wide variety of different parameters. The only thing that is always\n   * required the url to load. All the following will work:\n   *\n   * ```js\n   * loader\n   *     // normal param syntax\n   *     .add('key', 'http://...', function () {})\n   *     .add('http://...', function () {})\n   *     .add('http://...')\n   *\n   *     // object syntax\n   *     .add({\n   *         name: 'key2',\n   *         url: 'http://...'\n   *     }, function () {})\n   *     .add({\n   *         url: 'http://...'\n   *     }, function () {})\n   *     .add({\n   *         name: 'key3',\n   *         url: 'http://...'\n   *         onComplete: function () {}\n   *     })\n   *     .add({\n   *         url: 'https://...',\n   *         onComplete: function () {},\n   *         crossOrigin: true\n   *     })\n   *\n   *     // you can also pass an array of objects or urls or both\n   *     .add([\n   *         { name: 'key4', url: 'http://...', onComplete: function () {} },\n   *         { url: 'http://...', onComplete: function () {} },\n   *         'http://...'\n   *     ])\n   *\n   *     // and you can use both params and options\n   *     .add('key', 'http://...', { crossOrigin: true }, function () {})\n   *     .add('http://...', { crossOrigin: true }, function () {});\n   * ```\n   *\n   * @function\n   * @variation 1\n   * @param {string} name - The name of the resource to load.\n   * @param {string} url - The url for this resource, relative to the baseUrl of this loader.\n   * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n   * @return {this} Returns itself.\n   */ /**\n      * @function\n      * @variation 2\n      * @param {string} name - The name of the resource to load.\n      * @param {string} url - The url for this resource, relative to the baseUrl of this loader.\n      * @param {IAddOptions} [options] - The options for the load.\n      * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n      * @return {this} Returns itself.\n      */ /**\n         * @function\n         * @variation 3\n         * @param {string} url - The url for this resource, relative to the baseUrl of this loader.\n         * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n         * @return {this} Returns itself.\n         */ /**\n            * @function\n            * @variation 4\n            * @param {string} url - The url for this resource, relative to the baseUrl of this loader.\n            * @param {IAddOptions} [options] - The options for the load.\n            * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n            * @return {this} Returns itself.\n            */ /**\n               * @function\n               * @variation 5\n               * @param {IAddOptions} options - The options for the load. This object must contain a `url` property.\n               * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n               * @return {this} Returns itself.\n               */ /**\n                  * @function\n                  * @variation 6\n                  * @param {Array<IAddOptions|string>} resources - An array of resources to load, where each is\n                  *      either an object with the options or a string url. If you pass an object, it must contain a `url` property.\n                  * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n                  * @return {this} Returns itself.\n                  */\n\n  Loader.prototype.add = function add(name, url, options, cb) {\n    // special case of an array of objects or urls\n    if (Array.isArray(name)) {\n      for (var i = 0; i < name.length; ++i) {\n        this.add(name[i]);\n      }\n      return this;\n    }\n\n    // if an object is passed instead of params\n    if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {\n      cb = url || name.callback || name.onComplete;\n      options = name;\n      url = name.url;\n      name = name.name || name.key || name.url;\n    }\n\n    // case where no name is passed shift all args over by one.\n    if (typeof url !== 'string') {\n      cb = options;\n      options = url;\n      url = name;\n    }\n\n    // now that we shifted make sure we have a proper url.\n    if (typeof url !== 'string') {\n      throw new Error('No url passed to add resource to loader.');\n    }\n\n    // options are optional so people might pass a function and no options\n    if (typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    // if loading already you can only add resources that have a parent.\n    if (this.loading && (!options || !options.parentResource)) {\n      throw new Error('Cannot add resources while the loader is running.');\n    }\n\n    // check if resource already exists.\n    if (this.resources[name]) {\n      throw new Error('Resource named \"' + name + '\" already exists.');\n    }\n\n    // add base url if this isn't an absolute url\n    url = this._prepareUrl(url);\n\n    // create the store the resource\n    this.resources[name] = new _Resource.Resource(name, url, options);\n    if (typeof cb === 'function') {\n      this.resources[name].onAfterMiddleware.once(cb);\n    }\n\n    // if actively loading, make sure to adjust progress chunks for that parent and its children\n    if (this.loading) {\n      var parent = options.parentResource;\n      var incompleteChildren = [];\n      for (var _i2 = 0; _i2 < parent.children.length; ++_i2) {\n        if (!parent.children[_i2].isComplete) {\n          incompleteChildren.push(parent.children[_i2]);\n        }\n      }\n      var fullChunk = parent.progressChunk * (incompleteChildren.length + 1); // +1 for parent\n      var eachChunk = fullChunk / (incompleteChildren.length + 2); // +2 for parent & new child\n\n      parent.children.push(this.resources[name]);\n      parent.progressChunk = eachChunk;\n      for (var _i3 = 0; _i3 < incompleteChildren.length; ++_i3) {\n        incompleteChildren[_i3].progressChunk = eachChunk;\n      }\n      this.resources[name].progressChunk = eachChunk;\n    }\n\n    // add the resource to the queue\n    this._queue.push(this.resources[name]);\n    return this;\n  };\n  /* eslint-enable require-jsdoc,valid-jsdoc */\n\n  /**\n   * Sets up a middleware function that will run *before* the\n   * resource is loaded.\n   *\n   * @param {function} fn - The middleware function to register.\n   * @return {this} Returns itself.\n   */\n\n  Loader.prototype.pre = function pre(fn) {\n    this._beforeMiddleware.push(fn);\n    return this;\n  };\n\n  /**\n   * Sets up a middleware function that will run *after* the\n   * resource is loaded.\n   *\n   * @param {function} fn - The middleware function to register.\n   * @return {this} Returns itself.\n   */\n\n  Loader.prototype.use = function use(fn) {\n    this._afterMiddleware.push(fn);\n    return this;\n  };\n\n  /**\n   * Resets the queue of the loader to prepare for a new load.\n   *\n   * @return {this} Returns itself.\n   */\n\n  Loader.prototype.reset = function reset() {\n    this.progress = 0;\n    this.loading = false;\n    this._queue.kill();\n    this._queue.pause();\n\n    // abort all resource loads\n    for (var k in this.resources) {\n      var res = this.resources[k];\n      if (res._onLoadBinding) {\n        res._onLoadBinding.detach();\n      }\n      if (res.isLoading) {\n        res.abort();\n      }\n    }\n    this.resources = {};\n    return this;\n  };\n\n  /**\n   * Starts loading the queued resources.\n   *\n   * @param {function} [cb] - Optional callback that will be bound to the `complete` event.\n   * @return {this} Returns itself.\n   */\n\n  Loader.prototype.load = function load(cb) {\n    // register complete callback if they pass one\n    if (typeof cb === 'function') {\n      this.onComplete.once(cb);\n    }\n\n    // if the queue has already started we are done here\n    if (this.loading) {\n      return this;\n    }\n    if (this._queue.idle()) {\n      this._onStart();\n      this._onComplete();\n    } else {\n      // distribute progress chunks\n      var numTasks = this._queue._tasks.length;\n      var chunk = MAX_PROGRESS / numTasks;\n      for (var i = 0; i < this._queue._tasks.length; ++i) {\n        this._queue._tasks[i].data.progressChunk = chunk;\n      }\n\n      // notify we are starting\n      this._onStart();\n\n      // start loading\n      this._queue.resume();\n    }\n    return this;\n  };\n\n  /**\n   * The number of resources to load concurrently.\n   *\n   * @member {number}\n   * @default 10\n   */\n\n  /**\n   * Prepares a url for usage based on the configuration of this object\n   *\n   * @private\n   * @param {string} url - The url to prepare.\n   * @return {string} The prepared url.\n   */\n  Loader.prototype._prepareUrl = function _prepareUrl(url) {\n    var parsedUrl = (0, _parseUri2.default)(url, {\n      strictMode: true\n    });\n    var result = void 0;\n\n    // absolute url, just use it as is.\n    if (parsedUrl.protocol || !parsedUrl.path || url.indexOf('//') === 0) {\n      result = url;\n    }\n    // if baseUrl doesn't end in slash and url doesn't start with slash, then add a slash inbetween\n    else if (this.baseUrl.length && this.baseUrl.lastIndexOf('/') !== this.baseUrl.length - 1 && url.charAt(0) !== '/') {\n      result = this.baseUrl + '/' + url;\n    } else {\n      result = this.baseUrl + url;\n    }\n\n    // if we need to add a default querystring, there is a bit more work\n    if (this.defaultQueryString) {\n      var hash = rgxExtractUrlHash.exec(result)[0];\n      result = result.substr(0, result.length - hash.length);\n      if (result.indexOf('?') !== -1) {\n        result += '&' + this.defaultQueryString;\n      } else {\n        result += '?' + this.defaultQueryString;\n      }\n      result += hash;\n    }\n    return result;\n  };\n\n  /**\n   * Loads a single resource.\n   *\n   * @private\n   * @param {Resource} resource - The resource to load.\n   * @param {function} dequeue - The function to call when we need to dequeue this item.\n   */\n\n  Loader.prototype._loadResource = function _loadResource(resource, dequeue) {\n    var _this2 = this;\n    resource._dequeue = dequeue;\n\n    // run before middleware\n    async.eachSeries(this._beforeMiddleware, function (fn, next) {\n      fn.call(_this2, resource, function () {\n        // if the before middleware marks the resource as complete,\n        // break and don't process any more before middleware\n        next(resource.isComplete ? {} : null);\n      });\n    }, function () {\n      if (resource.isComplete) {\n        _this2._onLoad(resource);\n      } else {\n        resource._onLoadBinding = resource.onComplete.once(_this2._onLoad, _this2);\n        resource.load();\n      }\n    }, true);\n  };\n\n  /**\n   * Called once loading has started.\n   *\n   * @private\n   */\n\n  Loader.prototype._onStart = function _onStart() {\n    this.progress = 0;\n    this.loading = true;\n    this.onStart.dispatch(this);\n  };\n\n  /**\n   * Called once each resource has loaded.\n   *\n   * @private\n   */\n\n  Loader.prototype._onComplete = function _onComplete() {\n    this.progress = MAX_PROGRESS;\n    this.loading = false;\n    this.onComplete.dispatch(this, this.resources);\n  };\n\n  /**\n   * Called each time a resources is loaded.\n   *\n   * @private\n   * @param {Resource} resource - The resource that was loaded\n   */\n\n  Loader.prototype._onLoad = function _onLoad(resource) {\n    var _this3 = this;\n    resource._onLoadBinding = null;\n\n    // remove this resource from the async queue, and add it to our list of resources that are being parsed\n    this._resourcesParsing.push(resource);\n    resource._dequeue();\n\n    // run all the after middleware for this resource\n    async.eachSeries(this._afterMiddleware, function (fn, next) {\n      fn.call(_this3, resource, next);\n    }, function () {\n      resource.onAfterMiddleware.dispatch(resource);\n      _this3.progress = Math.min(MAX_PROGRESS, _this3.progress + resource.progressChunk);\n      _this3.onProgress.dispatch(_this3, resource);\n      if (resource.error) {\n        _this3.onError.dispatch(resource.error, _this3, resource);\n      } else {\n        _this3.onLoad.dispatch(_this3, resource);\n      }\n      _this3._resourcesParsing.splice(_this3._resourcesParsing.indexOf(resource), 1);\n\n      // do completion check\n      if (_this3._queue.idle() && _this3._resourcesParsing.length === 0) {\n        _this3._onComplete();\n      }\n    }, true);\n  };\n  _createClass(Loader, [{\n    key: 'concurrency',\n    get: function get() {\n      return this._queue.concurrency;\n    }\n    // eslint-disable-next-line require-jsdoc\n    ,\n\n    set: function set(concurrency) {\n      this._queue.concurrency = concurrency;\n    }\n  }]);\n  return Loader;\n}();\n\n/**\n * A default array of middleware to run before loading each resource.\n * Each of these middlewares are added to any new Loader instances when they are created.\n *\n * @private\n * @member {function[]}\n */\n\nLoader._defaultBeforeMiddleware = [];\n\n/**\n * A default array of middleware to run after loading each resource.\n * Each of these middlewares are added to any new Loader instances when they are created.\n *\n * @private\n * @member {function[]}\n */\nLoader._defaultAfterMiddleware = [];\n\n/**\n * Sets up a middleware function that will run *before* the\n * resource is loaded.\n *\n * @static\n * @param {function} fn - The middleware function to register.\n * @return {Loader} Returns itself.\n */\nLoader.pre = function LoaderPreStatic(fn) {\n  Loader._defaultBeforeMiddleware.push(fn);\n  return Loader;\n};\n\n/**\n * Sets up a middleware function that will run *after* the\n * resource is loaded.\n *\n * @static\n * @param {function} fn - The middleware function to register.\n * @return {Loader} Returns itself.\n */\nLoader.use = function LoaderUseStatic(fn) {\n  Loader._defaultAfterMiddleware.push(fn);\n  return Loader;\n};","map":{"version":3,"names":["_miniSignals","require","_parseUri","_async","async","_Resource","MAX_PROGRESS","rgxExtractUrlHash","Loader","_this","baseUrl","arguments","length","undefined","concurrency","_classCallCheck","progress","loading","defaultQueryString","_beforeMiddleware","_afterMiddleware","_resourcesParsing","_boundLoadResource","r","d","_loadResource","_queue","queue","pause","resources","onProgress","_miniSignals2","default","onError","onLoad","onStart","onComplete","i","_defaultBeforeMiddleware","pre","_i","_defaultAfterMiddleware","use","add","name","url","options","cb","Array","isArray","_typeof","callback","key","Error","parentResource","_prepareUrl","Resource","onAfterMiddleware","once","parent","incompleteChildren","_i2","children","isComplete","push","fullChunk","progressChunk","eachChunk","_i3","fn","reset","kill","k","res","_onLoadBinding","detach","isLoading","abort","load","idle","_onStart","_onComplete","numTasks","_tasks","chunk","data","resume","parsedUrl","_parseUri2","strictMode","result","protocol","path","indexOf","lastIndexOf","charAt","hash","exec","substr","resource","dequeue","_this2","_dequeue","eachSeries","next","call","_onLoad","dispatch","_this3","Math","min","error","splice","LoaderPreStatic","LoaderUseStatic"],"sources":["/Users/jiahuajiang/node_modules/resource-loader/src/Loader.js"],"sourcesContent":["import Signal from 'mini-signals';\nimport parseUri from 'parse-uri';\nimport * as async from './async';\nimport { Resource } from './Resource';\n\n// some constants\nconst MAX_PROGRESS = 100;\nconst rgxExtractUrlHash = /(#[\\w-]+)?$/;\n\n/**\n * Manages the state and loading of multiple resources to load.\n *\n * @class\n */\nexport class Loader {\n    /**\n     * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n     * @param {number} [concurrency=10] - The number of resources to load concurrently.\n     */\n    constructor(baseUrl = '', concurrency = 10) {\n        /**\n         * The base url for all resources loaded by this loader.\n         *\n         * @member {string}\n         */\n        this.baseUrl = baseUrl;\n\n        /**\n         * The progress percent of the loader going through the queue.\n         *\n         * @member {number}\n         */\n        this.progress = 0;\n\n        /**\n         * Loading state of the loader, true if it is currently loading resources.\n         *\n         * @member {boolean}\n         */\n        this.loading = false;\n\n        /**\n         * A querystring to append to every URL added to the loader.\n         *\n         * This should be a valid query string *without* the question-mark (`?`). The loader will\n         * also *not* escape values for you. Make sure to escape your parameters with\n         * [`encodeURIComponent`](https://mdn.io/encodeURIComponent) before assigning this property.\n         *\n         * @example\n         * const loader = new Loader();\n         *\n         * loader.defaultQueryString = 'user=me&password=secret';\n         *\n         * // This will request 'image.png?user=me&password=secret'\n         * loader.add('image.png').load();\n         *\n         * loader.reset();\n         *\n         * // This will request 'image.png?v=1&user=me&password=secret'\n         * loader.add('iamge.png?v=1').load();\n         *\n         * @member {string}\n         */\n        this.defaultQueryString = '';\n\n        /**\n         * The middleware to run before loading each resource.\n         *\n         * @private\n         * @member {function[]}\n         */\n        this._beforeMiddleware = [];\n\n        /**\n         * The middleware to run after loading each resource.\n         *\n         * @private\n         * @member {function[]}\n         */\n        this._afterMiddleware = [];\n\n        /**\n         * The tracks the resources we are currently completing parsing for.\n         *\n         * @private\n         * @member {Resource[]}\n         */\n        this._resourcesParsing = [];\n\n        /**\n         * The `_loadResource` function bound with this object context.\n         *\n         * @private\n         * @member {function}\n         * @param {Resource} r - The resource to load\n         * @param {Function} d - The dequeue function\n         * @return {undefined}\n         */\n        this._boundLoadResource = (r, d) => this._loadResource(r, d);\n\n        /**\n         * The resources waiting to be loaded.\n         *\n         * @private\n         * @member {Resource[]}\n         */\n        this._queue = async.queue(this._boundLoadResource, concurrency);\n\n        this._queue.pause();\n\n        /**\n         * All the resources for this loader keyed by name.\n         *\n         * @member {object<string, Resource>}\n         */\n        this.resources = {};\n\n        /**\n         * Dispatched once per loaded or errored resource.\n         *\n         * The callback looks like {@link Loader.OnProgressSignal}.\n         *\n         * @member {Signal<Loader.OnProgressSignal>}\n         */\n        this.onProgress = new Signal();\n\n        /**\n         * Dispatched once per errored resource.\n         *\n         * The callback looks like {@link Loader.OnErrorSignal}.\n         *\n         * @member {Signal<Loader.OnErrorSignal>}\n         */\n        this.onError = new Signal();\n\n        /**\n         * Dispatched once per loaded resource.\n         *\n         * The callback looks like {@link Loader.OnLoadSignal}.\n         *\n         * @member {Signal<Loader.OnLoadSignal>}\n         */\n        this.onLoad = new Signal();\n\n        /**\n         * Dispatched when the loader begins to process the queue.\n         *\n         * The callback looks like {@link Loader.OnStartSignal}.\n         *\n         * @member {Signal<Loader.OnStartSignal>}\n         */\n        this.onStart = new Signal();\n\n        /**\n         * Dispatched when the queued resources all load.\n         *\n         * The callback looks like {@link Loader.OnCompleteSignal}.\n         *\n         * @member {Signal<Loader.OnCompleteSignal>}\n         */\n        this.onComplete = new Signal();\n\n        // Add default before middleware\n        for (let i = 0; i < Loader._defaultBeforeMiddleware.length; ++i) {\n            this.pre(Loader._defaultBeforeMiddleware[i]);\n        }\n\n        // Add default after middleware\n        for (let i = 0; i < Loader._defaultAfterMiddleware.length; ++i) {\n            this.use(Loader._defaultAfterMiddleware[i]);\n        }\n    }\n\n    /**\n     * When the progress changes the loader and resource are disaptched.\n     *\n     * @memberof Loader\n     * @callback OnProgressSignal\n     * @param {Loader} loader - The loader the progress is advancing on.\n     * @param {Resource} resource - The resource that has completed or failed to cause the progress to advance.\n     */\n\n    /**\n     * When an error occurrs the loader and resource are disaptched.\n     *\n     * @memberof Loader\n     * @callback OnErrorSignal\n     * @param {Loader} loader - The loader the error happened in.\n     * @param {Resource} resource - The resource that caused the error.\n     */\n\n    /**\n     * When a load completes the loader and resource are disaptched.\n     *\n     * @memberof Loader\n     * @callback OnLoadSignal\n     * @param {Loader} loader - The loader that laoded the resource.\n     * @param {Resource} resource - The resource that has completed loading.\n     */\n\n    /**\n     * When the loader starts loading resources it dispatches this callback.\n     *\n     * @memberof Loader\n     * @callback OnStartSignal\n     * @param {Loader} loader - The loader that has started loading resources.\n     */\n\n    /**\n     * When the loader completes loading resources it dispatches this callback.\n     *\n     * @memberof Loader\n     * @callback OnCompleteSignal\n     * @param {Loader} loader - The loader that has finished loading resources.\n     */\n\n    /**\n     * Options for a call to `.add()`.\n     *\n     * @see Loader#add\n     *\n     * @typedef {object} IAddOptions\n     * @property {string} [name] - The name of the resource to load, if not passed the url is used.\n     * @property {string} [key] - Alias for `name`.\n     * @property {string} [url] - The url for this resource, relative to the baseUrl of this loader.\n     * @property {string|boolean} [crossOrigin] - Is this request cross-origin? Default is to\n     *      determine automatically.\n     * @property {number} [timeout=0] - A timeout in milliseconds for the load. If the load takes\n     *      longer than this time it is cancelled and the load is considered a failure. If this value is\n     *      set to `0` then there is no explicit timeout.\n     * @property {Resource.LOAD_TYPE} [loadType=Resource.LOAD_TYPE.XHR] - How should this resource\n     *      be loaded?\n     * @property {Resource.XHR_RESPONSE_TYPE} [xhrType=Resource.XHR_RESPONSE_TYPE.DEFAULT] - How\n     *      should the data being loaded be interpreted when using XHR?\n     * @property {Resource.OnCompleteSignal} [onComplete] - Callback to add an an onComplete signal istener.\n     * @property {Resource.OnCompleteSignal} [callback] - Alias for `onComplete`.\n     * @property {Resource.IMetadata} [metadata] - Extra configuration for middleware and the Resource object.\n     */\n\n    /* eslint-disable require-jsdoc,valid-jsdoc */\n    /**\n     * Adds a resource (or multiple resources) to the loader queue.\n     *\n     * This function can take a wide variety of different parameters. The only thing that is always\n     * required the url to load. All the following will work:\n     *\n     * ```js\n     * loader\n     *     // normal param syntax\n     *     .add('key', 'http://...', function () {})\n     *     .add('http://...', function () {})\n     *     .add('http://...')\n     *\n     *     // object syntax\n     *     .add({\n     *         name: 'key2',\n     *         url: 'http://...'\n     *     }, function () {})\n     *     .add({\n     *         url: 'http://...'\n     *     }, function () {})\n     *     .add({\n     *         name: 'key3',\n     *         url: 'http://...'\n     *         onComplete: function () {}\n     *     })\n     *     .add({\n     *         url: 'https://...',\n     *         onComplete: function () {},\n     *         crossOrigin: true\n     *     })\n     *\n     *     // you can also pass an array of objects or urls or both\n     *     .add([\n     *         { name: 'key4', url: 'http://...', onComplete: function () {} },\n     *         { url: 'http://...', onComplete: function () {} },\n     *         'http://...'\n     *     ])\n     *\n     *     // and you can use both params and options\n     *     .add('key', 'http://...', { crossOrigin: true }, function () {})\n     *     .add('http://...', { crossOrigin: true }, function () {});\n     * ```\n     *\n     * @function\n     * @variation 1\n     * @param {string} name - The name of the resource to load.\n     * @param {string} url - The url for this resource, relative to the baseUrl of this loader.\n     * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n     * @return {this} Returns itself.\n     *//**\n     * @function\n     * @variation 2\n     * @param {string} name - The name of the resource to load.\n     * @param {string} url - The url for this resource, relative to the baseUrl of this loader.\n     * @param {IAddOptions} [options] - The options for the load.\n     * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n     * @return {this} Returns itself.\n     *//**\n     * @function\n     * @variation 3\n     * @param {string} url - The url for this resource, relative to the baseUrl of this loader.\n     * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n     * @return {this} Returns itself.\n     *//**\n     * @function\n     * @variation 4\n     * @param {string} url - The url for this resource, relative to the baseUrl of this loader.\n     * @param {IAddOptions} [options] - The options for the load.\n     * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n     * @return {this} Returns itself.\n     *//**\n     * @function\n     * @variation 5\n     * @param {IAddOptions} options - The options for the load. This object must contain a `url` property.\n     * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n     * @return {this} Returns itself.\n     *//**\n     * @function\n     * @variation 6\n     * @param {Array<IAddOptions|string>} resources - An array of resources to load, where each is\n     *      either an object with the options or a string url. If you pass an object, it must contain a `url` property.\n     * @param {Resource.OnCompleteSignal} [callback] - Function to call when this specific resource completes loading.\n     * @return {this} Returns itself.\n     */\n    add(name, url, options, cb) {\n        // special case of an array of objects or urls\n        if (Array.isArray(name)) {\n            for (let i = 0; i < name.length; ++i) {\n                this.add(name[i]);\n            }\n\n            return this;\n        }\n\n        // if an object is passed instead of params\n        if (typeof name === 'object') {\n            cb = url || name.callback || name.onComplete;\n            options = name;\n            url = name.url;\n            name = name.name || name.key || name.url;\n        }\n\n        // case where no name is passed shift all args over by one.\n        if (typeof url !== 'string') {\n            cb = options;\n            options = url;\n            url = name;\n        }\n\n        // now that we shifted make sure we have a proper url.\n        if (typeof url !== 'string') {\n            throw new Error('No url passed to add resource to loader.');\n        }\n\n        // options are optional so people might pass a function and no options\n        if (typeof options === 'function') {\n            cb = options;\n            options = null;\n        }\n\n        // if loading already you can only add resources that have a parent.\n        if (this.loading && (!options || !options.parentResource)) {\n            throw new Error('Cannot add resources while the loader is running.');\n        }\n\n        // check if resource already exists.\n        if (this.resources[name]) {\n            throw new Error(`Resource named \"${name}\" already exists.`);\n        }\n\n        // add base url if this isn't an absolute url\n        url = this._prepareUrl(url);\n\n        // create the store the resource\n        this.resources[name] = new Resource(name, url, options);\n\n        if (typeof cb === 'function') {\n            this.resources[name].onAfterMiddleware.once(cb);\n        }\n\n        // if actively loading, make sure to adjust progress chunks for that parent and its children\n        if (this.loading) {\n            const parent = options.parentResource;\n            const incompleteChildren = [];\n\n            for (let i = 0; i < parent.children.length; ++i) {\n                if (!parent.children[i].isComplete) {\n                    incompleteChildren.push(parent.children[i]);\n                }\n            }\n\n            const fullChunk = parent.progressChunk * (incompleteChildren.length + 1); // +1 for parent\n            const eachChunk = fullChunk / (incompleteChildren.length + 2); // +2 for parent & new child\n\n            parent.children.push(this.resources[name]);\n            parent.progressChunk = eachChunk;\n\n            for (let i = 0; i < incompleteChildren.length; ++i) {\n                incompleteChildren[i].progressChunk = eachChunk;\n            }\n\n            this.resources[name].progressChunk = eachChunk;\n        }\n\n        // add the resource to the queue\n        this._queue.push(this.resources[name]);\n\n        return this;\n    }\n    /* eslint-enable require-jsdoc,valid-jsdoc */\n\n    /**\n     * Sets up a middleware function that will run *before* the\n     * resource is loaded.\n     *\n     * @param {function} fn - The middleware function to register.\n     * @return {this} Returns itself.\n     */\n    pre(fn) {\n        this._beforeMiddleware.push(fn);\n\n        return this;\n    }\n\n    /**\n     * Sets up a middleware function that will run *after* the\n     * resource is loaded.\n     *\n     * @param {function} fn - The middleware function to register.\n     * @return {this} Returns itself.\n     */\n    use(fn) {\n        this._afterMiddleware.push(fn);\n\n        return this;\n    }\n\n    /**\n     * Resets the queue of the loader to prepare for a new load.\n     *\n     * @return {this} Returns itself.\n     */\n    reset() {\n        this.progress = 0;\n        this.loading = false;\n\n        this._queue.kill();\n        this._queue.pause();\n\n        // abort all resource loads\n        for (const k in this.resources) {\n            const res = this.resources[k];\n\n            if (res._onLoadBinding) {\n                res._onLoadBinding.detach();\n            }\n\n            if (res.isLoading) {\n                res.abort();\n            }\n        }\n\n        this.resources = {};\n\n        return this;\n    }\n\n    /**\n     * Starts loading the queued resources.\n     *\n     * @param {function} [cb] - Optional callback that will be bound to the `complete` event.\n     * @return {this} Returns itself.\n     */\n    load(cb) {\n        // register complete callback if they pass one\n        if (typeof cb === 'function') {\n            this.onComplete.once(cb);\n        }\n\n        // if the queue has already started we are done here\n        if (this.loading) {\n            return this;\n        }\n\n        if (this._queue.idle()) {\n            this._onStart();\n            this._onComplete();\n        }\n        else {\n            // distribute progress chunks\n            const numTasks = this._queue._tasks.length;\n            const chunk = MAX_PROGRESS / numTasks;\n\n            for (let i = 0; i < this._queue._tasks.length; ++i) {\n                this._queue._tasks[i].data.progressChunk = chunk;\n            }\n\n            // notify we are starting\n            this._onStart();\n\n            // start loading\n            this._queue.resume();\n        }\n\n        return this;\n    }\n\n    /**\n     * The number of resources to load concurrently.\n     *\n     * @member {number}\n     * @default 10\n     */\n    get concurrency() {\n        return this._queue.concurrency;\n    }\n    // eslint-disable-next-line require-jsdoc\n    set concurrency(concurrency) {\n        this._queue.concurrency = concurrency;\n    }\n\n    /**\n     * Prepares a url for usage based on the configuration of this object\n     *\n     * @private\n     * @param {string} url - The url to prepare.\n     * @return {string} The prepared url.\n     */\n    _prepareUrl(url) {\n        const parsedUrl = parseUri(url, { strictMode: true });\n        let result;\n\n        // absolute url, just use it as is.\n        if (parsedUrl.protocol || !parsedUrl.path || url.indexOf('//') === 0) {\n            result = url;\n        }\n        // if baseUrl doesn't end in slash and url doesn't start with slash, then add a slash inbetween\n        else if (this.baseUrl.length\n            && this.baseUrl.lastIndexOf('/') !== this.baseUrl.length - 1\n            && url.charAt(0) !== '/'\n        ) {\n            result = `${this.baseUrl}/${url}`;\n        }\n        else {\n            result = this.baseUrl + url;\n        }\n\n        // if we need to add a default querystring, there is a bit more work\n        if (this.defaultQueryString) {\n            const hash = rgxExtractUrlHash.exec(result)[0];\n\n            result = result.substr(0, result.length - hash.length);\n\n            if (result.indexOf('?') !== -1) {\n                result += `&${this.defaultQueryString}`;\n            }\n            else {\n                result += `?${this.defaultQueryString}`;\n            }\n\n            result += hash;\n        }\n\n        return result;\n    }\n\n    /**\n     * Loads a single resource.\n     *\n     * @private\n     * @param {Resource} resource - The resource to load.\n     * @param {function} dequeue - The function to call when we need to dequeue this item.\n     */\n    _loadResource(resource, dequeue) {\n        resource._dequeue = dequeue;\n\n        // run before middleware\n        async.eachSeries(\n            this._beforeMiddleware,\n            (fn, next) => {\n                fn.call(this, resource, () => {\n                    // if the before middleware marks the resource as complete,\n                    // break and don't process any more before middleware\n                    next(resource.isComplete ? {} : null);\n                });\n            },\n            () => {\n                if (resource.isComplete) {\n                    this._onLoad(resource);\n                }\n                else {\n                    resource._onLoadBinding = resource.onComplete.once(this._onLoad, this);\n                    resource.load();\n                }\n            },\n            true\n        );\n    }\n\n    /**\n     * Called once loading has started.\n     *\n     * @private\n     */\n    _onStart() {\n        this.progress = 0;\n        this.loading = true;\n        this.onStart.dispatch(this);\n    }\n\n    /**\n     * Called once each resource has loaded.\n     *\n     * @private\n     */\n    _onComplete() {\n        this.progress = MAX_PROGRESS;\n        this.loading = false;\n        this.onComplete.dispatch(this, this.resources);\n    }\n\n    /**\n     * Called each time a resources is loaded.\n     *\n     * @private\n     * @param {Resource} resource - The resource that was loaded\n     */\n    _onLoad(resource) {\n        resource._onLoadBinding = null;\n\n        // remove this resource from the async queue, and add it to our list of resources that are being parsed\n        this._resourcesParsing.push(resource);\n        resource._dequeue();\n\n        // run all the after middleware for this resource\n        async.eachSeries(\n            this._afterMiddleware,\n            (fn, next) => {\n                fn.call(this, resource, next);\n            },\n            () => {\n                resource.onAfterMiddleware.dispatch(resource);\n\n                this.progress = Math.min(MAX_PROGRESS, this.progress + resource.progressChunk);\n                this.onProgress.dispatch(this, resource);\n\n                if (resource.error) {\n                    this.onError.dispatch(resource.error, this, resource);\n                }\n                else {\n                    this.onLoad.dispatch(this, resource);\n                }\n\n                this._resourcesParsing.splice(this._resourcesParsing.indexOf(resource), 1);\n\n                // do completion check\n                if (this._queue.idle() && this._resourcesParsing.length === 0) {\n                    this._onComplete();\n                }\n            },\n            true\n        );\n    }\n}\n\n/**\n * A default array of middleware to run before loading each resource.\n * Each of these middlewares are added to any new Loader instances when they are created.\n *\n * @private\n * @member {function[]}\n */\nLoader._defaultBeforeMiddleware = [];\n\n/**\n * A default array of middleware to run after loading each resource.\n * Each of these middlewares are added to any new Loader instances when they are created.\n *\n * @private\n * @member {function[]}\n */\nLoader._defaultAfterMiddleware = [];\n\n/**\n * Sets up a middleware function that will run *before* the\n * resource is loaded.\n *\n * @static\n * @param {function} fn - The middleware function to register.\n * @return {Loader} Returns itself.\n */\nLoader.pre = function LoaderPreStatic(fn) {\n    Loader._defaultBeforeMiddleware.push(fn);\n\n    return Loader;\n};\n\n/**\n * Sets up a middleware function that will run *after* the\n * resource is loaded.\n *\n * @static\n * @param {function} fn - The middleware function to register.\n * @return {Loader} Returns itself.\n */\nLoader.use = function LoaderUseStatic(fn) {\n    Loader._defaultAfterMiddleware.push(fn);\n\n    return Loader;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}