{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _Mesh2 = require('./Mesh');\nvar _Mesh3 = _interopRequireDefault(_Mesh2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n/**\n * The Plane allows you to draw a texture across several points and them manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let Plane = new PIXI.Plane(PIXI.Texture.fromImage(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.mesh.Mesh\n * @memberof PIXI.mesh\n *\n */\nvar Plane = function (_Mesh) {\n  _inherits(Plane, _Mesh);\n\n  /**\n   * @param {PIXI.Texture} texture - The texture to use on the Plane.\n   * @param {number} [verticesX=10] - The number of vertices in the x-axis\n   * @param {number} [verticesY=10] - The number of vertices in the y-axis\n   */\n  function Plane(texture, verticesX, verticesY) {\n    _classCallCheck(this, Plane);\n\n    /**\n     * Tracker for if the Plane is ready to be drawn. Needed because Mesh ctor can\n     * call _onTextureUpdated which could call refresh too early.\n     *\n     * @member {boolean}\n     * @private\n     */\n    var _this = _possibleConstructorReturn(this, _Mesh.call(this, texture));\n    _this._ready = true;\n    _this.verticesX = verticesX || 10;\n    _this.verticesY = verticesY || 10;\n    _this.drawMode = _Mesh3.default.DRAW_MODES.TRIANGLES;\n    _this.refresh();\n    return _this;\n  }\n\n  /**\n   * Refreshes plane coordinates\n   *\n   */\n\n  Plane.prototype._refresh = function _refresh() {\n    var texture = this._texture;\n    var total = this.verticesX * this.verticesY;\n    var verts = [];\n    var colors = [];\n    var uvs = [];\n    var indices = [];\n    var segmentsX = this.verticesX - 1;\n    var segmentsY = this.verticesY - 1;\n    var sizeX = texture.width / segmentsX;\n    var sizeY = texture.height / segmentsY;\n    for (var i = 0; i < total; i++) {\n      var x = i % this.verticesX;\n      var y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / segmentsX, y / segmentsY);\n    }\n\n    //  cons\n\n    var totalSub = segmentsX * segmentsY;\n    for (var _i = 0; _i < totalSub; _i++) {\n      var xpos = _i % segmentsX;\n      var ypos = _i / segmentsX | 0;\n      var value = ypos * this.verticesX + xpos;\n      var value2 = ypos * this.verticesX + xpos + 1;\n      var value3 = (ypos + 1) * this.verticesX + xpos;\n      var value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(value, value2, value3);\n      indices.push(value2, value4, value3);\n    }\n\n    // console.log(indices)\n    this.vertices = new Float32Array(verts);\n    this.uvs = new Float32Array(uvs);\n    this.colors = new Float32Array(colors);\n    this.indices = new Uint16Array(indices);\n    this.dirty++;\n    this.indexDirty++;\n    this.multiplyUvs();\n  };\n\n  /**\n   * Clear texture UVs when new texture is set\n   *\n   * @private\n   */\n\n  Plane.prototype._onTextureUpdate = function _onTextureUpdate() {\n    _Mesh3.default.prototype._onTextureUpdate.call(this);\n\n    // wait for the Plane ctor to finish before calling refresh\n    if (this._ready) {\n      this.refresh();\n    }\n  };\n  return Plane;\n}(_Mesh3.default);\nexports.default = Plane;","map":{"version":3,"names":["_Mesh2","require","Plane","texture","verticesX","verticesY","_classCallCheck","_this","_possibleConstructorReturn","_Mesh","call","_ready","drawMode","_Mesh3","default","DRAW_MODES","TRIANGLES","refresh","_refresh","_texture","total","verts","colors","uvs","indices","segmentsX","segmentsY","sizeX","width","sizeY","height","i","x","y","push","totalSub","_i","xpos","ypos","value","value2","value3","value4","vertices","Float32Array","Uint16Array","dirty","indexDirty","multiplyUvs","_onTextureUpdate","prototype"],"sources":["/Users/jiahuajiang/node_modules/pixi.js/src/mesh/Plane.js"],"sourcesContent":["import Mesh from './Mesh';\n\n/**\n * The Plane allows you to draw a texture across several points and them manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let Plane = new PIXI.Plane(PIXI.Texture.fromImage(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.mesh.Mesh\n * @memberof PIXI.mesh\n *\n */\nexport default class Plane extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the Plane.\n     * @param {number} [verticesX=10] - The number of vertices in the x-axis\n     * @param {number} [verticesY=10] - The number of vertices in the y-axis\n     */\n    constructor(texture, verticesX, verticesY)\n    {\n        super(texture);\n\n        /**\n         * Tracker for if the Plane is ready to be drawn. Needed because Mesh ctor can\n         * call _onTextureUpdated which could call refresh too early.\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._ready = true;\n\n        this.verticesX = verticesX || 10;\n        this.verticesY = verticesY || 10;\n\n        this.drawMode = Mesh.DRAW_MODES.TRIANGLES;\n        this.refresh();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     *\n     */\n    _refresh()\n    {\n        const texture = this._texture;\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const colors = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.verticesX - 1;\n        const segmentsY = this.verticesY - 1;\n\n        const sizeX = texture.width / segmentsX;\n        const sizeY = texture.height / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        //  cons\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3);\n            indices.push(value2, value4, value3);\n        }\n\n        // console.log(indices)\n        this.vertices = new Float32Array(verts);\n        this.uvs = new Float32Array(uvs);\n        this.colors = new Float32Array(colors);\n        this.indices = new Uint16Array(indices);\n\n        this.dirty++;\n        this.indexDirty++;\n\n        this.multiplyUvs();\n    }\n\n    /**\n     * Clear texture UVs when new texture is set\n     *\n     * @private\n     */\n    _onTextureUpdate()\n    {\n        Mesh.prototype._onTextureUpdate.call(this);\n\n        // wait for the Plane ctor to finish before calling refresh\n        if (this._ready)\n        {\n            this.refresh();\n        }\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}