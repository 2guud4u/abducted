{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar core = require('@pixi/core');\nvar display = require('@pixi/display');\nvar mesh = require('@pixi/mesh');\nvar BitmapFont = require('./BitmapFont.js');\nvar msdf$1 = require('./shader/msdf.js');\nvar msdf = require('./shader/msdf2.js');\nrequire('./utils/index.js');\nvar splitTextToCharacters = require('./utils/splitTextToCharacters.js');\nvar extractCharCode = require('./utils/extractCharCode.js');\nconst pageMeshDataDefaultPageMeshData = [];\nconst pageMeshDataMSDFPageMeshData = [];\nconst charRenderDataPool = [];\nconst _BitmapText = class extends display.Container {\n  constructor(text) {\n    let style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    const {\n      align,\n      tint,\n      maxWidth,\n      letterSpacing,\n      fontName,\n      fontSize\n    } = Object.assign({}, _BitmapText.styleDefaults, style);\n    if (!BitmapFont.BitmapFont.available[fontName]) {\n      throw new Error(`Missing BitmapFont \"${fontName}\"`);\n    }\n    this._activePagesMeshData = [];\n    this._textWidth = 0;\n    this._textHeight = 0;\n    this._align = align;\n    this._tintColor = new core.Color(tint);\n    this._font = void 0;\n    this._fontName = fontName;\n    this._fontSize = fontSize;\n    this.text = text;\n    this._maxWidth = maxWidth;\n    this._maxLineHeight = 0;\n    this._letterSpacing = letterSpacing;\n    this._anchor = new core.ObservablePoint(() => {\n      this.dirty = true;\n    }, this, 0, 0);\n    this._roundPixels = core.settings.ROUND_PIXELS;\n    this.dirty = true;\n    this._resolution = core.settings.RESOLUTION;\n    this._autoResolution = true;\n    this._textureCache = {};\n  }\n  updateText() {\n    const data = BitmapFont.BitmapFont.available[this._fontName];\n    const fontSize = this.fontSize;\n    const scale = fontSize / data.size;\n    const pos = new core.Point();\n    const chars = [];\n    const lineWidths = [];\n    const lineSpaces = [];\n    const text = this._text.replace(/(?:\\r\\n|\\r)/g, \"\\n\") || \" \";\n    const charsInput = splitTextToCharacters.splitTextToCharacters(text);\n    const maxWidth = this._maxWidth * data.size / fontSize;\n    const pageMeshDataPool = data.distanceFieldType === \"none\" ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n    let prevCharCode = null;\n    let lastLineWidth = 0;\n    let maxLineWidth = 0;\n    let line = 0;\n    let lastBreakPos = -1;\n    let lastBreakWidth = 0;\n    let spacesRemoved = 0;\n    let maxLineHeight = 0;\n    let spaceCount = 0;\n    for (let i = 0; i < charsInput.length; i++) {\n      const char = charsInput[i];\n      const charCode = extractCharCode.extractCharCode(char);\n      if (/(?:\\s)/.test(char)) {\n        lastBreakPos = i;\n        lastBreakWidth = lastLineWidth;\n        spaceCount++;\n      }\n      if (char === \"\\r\" || char === \"\\n\") {\n        lineWidths.push(lastLineWidth);\n        lineSpaces.push(-1);\n        maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n        ++line;\n        ++spacesRemoved;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n        spaceCount = 0;\n        continue;\n      }\n      const charData = data.chars[charCode];\n      if (!charData) {\n        continue;\n      }\n      if (prevCharCode && charData.kerning[prevCharCode]) {\n        pos.x += charData.kerning[prevCharCode];\n      }\n      const charRenderData = charRenderDataPool.pop() || {\n        texture: core.Texture.EMPTY,\n        line: 0,\n        charCode: 0,\n        prevSpaces: 0,\n        position: new core.Point()\n      };\n      charRenderData.texture = charData.texture;\n      charRenderData.line = line;\n      charRenderData.charCode = charCode;\n      charRenderData.position.x = Math.round(pos.x + charData.xOffset + this._letterSpacing / 2);\n      charRenderData.position.y = Math.round(pos.y + charData.yOffset);\n      charRenderData.prevSpaces = spaceCount;\n      chars.push(charRenderData);\n      lastLineWidth = charRenderData.position.x + Math.max(charData.xAdvance - charData.xOffset, charData.texture.orig.width);\n      pos.x += charData.xAdvance + this._letterSpacing;\n      maxLineHeight = Math.max(maxLineHeight, charData.yOffset + charData.texture.height);\n      prevCharCode = charCode;\n      if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth) {\n        ++spacesRemoved;\n        core.utils.removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n        i = lastBreakPos;\n        lastBreakPos = -1;\n        lineWidths.push(lastBreakWidth);\n        lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n        maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n        line++;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n        spaceCount = 0;\n      }\n    }\n    const lastChar = charsInput[charsInput.length - 1];\n    if (lastChar !== \"\\r\" && lastChar !== \"\\n\") {\n      if (/(?:\\s)/.test(lastChar)) {\n        lastLineWidth = lastBreakWidth;\n      }\n      lineWidths.push(lastLineWidth);\n      maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n      lineSpaces.push(-1);\n    }\n    const lineAlignOffsets = [];\n    for (let i = 0; i <= line; i++) {\n      let alignOffset = 0;\n      if (this._align === \"right\") {\n        alignOffset = maxLineWidth - lineWidths[i];\n      } else if (this._align === \"center\") {\n        alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n      } else if (this._align === \"justify\") {\n        alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n      }\n      lineAlignOffsets.push(alignOffset);\n    }\n    const lenChars = chars.length;\n    const pagesMeshData = {};\n    const newPagesMeshData = [];\n    const activePagesMeshData = this._activePagesMeshData;\n    pageMeshDataPool.push(...activePagesMeshData);\n    for (let i = 0; i < lenChars; i++) {\n      const texture = chars[i].texture;\n      const baseTextureUid = texture.baseTexture.uid;\n      if (!pagesMeshData[baseTextureUid]) {\n        let pageMeshData = pageMeshDataPool.pop();\n        if (!pageMeshData) {\n          const geometry = new mesh.MeshGeometry();\n          let material;\n          let meshBlendMode;\n          if (data.distanceFieldType === \"none\") {\n            material = new mesh.MeshMaterial(core.Texture.EMPTY);\n            meshBlendMode = core.BLEND_MODES.NORMAL;\n          } else {\n            material = new mesh.MeshMaterial(core.Texture.EMPTY, {\n              program: core.Program.from(msdf[\"default\"], msdf$1[\"default\"]),\n              uniforms: {\n                uFWidth: 0\n              }\n            });\n            meshBlendMode = core.BLEND_MODES.NORMAL_NPM;\n          }\n          const mesh$1 = new mesh.Mesh(geometry, material);\n          mesh$1.blendMode = meshBlendMode;\n          pageMeshData = {\n            index: 0,\n            indexCount: 0,\n            vertexCount: 0,\n            uvsCount: 0,\n            total: 0,\n            mesh: mesh$1,\n            vertices: null,\n            uvs: null,\n            indices: null\n          };\n        }\n        pageMeshData.index = 0;\n        pageMeshData.indexCount = 0;\n        pageMeshData.vertexCount = 0;\n        pageMeshData.uvsCount = 0;\n        pageMeshData.total = 0;\n        const {\n          _textureCache\n        } = this;\n        _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new core.Texture(texture.baseTexture);\n        pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n        pageMeshData.mesh.tint = this._tintColor.value;\n        newPagesMeshData.push(pageMeshData);\n        pagesMeshData[baseTextureUid] = pageMeshData;\n      }\n      pagesMeshData[baseTextureUid].total++;\n    }\n    for (let i = 0; i < activePagesMeshData.length; i++) {\n      if (!newPagesMeshData.includes(activePagesMeshData[i])) {\n        this.removeChild(activePagesMeshData[i].mesh);\n      }\n    }\n    for (let i = 0; i < newPagesMeshData.length; i++) {\n      if (newPagesMeshData[i].mesh.parent !== this) {\n        this.addChild(newPagesMeshData[i].mesh);\n      }\n    }\n    this._activePagesMeshData = newPagesMeshData;\n    for (const i in pagesMeshData) {\n      const pageMeshData = pagesMeshData[i];\n      const total = pageMeshData.total;\n      if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < mesh.Mesh.BATCHABLE_SIZE * 2) {\n        pageMeshData.vertices = new Float32Array(4 * 2 * total);\n        pageMeshData.uvs = new Float32Array(4 * 2 * total);\n        pageMeshData.indices = new Uint16Array(6 * total);\n      } else {\n        const total2 = pageMeshData.total;\n        const vertices = pageMeshData.vertices;\n        for (let i2 = total2 * 4 * 2; i2 < vertices.length; i2++) {\n          vertices[i2] = 0;\n        }\n      }\n      pageMeshData.mesh.size = 6 * total;\n    }\n    for (let i = 0; i < lenChars; i++) {\n      const char = chars[i];\n      let offset = char.position.x + lineAlignOffsets[char.line] * (this._align === \"justify\" ? char.prevSpaces : 1);\n      if (this._roundPixels) {\n        offset = Math.round(offset);\n      }\n      const xPos = offset * scale;\n      const yPos = char.position.y * scale;\n      const texture = char.texture;\n      const pageMesh = pagesMeshData[texture.baseTexture.uid];\n      const textureFrame = texture.frame;\n      const textureUvs = texture._uvs;\n      const index = pageMesh.index++;\n      pageMesh.indices[index * 6 + 0] = 0 + index * 4;\n      pageMesh.indices[index * 6 + 1] = 1 + index * 4;\n      pageMesh.indices[index * 6 + 2] = 2 + index * 4;\n      pageMesh.indices[index * 6 + 3] = 0 + index * 4;\n      pageMesh.indices[index * 6 + 4] = 2 + index * 4;\n      pageMesh.indices[index * 6 + 5] = 3 + index * 4;\n      pageMesh.vertices[index * 8 + 0] = xPos;\n      pageMesh.vertices[index * 8 + 1] = yPos;\n      pageMesh.vertices[index * 8 + 2] = xPos + textureFrame.width * scale;\n      pageMesh.vertices[index * 8 + 3] = yPos;\n      pageMesh.vertices[index * 8 + 4] = xPos + textureFrame.width * scale;\n      pageMesh.vertices[index * 8 + 5] = yPos + textureFrame.height * scale;\n      pageMesh.vertices[index * 8 + 6] = xPos;\n      pageMesh.vertices[index * 8 + 7] = yPos + textureFrame.height * scale;\n      pageMesh.uvs[index * 8 + 0] = textureUvs.x0;\n      pageMesh.uvs[index * 8 + 1] = textureUvs.y0;\n      pageMesh.uvs[index * 8 + 2] = textureUvs.x1;\n      pageMesh.uvs[index * 8 + 3] = textureUvs.y1;\n      pageMesh.uvs[index * 8 + 4] = textureUvs.x2;\n      pageMesh.uvs[index * 8 + 5] = textureUvs.y2;\n      pageMesh.uvs[index * 8 + 6] = textureUvs.x3;\n      pageMesh.uvs[index * 8 + 7] = textureUvs.y3;\n    }\n    this._textWidth = maxLineWidth * scale;\n    this._textHeight = (pos.y + data.lineHeight) * scale;\n    for (const i in pagesMeshData) {\n      const pageMeshData = pagesMeshData[i];\n      if (this.anchor.x !== 0 || this.anchor.y !== 0) {\n        let vertexCount = 0;\n        const anchorOffsetX = this._textWidth * this.anchor.x;\n        const anchorOffsetY = this._textHeight * this.anchor.y;\n        for (let i2 = 0; i2 < pageMeshData.total; i2++) {\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n        }\n      }\n      this._maxLineHeight = maxLineHeight * scale;\n      const vertexBuffer = pageMeshData.mesh.geometry.getBuffer(\"aVertexPosition\");\n      const textureBuffer = pageMeshData.mesh.geometry.getBuffer(\"aTextureCoord\");\n      const indexBuffer = pageMeshData.mesh.geometry.getIndex();\n      vertexBuffer.data = pageMeshData.vertices;\n      textureBuffer.data = pageMeshData.uvs;\n      indexBuffer.data = pageMeshData.indices;\n      vertexBuffer.update();\n      textureBuffer.update();\n      indexBuffer.update();\n    }\n    for (let i = 0; i < chars.length; i++) {\n      charRenderDataPool.push(chars[i]);\n    }\n    this._font = data;\n    this.dirty = false;\n  }\n  updateTransform() {\n    this.validate();\n    this.containerUpdateTransform();\n  }\n  _render(renderer) {\n    if (this._autoResolution && this._resolution !== renderer.resolution) {\n      this._resolution = renderer.resolution;\n      this.dirty = true;\n    }\n    const {\n      distanceFieldRange,\n      distanceFieldType,\n      size\n    } = BitmapFont.BitmapFont.available[this._fontName];\n    if (distanceFieldType !== \"none\") {\n      const {\n        a,\n        b,\n        c,\n        d\n      } = this.worldTransform;\n      const dx = Math.sqrt(a * a + b * b);\n      const dy = Math.sqrt(c * c + d * d);\n      const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n      const fontScale = this.fontSize / size;\n      const resolution = renderer._view.resolution;\n      for (const mesh of this._activePagesMeshData) {\n        mesh.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * resolution;\n      }\n    }\n    super._render(renderer);\n  }\n  getLocalBounds() {\n    this.validate();\n    return super.getLocalBounds();\n  }\n  validate() {\n    const font = BitmapFont.BitmapFont.available[this._fontName];\n    if (!font) {\n      throw new Error(`Missing BitmapFont \"${this._fontName}\"`);\n    }\n    if (this._font !== font) {\n      this.dirty = true;\n    }\n    if (this.dirty) {\n      this.updateText();\n    }\n  }\n  get tint() {\n    return this._tintColor.value;\n  }\n  set tint(value) {\n    if (this.tint === value) return;\n    this._tintColor.setValue(value);\n    for (let i = 0; i < this._activePagesMeshData.length; i++) {\n      this._activePagesMeshData[i].mesh.tint = value;\n    }\n  }\n  get align() {\n    return this._align;\n  }\n  set align(value) {\n    if (this._align !== value) {\n      this._align = value;\n      this.dirty = true;\n    }\n  }\n  get fontName() {\n    return this._fontName;\n  }\n  set fontName(value) {\n    if (!BitmapFont.BitmapFont.available[value]) {\n      throw new Error(`Missing BitmapFont \"${value}\"`);\n    }\n    if (this._fontName !== value) {\n      this._fontName = value;\n      this.dirty = true;\n    }\n  }\n  get fontSize() {\n    return this._fontSize ?? BitmapFont.BitmapFont.available[this._fontName].size;\n  }\n  set fontSize(value) {\n    if (this._fontSize !== value) {\n      this._fontSize = value;\n      this.dirty = true;\n    }\n  }\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    if (typeof value === \"number\") {\n      this._anchor.set(value);\n    } else {\n      this._anchor.copyFrom(value);\n    }\n  }\n  get text() {\n    return this._text;\n  }\n  set text(text) {\n    text = String(text === null || text === void 0 ? \"\" : text);\n    if (this._text === text) {\n      return;\n    }\n    this._text = text;\n    this.dirty = true;\n  }\n  get maxWidth() {\n    return this._maxWidth;\n  }\n  set maxWidth(value) {\n    if (this._maxWidth === value) {\n      return;\n    }\n    this._maxWidth = value;\n    this.dirty = true;\n  }\n  get maxLineHeight() {\n    this.validate();\n    return this._maxLineHeight;\n  }\n  get textWidth() {\n    this.validate();\n    return this._textWidth;\n  }\n  get letterSpacing() {\n    return this._letterSpacing;\n  }\n  set letterSpacing(value) {\n    if (this._letterSpacing !== value) {\n      this._letterSpacing = value;\n      this.dirty = true;\n    }\n  }\n  get roundPixels() {\n    return this._roundPixels;\n  }\n  set roundPixels(value) {\n    if (value !== this._roundPixels) {\n      this._roundPixels = value;\n      this.dirty = true;\n    }\n  }\n  get textHeight() {\n    this.validate();\n    return this._textHeight;\n  }\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(value) {\n    this._autoResolution = false;\n    if (this._resolution === value) {\n      return;\n    }\n    this._resolution = value;\n    this.dirty = true;\n  }\n  destroy(options) {\n    const {\n      _textureCache\n    } = this;\n    const data = BitmapFont.BitmapFont.available[this._fontName];\n    const pageMeshDataPool = data.distanceFieldType === \"none\" ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n    pageMeshDataPool.push(...this._activePagesMeshData);\n    for (const pageMeshData of this._activePagesMeshData) {\n      this.removeChild(pageMeshData.mesh);\n    }\n    this._activePagesMeshData = [];\n    pageMeshDataPool.filter(page => _textureCache[page.mesh.texture.baseTexture.uid]).forEach(page => {\n      page.mesh.texture = core.Texture.EMPTY;\n    });\n    for (const id in _textureCache) {\n      const texture = _textureCache[id];\n      texture.destroy();\n      delete _textureCache[id];\n    }\n    this._font = null;\n    this._tintColor = null;\n    this._textureCache = null;\n    super.destroy(options);\n  }\n};\nlet BitmapText = _BitmapText;\nBitmapText.styleDefaults = {\n  align: \"left\",\n  tint: 16777215,\n  maxWidth: 0,\n  letterSpacing: 0\n};\nexports.BitmapText = BitmapText;","map":{"version":3,"names":["pageMeshDataDefaultPageMeshData","pageMeshDataMSDFPageMeshData","charRenderDataPool","_BitmapText","display","Container","constructor","text","style","arguments","length","undefined","align","tint","maxWidth","letterSpacing","fontName","fontSize","Object","assign","styleDefaults","BitmapFont","available","Error","_activePagesMeshData","_textWidth","_textHeight","_align","_tintColor","core","Color","_font","_fontName","_fontSize","_maxWidth","_maxLineHeight","_letterSpacing","_anchor","ObservablePoint","dirty","_roundPixels","settings","ROUND_PIXELS","_resolution","RESOLUTION","_autoResolution","_textureCache","updateText","data","scale","size","pos","Point","chars","lineWidths","lineSpaces","_text","replace","charsInput","splitTextToCharacters","pageMeshDataPool","distanceFieldType","prevCharCode","lastLineWidth","maxLineWidth","line","lastBreakPos","lastBreakWidth","spacesRemoved","maxLineHeight","spaceCount","i","char","charCode","extractCharCode","test","push","Math","max","x","y","lineHeight","charData","kerning","charRenderData","pop","texture","Texture","EMPTY","prevSpaces","position","round","xOffset","yOffset","xAdvance","orig","width","height","utils","removeItems","lastChar","lineAlignOffsets","alignOffset","lenChars","pagesMeshData","newPagesMeshData","activePagesMeshData","baseTextureUid","baseTexture","uid","pageMeshData","geometry","mesh","MeshGeometry","material","meshBlendMode","MeshMaterial","BLEND_MODES","NORMAL","program","Program","from","msdf","msdf$1","uniforms","uFWidth","NORMAL_NPM","mesh$1","Mesh","blendMode","index","indexCount","vertexCount","uvsCount","total","vertices","uvs","indices","value","includes","removeChild","parent","addChild","BATCHABLE_SIZE","Float32Array","Uint16Array","total2","i2","offset","xPos","yPos","pageMesh","textureFrame","frame","textureUvs","_uvs","x0","y0","x1","y1","x2","y2","x3","y3","anchor","anchorOffsetX","anchorOffsetY","vertexBuffer","getBuffer","textureBuffer","indexBuffer","getIndex","update","updateTransform","validate","containerUpdateTransform","_render","renderer","resolution","distanceFieldRange","a","b","c","d","worldTransform","dx","sqrt","dy","worldScale","abs","fontScale","_view","shader","getLocalBounds","font","setValue","set","copyFrom","String","textWidth","roundPixels","textHeight","destroy","options","filter","page","forEach","id","BitmapText"],"sources":["/Users/jiahuajiang/Desktop/code/projects/abducted/pixi-game/node_modules/@pixi/text-bitmap/src/BitmapText.ts"],"sourcesContent":["import { BLEND_MODES, Color, ObservablePoint, Point, Program, settings, Texture, utils } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { BitmapFont } from './BitmapFont';\nimport msdfFrag from './shader/msdf.frag';\nimport msdfVert from './shader/msdf.vert';\nimport { extractCharCode, splitTextToCharacters } from './utils';\n\nimport type { ColorSource, Rectangle, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { TextStyleAlign } from '@pixi/text';\nimport type { IBitmapTextStyle } from './BitmapTextStyle';\n\ninterface PageMeshData\n{\n    index: number;\n    indexCount: number;\n    vertexCount: number;\n    uvsCount: number;\n    total: number;\n    mesh: Mesh;\n    vertices?: Float32Array;\n    uvs?: Float32Array;\n    indices?: Uint16Array;\n}\ninterface CharRenderData\n{\n    texture: Texture;\n    line: number;\n    charCode: number;\n    position: Point;\n    prevSpaces: number;\n}\n\n// If we ever need more than two pools, please make a Dict or something better.\nconst pageMeshDataDefaultPageMeshData: PageMeshData[] = [];\nconst pageMeshDataMSDFPageMeshData: PageMeshData[] = [];\nconst charRenderDataPool: CharRenderData[] = [];\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * You can also use SDF, MSDF and MTSDF BitmapFonts for vector-like scaling appearance provided by:\n * https://github.com/soimy/msdf-bmfont-xml for SDF and MSDF fnt files or\n * https://github.com/Chlumsky/msdf-atlas-gen for SDF, MSDF and MTSDF json files\n *\n * A BitmapText can only be created when the font is loaded.\n * @example\n * import { BitmapText } from 'pixi.js';\n *\n * // in this case the font is in a file called 'desyrel.fnt'\n * const bitmapText = new BitmapText('text using a fancy font!', {\n *     fontName: 'Desyrel',\n *     fontSize: 35,\n *     align: 'right',\n * });\n * @memberof PIXI\n */\nexport class BitmapText extends Container\n{\n    public static styleDefaults: Partial<IBitmapTextStyle> = {\n        align: 'left',\n        tint: 0xFFFFFF,\n        maxWidth: 0,\n        letterSpacing: 0,\n    };\n\n    /** Set to `true` if the BitmapText needs to be redrawn. */\n    public dirty: boolean;\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default PIXI.settings.RESOLUTION\n     */\n    _resolution: number;\n    _autoResolution: boolean;\n\n    /**\n     * Private tracker for the width of the overall text.\n     * @private\n     */\n    protected _textWidth: number;\n\n    /**\n     * Private tracker for the height of the overall text.\n     * @private\n     */\n    protected _textHeight: number;\n\n    /**\n     * Private tracker for the current text.\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting value to 0\n     * @private\n     */\n    protected _maxWidth: number;\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * ie: when trying to vertically align. (Internally used)\n     * @private\n     */\n    protected _maxLineHeight: number;\n\n    /**\n     * Letter spacing. This is useful for setting the space between characters.\n     * @private\n     */\n    protected _letterSpacing: number;\n\n    /**\n     * Text anchor.\n     * @readonly\n     * @private\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * Private tracker for the current font.\n     * @private\n     */\n    protected _font?: BitmapFont;\n\n    /**\n     * Private tracker for the current font name.\n     * @private\n     */\n    protected _fontName: string;\n\n    /**\n     * Private tracker for the current font size.\n     * @private\n     */\n    protected _fontSize?: number;\n\n    /**\n     * Private tracker for the current text align.\n     * @type {string}\n     * @private\n     */\n    protected _align: TextStyleAlign;\n\n    /** Collection of page mesh data. */\n    protected _activePagesMeshData: PageMeshData[];\n\n    /**\n     * Private tracker for the current tint.\n     * @private\n     */\n    protected _tintColor: Color;\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering.\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    protected _roundPixels: boolean;\n\n    /** Cached char texture is destroyed when BitmapText is destroyed. */\n    private _textureCache: Record<number, Texture>;\n\n    /**\n     * @param text - A string that you would like the text to display.\n     * @param style - The style parameters.\n     * @param {string} style.fontName - The installed BitmapFont name.\n     * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n     *.     this will default to the BitmapFont size.\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n     *      does not affect single line text.\n     * @param {PIXI.ColorSource} [style.tint=0xFFFFFF] - The tint color.\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n     * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n     */\n    constructor(text: string, style: Partial<IBitmapTextStyle> = {})\n    {\n        super();\n\n        // Apply the defaults\n        const { align, tint, maxWidth, letterSpacing, fontName, fontSize } = Object.assign(\n            {}, BitmapText.styleDefaults, style);\n\n        if (!BitmapFont.available[fontName])\n        {\n            throw new Error(`Missing BitmapFont \"${fontName}\"`);\n        }\n\n        this._activePagesMeshData = [];\n        this._textWidth = 0;\n        this._textHeight = 0;\n        this._align = align;\n        this._tintColor = new Color(tint);\n        this._font = undefined;\n        this._fontName = fontName;\n        this._fontSize = fontSize;\n        this.text = text;\n        this._maxWidth = maxWidth;\n        this._maxLineHeight = 0;\n        this._letterSpacing = letterSpacing;\n        this._anchor = new ObservablePoint((): void => { this.dirty = true; }, this, 0, 0);\n        this._roundPixels = settings.ROUND_PIXELS;\n        this.dirty = true;\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n        this._textureCache = {};\n    }\n\n    /** Renders text and updates it when needed. This should only be called if the BitmapFont is regenerated. */\n    public updateText(): void\n    {\n        const data = BitmapFont.available[this._fontName];\n        const fontSize = this.fontSize;\n        const scale = fontSize / data.size;\n        const pos = new Point();\n        const chars: CharRenderData[] = [];\n        const lineWidths = [];\n        const lineSpaces = [];\n        const text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n        const charsInput = splitTextToCharacters(text);\n        const maxWidth = this._maxWidth * data.size / fontSize;\n        const pageMeshDataPool = data.distanceFieldType === 'none'\n            ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastBreakPos = -1;\n        let lastBreakWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n        let spaceCount = 0;\n\n        for (let i = 0; i < charsInput.length; i++)\n        {\n            const char = charsInput[i];\n            const charCode = extractCharCode(char);\n\n            if ((/(?:\\s)/).test(char))\n            {\n                lastBreakPos = i;\n                lastBreakWidth = lastLineWidth;\n                spaceCount++;\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                lineWidths.push(lastLineWidth);\n                lineSpaces.push(-1);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                ++line;\n                ++spacesRemoved;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            const charRenderData: CharRenderData = charRenderDataPool.pop() || {\n                texture: Texture.EMPTY,\n                line: 0,\n                charCode: 0,\n                prevSpaces: 0,\n                position: new Point(),\n            };\n\n            charRenderData.texture = charData.texture;\n            charRenderData.line = line;\n            charRenderData.charCode = charCode;\n            charRenderData.position.x = Math.round(pos.x + charData.xOffset + (this._letterSpacing / 2));\n            charRenderData.position.y = Math.round(pos.y + charData.yOffset);\n            charRenderData.prevSpaces = spaceCount;\n\n            chars.push(charRenderData);\n\n            lastLineWidth = charRenderData.position.x\n                + Math.max(charData.xAdvance - charData.xOffset, charData.texture.orig.width);\n            pos.x += charData.xAdvance + this._letterSpacing;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n\n            if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth)\n            {\n                ++spacesRemoved;\n                utils.removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n                i = lastBreakPos;\n                lastBreakPos = -1;\n\n                lineWidths.push(lastBreakWidth);\n                lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n                maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n            }\n        }\n\n        const lastChar = charsInput[charsInput.length - 1];\n\n        if (lastChar !== '\\r' && lastChar !== '\\n')\n        {\n            if ((/(?:\\s)/).test(lastChar))\n            {\n                lastLineWidth = lastBreakWidth;\n            }\n\n            lineWidths.push(lastLineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n            lineSpaces.push(-1);\n        }\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n            else if (this._align === 'justify')\n            {\n                alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n\n        const pagesMeshData: Record<number, PageMeshData> = {};\n\n        const newPagesMeshData: PageMeshData[] = [];\n\n        const activePagesMeshData = this._activePagesMeshData;\n\n        pageMeshDataPool.push(...activePagesMeshData);\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const texture = chars[i].texture;\n            const baseTextureUid = texture.baseTexture.uid;\n\n            if (!pagesMeshData[baseTextureUid])\n            {\n                let pageMeshData = pageMeshDataPool.pop();\n\n                if (!pageMeshData)\n                {\n                    const geometry = new MeshGeometry();\n                    let material: MeshMaterial;\n                    let meshBlendMode: BLEND_MODES;\n\n                    if (data.distanceFieldType === 'none')\n                    {\n                        material = new MeshMaterial(Texture.EMPTY);\n                        meshBlendMode = BLEND_MODES.NORMAL;\n                    }\n                    else\n                    {\n                        material = new MeshMaterial(Texture.EMPTY,\n                            { program: Program.from(msdfVert, msdfFrag), uniforms: { uFWidth: 0 } });\n                        meshBlendMode = BLEND_MODES.NORMAL_NPM;\n                    }\n\n                    const mesh = new Mesh(geometry, material);\n\n                    mesh.blendMode = meshBlendMode;\n\n                    pageMeshData = {\n                        index: 0,\n                        indexCount: 0,\n                        vertexCount: 0,\n                        uvsCount: 0,\n                        total: 0,\n                        mesh,\n                        vertices: null,\n                        uvs: null,\n                        indices: null,\n                    };\n                }\n\n                // reset data..\n                pageMeshData.index = 0;\n                pageMeshData.indexCount = 0;\n                pageMeshData.vertexCount = 0;\n                pageMeshData.uvsCount = 0;\n                pageMeshData.total = 0;\n\n                // TODO need to get page texture here somehow..\n                const { _textureCache } = this;\n\n                _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new Texture(texture.baseTexture);\n                pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n\n                pageMeshData.mesh.tint = this._tintColor.value;\n\n                newPagesMeshData.push(pageMeshData);\n\n                pagesMeshData[baseTextureUid] = pageMeshData;\n            }\n\n            pagesMeshData[baseTextureUid].total++;\n        }\n\n        // lets find any previously active pageMeshDatas that are no longer required for\n        // the updated text (if any), removed and return them to the pool.\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            if (!newPagesMeshData.includes(activePagesMeshData[i]))\n            {\n                this.removeChild(activePagesMeshData[i].mesh);\n            }\n        }\n\n        // next lets add any new meshes, that have not yet been added to this BitmapText\n        // we only add if its not already a child of this BitmapObject\n        for (let i = 0; i < newPagesMeshData.length; i++)\n        {\n            if (newPagesMeshData[i].mesh.parent !== this)\n            {\n                this.addChild(newPagesMeshData[i].mesh);\n            }\n        }\n\n        // active page mesh datas are set to be the new pages added.\n        this._activePagesMeshData = newPagesMeshData;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n            const total = pageMeshData.total;\n\n            // lets only allocate new buffers if we can fit the new text in the current ones..\n            // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n            if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2)\n            {\n                pageMeshData.vertices = new Float32Array(4 * 2 * total);\n                pageMeshData.uvs = new Float32Array(4 * 2 * total);\n                pageMeshData.indices = new Uint16Array(6 * total);\n            }\n            else\n            {\n                const total = pageMeshData.total;\n                const vertices = pageMeshData.vertices;\n\n                // Clear the garbage at the end of the vertices buffer. This will prevent the bounds miscalculation.\n                for (let i = total * 4 * 2; i < vertices.length; i++)\n                {\n                    vertices[i] = 0;\n                }\n            }\n\n            // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n            // to match the number of letters needed\n            pageMeshData.mesh.size = 6 * total;\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const char = chars[i];\n            let offset = char.position.x + (lineAlignOffsets[char.line] * (this._align === 'justify' ? char.prevSpaces : 1));\n\n            if (this._roundPixels)\n            {\n                offset = Math.round(offset);\n            }\n\n            const xPos = offset * scale;\n            const yPos = char.position.y * scale;\n            const texture = char.texture;\n\n            const pageMesh = pagesMeshData[texture.baseTexture.uid];\n\n            const textureFrame = texture.frame;\n            const textureUvs = texture._uvs;\n\n            const index = pageMesh.index++;\n\n            pageMesh.indices[(index * 6) + 0] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 1] = 1 + (index * 4);\n            pageMesh.indices[(index * 6) + 2] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 3] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 4] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 5] = 3 + (index * 4);\n\n            pageMesh.vertices[(index * 8) + 0] = xPos;\n            pageMesh.vertices[(index * 8) + 1] = yPos;\n\n            pageMesh.vertices[(index * 8) + 2] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 3] = yPos;\n\n            pageMesh.vertices[(index * 8) + 4] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 5] = yPos + (textureFrame.height * scale);\n\n            pageMesh.vertices[(index * 8) + 6] = xPos;\n            pageMesh.vertices[(index * 8) + 7] = yPos + (textureFrame.height * scale);\n\n            pageMesh.uvs[(index * 8) + 0] = textureUvs.x0;\n            pageMesh.uvs[(index * 8) + 1] = textureUvs.y0;\n\n            pageMesh.uvs[(index * 8) + 2] = textureUvs.x1;\n            pageMesh.uvs[(index * 8) + 3] = textureUvs.y1;\n\n            pageMesh.uvs[(index * 8) + 4] = textureUvs.x2;\n            pageMesh.uvs[(index * 8) + 5] = textureUvs.y2;\n\n            pageMesh.uvs[(index * 8) + 6] = textureUvs.x3;\n            pageMesh.uvs[(index * 8) + 7] = textureUvs.y3;\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n\n            // apply anchor\n            if (this.anchor.x !== 0 || this.anchor.y !== 0)\n            {\n                let vertexCount = 0;\n\n                const anchorOffsetX = this._textWidth * this.anchor.x;\n                const anchorOffsetY = this._textHeight * this.anchor.y;\n\n                for (let i = 0; i < pageMeshData.total; i++)\n                {\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n                }\n            }\n\n            this._maxLineHeight = maxLineHeight * scale;\n\n            const vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n            const textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n            const indexBuffer = pageMeshData.mesh.geometry.getIndex();\n\n            vertexBuffer.data = pageMeshData.vertices;\n            textureBuffer.data = pageMeshData.uvs;\n            indexBuffer.data = pageMeshData.indices;\n\n            vertexBuffer.update();\n            textureBuffer.update();\n            indexBuffer.update();\n        }\n\n        for (let i = 0; i < chars.length; i++)\n        {\n            charRenderDataPool.push(chars[i]);\n        }\n\n        this._font = data;\n        this.dirty = false;\n    }\n\n    updateTransform(): void\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        // Update the uniform\n        const { distanceFieldRange, distanceFieldType, size } = BitmapFont.available[this._fontName];\n\n        if (distanceFieldType !== 'none')\n        {\n            // Inject the shader code with the correct value\n            const { a, b, c, d } = this.worldTransform;\n\n            const dx = Math.sqrt((a * a) + (b * b));\n            const dy = Math.sqrt((c * c) + (d * d));\n            const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n            const fontScale = this.fontSize / size;\n\n            const resolution = renderer._view.resolution;\n\n            for (const mesh of this._activePagesMeshData)\n            {\n                mesh.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * resolution;\n            }\n        }\n\n        super._render(renderer);\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     * @returns - The rectangular bounding area\n     */\n    public getLocalBounds(): Rectangle\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     * @private\n     */\n    protected validate(): void\n    {\n        const font = BitmapFont.available[this._fontName];\n\n        if (!font)\n        {\n            throw new Error(`Missing BitmapFont \"${this._fontName}\"`);\n        }\n        if (this._font !== font)\n        {\n            this.dirty = true;\n        }\n\n        if (this.dirty)\n        {\n            this.updateText();\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object.\n     * @default 0xffffff\n     */\n    public get tint(): ColorSource\n    {\n        return this._tintColor.value;\n    }\n\n    public set tint(value: ColorSource)\n    {\n        if (this.tint === value) return;\n\n        this._tintColor.setValue(value);\n\n        for (let i = 0; i < this._activePagesMeshData.length; i++)\n        {\n            this._activePagesMeshData[i].mesh.tint = value;\n        }\n    }\n\n    /**\n     * The alignment of the BitmapText object.\n     * @member {string}\n     * @default 'left'\n     */\n    public get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n\n    public set align(value: TextStyleAlign)\n    {\n        if (this._align !== value)\n        {\n            this._align = value;\n            this.dirty = true;\n        }\n    }\n\n    /** The name of the BitmapFont. */\n    public get fontName(): string\n    {\n        return this._fontName;\n    }\n\n    public set fontName(value: string)\n    {\n        if (!BitmapFont.available[value])\n        {\n            throw new Error(`Missing BitmapFont \"${value}\"`);\n        }\n\n        if (this._fontName !== value)\n        {\n            this._fontName = value;\n            this.dirty = true;\n        }\n    }\n\n    /** The size of the font to display. */\n    public get fontSize(): number\n    {\n        return this._fontSize ?? BitmapFont.available[this._fontName].size;\n    }\n\n    public set fontSize(value: number | undefined)\n    {\n        if (this._fontSize !== value)\n        {\n            this._fontSize = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     */\n    public get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    public set anchor(value: ObservablePoint)\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copyFrom(value);\n        }\n    }\n\n    /** The text of the BitmapText object. */\n    public get text(): string\n    {\n        return this._text;\n    }\n\n    public set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     */\n    public get maxWidth(): number\n    {\n        return this._maxWidth;\n    }\n\n    public set maxWidth(value: number)\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     * @readonly\n     */\n    public get maxLineHeight(): number\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     * @readonly\n     */\n    public get textWidth(): number\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /** Additional space between characters. */\n    public get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n\n    public set letterSpacing(value: number)\n    {\n        if (this._letterSpacing !== value)\n        {\n            this._letterSpacing = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    public get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    public set roundPixels(value: boolean)\n    {\n        if (value !== this._roundPixels)\n        {\n            this._roundPixels = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     * @readonly\n     */\n    public get textHeight(): number\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n\n    destroy(options?: boolean | IDestroyOptions): void\n    {\n        const { _textureCache } = this;\n        const data = BitmapFont.available[this._fontName];\n        const pageMeshDataPool = data.distanceFieldType === 'none'\n            ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n\n        pageMeshDataPool.push(...this._activePagesMeshData);\n        for (const pageMeshData of this._activePagesMeshData)\n        {\n            this.removeChild(pageMeshData.mesh);\n        }\n        this._activePagesMeshData = [];\n\n        // Release references to any cached textures in page pool\n        pageMeshDataPool\n            .filter((page) => _textureCache[page.mesh.texture.baseTexture.uid])\n            .forEach((page) =>\n            {\n                page.mesh.texture = Texture.EMPTY;\n            });\n\n        for (const id in _textureCache)\n        {\n            const texture = _textureCache[id];\n\n            texture.destroy();\n            delete _textureCache[id];\n        }\n\n        this._font = null;\n        this._tintColor = null;\n        this._textureCache = null;\n\n        super.destroy(options);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}